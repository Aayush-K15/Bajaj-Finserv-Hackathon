














from typing_extensions import (
    runtime_checkable,
    Protocol,
    TypeAlias,
)
from typing import (
    Any,
    Callable,
    Dict,
    IO,
    Iterable,
    Mapping,
    Optional,
    Pattern,
    TYPE_CHECKING,
    Union,
)

if TYPE_CHECKING:
    from bs4.element import (
        AttributeValueList,
        NamespacedAttribute,
        NavigableString,
        PageElement,
        ResultSet,
        Tag,
    )


@runtime_checkable
class _RegularExpressionProtocol(Protocol):
    

    def search(
        self, string: str, pos: int = ..., endpos: int = ...
    ) -> Optional[Any]: ...

    @property
    def pattern(self) -> str: ...





_IncomingMarkup: TypeAlias = Union[str, bytes, IO[str], IO[bytes]]



_RawMarkup: TypeAlias = Union[str, bytes]





_Encoding: TypeAlias = str


_Encodings: TypeAlias = Iterable[_Encoding]





_NamespacePrefix: TypeAlias = str


_NamespaceURL: TypeAlias = str


_NamespaceMapping: TypeAlias = Dict[_NamespacePrefix, _NamespaceURL]


_InvertedNamespaceMapping: TypeAlias = Dict[_NamespaceURL, _NamespacePrefix]







_RawAttributeValue: TypeAlias = str




_RawAttributeValues: TypeAlias = (
    "Mapping[Union[str, NamespacedAttribute], _RawAttributeValue]"
)




_AttributeValue: TypeAlias = Union[str, "AttributeValueList"]



_AttributeValues: TypeAlias = Dict[str, _AttributeValue]





_RawOrProcessedAttributeValues: TypeAlias = Union[_RawAttributeValues, _AttributeValues]



_InsertableElement: TypeAlias = Union["PageElement", str]










_PageElementMatchFunction: TypeAlias = Callable[["PageElement"], bool]














_TagMatchFunction: TypeAlias = Callable[["Tag"], bool]




_StringMatchFunction: TypeAlias = Callable[[str], bool]



_BaseStrainable: TypeAlias = Union[str, bytes, Pattern[str], bool]



_BaseStrainableElement: TypeAlias = Union[_BaseStrainable, _TagMatchFunction]




_BaseStrainableAttribute: TypeAlias = Union[_BaseStrainable, _StringMatchFunction]



_StrainableElement: TypeAlias = Union[
    _BaseStrainableElement, Iterable[_BaseStrainableElement]
]



_StrainableAttribute: TypeAlias = Union[
    _BaseStrainableAttribute, Iterable[_BaseStrainableAttribute]
]



_StrainableString: TypeAlias = _StrainableAttribute


_StrainableAttributes: TypeAlias = Dict[str, _StrainableAttribute]





_OneElement: TypeAlias = Union["PageElement", "Tag", "NavigableString"]
_AtMostOneElement: TypeAlias = Optional[_OneElement]
_QueryResults: TypeAlias = "ResultSet[_OneElement]"
