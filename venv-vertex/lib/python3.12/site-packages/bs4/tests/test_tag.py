import warnings
from bs4.element import (
    Comment,
    NavigableString,
)
from . import SoupTest


class TestTag(SoupTest):
    

    def test__should_pretty_print(self):
        
        tag = self.soup("").new_tag("a_tag")

        
        tag._preserve_whitespace_tags = None
        assert True is tag._should_pretty_print(0)

        
        tag.preserve_whitespace_tags = ["some_other_tag"]
        assert True is tag._should_pretty_print(1)

        
        assert False is tag._should_pretty_print(None)

        
        tag.preserve_whitespace_tags = ["some_other_tag", "a_tag"]
        assert False is tag._should_pretty_print(1)

    def test_len(self):
        
        soup = self.soup("<top>1<b>2</b>3</top>")

        
        
        assert len(soup.contents) == 1
        assert len(soup) == 1

        
        
        assert len(soup.top) == 3
        assert len(soup.top.contents) == 3

    def test_member_access_invokes_find(self):
        
        soup = self.soup("<b><i></i></b>")
        assert soup.b == soup.find("b")
        assert soup.b.i == soup.find("b").find("i")
        assert soup.a is None

    def test_deprecated_member_access(self):
        soup = self.soup("<b><i></i></b>")
        with warnings.catch_warnings(record=True) as w:
            tag = soup.bTag
        assert soup.b == tag
        assert (
            '.bTag is deprecated, use .find("b") instead. If you really were looking for a tag called bTag, use .find("bTag")'
            == str(w[0].message)
        )

    def test_has_attr(self):
        
        soup = self.soup("<foo attr='bar'>")
        assert soup.foo.has_attr("attr")
        assert not soup.foo.has_attr("attr2")

    def test_attributes_come_out_in_alphabetical_order(self):
        markup = '<b a="1" z="5" m="3" f="2" y="4"></b>'
        self.assertSoupEquals(markup, '<b a="1" f="2" m="3" y="4" z="5"></b>')

    def test_string(self):
        
        
        soup = self.soup("<b>foo</b>")
        assert soup.b.string == "foo"

    def test_empty_tag_has_no_string(self):
        
        soup = self.soup("<b></b>")
        assert soup.b.string is None

    def test_tag_with_multiple_children_has_no_string(self):
        
        soup = self.soup("<a>foo<b></b><b></b></b>")
        assert soup.b.string is None

        soup = self.soup("<a>foo<b></b>bar</b>")
        assert soup.b.string is None

        
        
        soup = self.soup("<a>foo</b>")
        soup.a.insert(1, "bar")
        assert soup.a.string is None

    def test_tag_with_recursive_string_has_string(self):
        
        
        soup = self.soup("<a><b>foo</b></a>")
        assert soup.a.string == "foo"
        assert soup.string == "foo"

    def test_lack_of_string(self):
        
        soup = self.soup("<b>f<i>e</i>o</b>")
        assert soup.b.string is None

        soup = self.soup("<b></b>")
        assert soup.b.string is None

    def test_all_text(self):
        
        soup = self.soup("<a>a<b>r</b>   <r> t </r></a>")
        assert soup.a.text == "ar  t "
        assert soup.a.get_text(strip=True) == "art"
        assert soup.a.get_text(",") == "a,r, , t "
        assert soup.a.get_text(",", strip=True) == "a,r,t"

    def test_get_text_ignores_special_string_containers(self):
        soup = self.soup("foo<!--IGNORE-->bar")
        assert soup.get_text() == "foobar"

        assert soup.get_text(types=(NavigableString, Comment)) == "fooIGNOREbar"
        assert soup.get_text(types=None) == "fooIGNOREbar"

        soup = self.soup("foo<style>CSS</style><script>Javascript</script>bar")
        assert soup.get_text() == "foobar"

    def test_all_strings_ignores_special_string_containers(self):
        soup = self.soup("foo<!--IGNORE-->bar")
        assert ["foo", "bar"] == list(soup.strings)

        soup = self.soup("foo<style>CSS</style><script>Javascript</script>bar")
        assert ["foo", "bar"] == list(soup.strings)

    def test_string_methods_inside_special_string_container_tags(self):
        
        
        
        
        

        style = self.soup("<div>a<style>Some CSS</style></div>")
        template = self.soup(
            "<div>a<template><p>Templated <b>text</b>.</p><!--With a comment.--></template></div>"
        )
        script = self.soup("<div>a<script><!--a comment-->Some text</script></div>")

        assert style.div.get_text() == "a"
        assert list(style.div.strings) == ["a"]
        assert style.div.style.get_text() == "Some CSS"
        assert list(style.div.style.strings) == ["Some CSS"]

        
        
        
        assert template.div.get_text() == "a"
        assert list(template.div.strings) == ["a"]
        assert template.div.template.get_text() == "Templated text."
        assert list(template.div.template.strings) == ["Templated ", "text", "."]

        
        
        assert script.div.get_text() == "a"
        assert list(script.div.strings) == ["a"]
        assert script.div.script.get_text() == "<!--a comment-->Some text"
        assert list(script.div.script.strings) == ["<!--a comment-->Some text"]


class TestMultiValuedAttributes(SoupTest):
    

    def test_single_value_becomes_list(self):
        soup = self.soup("<a class='foo'>")
        assert ["foo"] == soup.a["class"]

    def test_multiple_values_becomes_list(self):
        soup = self.soup("<a class='foo bar'>")
        assert ["foo", "bar"] == soup.a["class"]

    def test_multiple_values_separated_by_weird_whitespace(self):
        soup = self.soup("<a class='foo\tbar\nbaz'>")
        assert ["foo", "bar", "baz"] == soup.a["class"]

    def test_attributes_joined_into_string_on_output(self):
        soup = self.soup("<a class='foo\tbar'>")
        assert b'<a class="foo bar"></a>' == soup.a.encode()

    def test_get_attribute_list(self):
        soup = self.soup("<a id='abc def'>")
        assert ["abc def"] == soup.a.get_attribute_list("id")
        assert [] == soup.a.get_attribute_list("no such attribute")

    def test_accept_charset(self):
        soup = self.soup('<form accept-charset="ISO-8859-1 UTF-8">')
        assert ["ISO-8859-1", "UTF-8"] == soup.form["accept-charset"]

    def test_cdata_attribute_applying_only_to_one_tag(self):
        data = '<a accept-charset="ISO-8859-1 UTF-8"></a>'
        soup = self.soup(data)
        
        
        
        assert "ISO-8859-1 UTF-8" == soup.a["accept-charset"]

    def test_customization(self):
        
        
        
        
        
        
        soup = self.soup(
            '<a class="foo" id="bar">', multi_valued_attributes={"*": "id"}
        )
        assert soup.a["class"] == "foo"
        assert soup.a["id"] == ["bar"]

    def test_hidden_tag_is_invisible(self):
        
        
        
        
        
        
        
        
        soup = self.soup('<div id="1"><span id="2">a string</span></div>')
        soup.span.hidden = True
        assert '<div id="1">a string</div>' == str(soup.div)
