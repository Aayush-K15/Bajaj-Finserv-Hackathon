

from typing import Any, List, Optional

from langchain_core.callbacks import CallbackManagerForRetrieverRun
from langchain_core.documents import Document
from langchain_core.retrievers import BaseRetriever

from langchain_community.utilities import DriaAPIWrapper


class DriaRetriever(BaseRetriever):
    

    api_wrapper: DriaAPIWrapper

    def __init__(self, api_key: str, contract_id: Optional[str] = None, **kwargs: Any):
        
        api_wrapper = DriaAPIWrapper(api_key=api_key, contract_id=contract_id)
        super().__init__(api_wrapper=api_wrapper, **kwargs)  

    def create_knowledge_base(
        self,
        name: str,
        description: str,
        category: str = "Unspecified",
        embedding: str = "jina",
    ) -> str:
        
        response = self.api_wrapper.create_knowledge_base(
            name, description, category, embedding
        )
        return response

    def add_texts(
        self,
        texts: List,
    ) -> None:
        
        data = [{"text": text["text"], "metadata": text["metadata"]} for text in texts]
        self.api_wrapper.insert_data(data)

    def _get_relevant_documents(
        self, query: str, *, run_manager: CallbackManagerForRetrieverRun
    ) -> List[Document]:
        
        results = self.api_wrapper.search(query)
        docs = [
            Document(
                page_content=result["metadata"],
                metadata={"id": result["id"], "score": result["score"]},
            )
            for result in results
        ]
        return docs
