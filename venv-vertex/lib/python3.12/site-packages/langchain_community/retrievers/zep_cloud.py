from __future__ import annotations

from typing import TYPE_CHECKING, Any, Dict, List, Optional

from langchain_core.callbacks import (
    AsyncCallbackManagerForRetrieverRun,
    CallbackManagerForRetrieverRun,
)
from langchain_core.documents import Document
from langchain_core.retrievers import BaseRetriever
from pydantic import model_validator

if TYPE_CHECKING:
    from zep_cloud import MemorySearchResult, SearchScope, SearchType
    from zep_cloud.client import AsyncZep, Zep


class ZepCloudRetriever(BaseRetriever):
    

    api_key: str
    
    zep_client: Zep
    
    zep_client_async: AsyncZep
    
    session_id: str
    
    top_k: Optional[int]
    
    search_scope: SearchScope = "messages"
    
    search_type: SearchType = "similarity"
    
    mmr_lambda: Optional[float] = None
    

    @model_validator(mode="before")
    @classmethod
    def create_client(cls, values: dict) -> Any:
        try:
            from zep_cloud.client import AsyncZep, Zep
        except ImportError:
            raise ImportError(
                "Could not import zep-cloud package. "
                "Please install it with `pip install zep-cloud`."
            )
        if values.get("api_key") is None:
            raise ValueError("Zep API key is required.")
        values["zep_client"] = Zep(api_key=values.get("api_key"))
        values["zep_client_async"] = AsyncZep(api_key=values.get("api_key"))
        return values

    def _messages_search_result_to_doc(
        self, results: List[MemorySearchResult]
    ) -> List[Document]:
        return [
            Document(
                page_content=str(r.message.content),
                metadata={
                    "score": r.score,
                    "uuid": r.message.uuid_,
                    "created_at": r.message.created_at,
                    "token_count": r.message.token_count,
                    "role": r.message.role or r.message.role_type,
                },
            )
            for r in results or []
            if r.message
        ]

    def _summary_search_result_to_doc(
        self, results: List[MemorySearchResult]
    ) -> List[Document]:
        return [
            Document(
                page_content=str(r.summary.content),
                metadata={
                    "score": r.score,
                    "uuid": r.summary.uuid_,
                    "created_at": r.summary.created_at,
                    "token_count": r.summary.token_count,
                },
            )
            for r in results
            if r.summary
        ]

    def _get_relevant_documents(
        self,
        query: str,
        *,
        run_manager: CallbackManagerForRetrieverRun,
        metadata: Optional[Dict[str, Any]] = None,
    ) -> List[Document]:
        if not self.zep_client:
            raise RuntimeError("Zep client not initialized.")

        results = self.zep_client.memory.search(
            self.session_id,
            text=query,
            metadata=metadata,
            search_scope=self.search_scope,
            search_type=self.search_type,
            mmr_lambda=self.mmr_lambda,
            limit=self.top_k,
        )

        if self.search_scope == "summary":
            return self._summary_search_result_to_doc(results)

        return self._messages_search_result_to_doc(results)

    async def _aget_relevant_documents(
        self,
        query: str,
        *,
        run_manager: AsyncCallbackManagerForRetrieverRun,
        metadata: Optional[Dict[str, Any]] = None,
    ) -> List[Document]:
        if not self.zep_client_async:
            raise RuntimeError("Zep client not initialized.")

        results = await self.zep_client_async.memory.search(
            self.session_id,
            text=query,
            metadata=metadata,
            search_scope=self.search_scope,
            search_type=self.search_type,
            mmr_lambda=self.mmr_lambda,
            limit=self.top_k,
        )

        if self.search_scope == "summary":
            return self._summary_search_result_to_doc(results)

        return self._messages_search_result_to_doc(results)
