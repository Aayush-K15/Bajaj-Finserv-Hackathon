from typing import Any, List, Optional  

from langchain_core.callbacks import CallbackManagerForRetrieverRun
from langchain_core.documents import Document
from langchain_core.retrievers import BaseRetriever
from pydantic import BaseModel, Field


class NeedleRetriever(BaseRetriever, BaseModel):
    

    client: Optional[Any] = None
    
    needle_api_key: Optional[str] = Field(None, description="Needle API Key")
    collection_id: Optional[str] = Field(
        ..., description="The ID of the Needle collection to search in"
    )
    top_k: Optional[int] = Field(
        default=None, description="Maximum number of search results to return"
    )

    def _initialize_client(self) -> None:
        
        try:
            from needle.v1 import NeedleClient
        except ImportError:
            raise ImportError("Please install with `pip install needle-python`.")

        if not self.client:
            self.client = NeedleClient(api_key=self.needle_api_key)

    def _search_collection(self, query: str) -> List[Document]:
        
        self._initialize_client()
        if self.client is None:
            raise ValueError("NeedleClient is not initialized. Provide an API key.")

        results = self.client.collections.search(
            collection_id=self.collection_id, text=query, top_k=self.top_k
        )
        docs = [Document(page_content=result.content) for result in results]
        return docs

    def _get_relevant_documents(
        self, query: str, *, run_manager: CallbackManagerForRetrieverRun
    ) -> List[Document]:
        
        
        
        return self._search_collection(query)
