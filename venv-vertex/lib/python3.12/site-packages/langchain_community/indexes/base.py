from __future__ import annotations

import uuid
from abc import ABC, abstractmethod
from typing import List, Optional, Sequence

NAMESPACE_UUID = uuid.UUID(int=1984)


class RecordManager(ABC):
    

    def __init__(
        self,
        namespace: str,
    ) -> None:
        
        self.namespace = namespace

    @abstractmethod
    def create_schema(self) -> None:
        

    @abstractmethod
    async def acreate_schema(self) -> None:
        

    @abstractmethod
    def get_time(self) -> float:
        

    @abstractmethod
    async def aget_time(self) -> float:
        

    @abstractmethod
    def update(
        self,
        keys: Sequence[str],
        *,
        group_ids: Optional[Sequence[Optional[str]]] = None,
        time_at_least: Optional[float] = None,
    ) -> None:
        

    @abstractmethod
    async def aupdate(
        self,
        keys: Sequence[str],
        *,
        group_ids: Optional[Sequence[Optional[str]]] = None,
        time_at_least: Optional[float] = None,
    ) -> None:
        

    @abstractmethod
    def exists(self, keys: Sequence[str]) -> List[bool]:
        

    @abstractmethod
    async def aexists(self, keys: Sequence[str]) -> List[bool]:
        

    @abstractmethod
    def list_keys(
        self,
        *,
        before: Optional[float] = None,
        after: Optional[float] = None,
        group_ids: Optional[Sequence[str]] = None,
        limit: Optional[int] = None,
    ) -> List[str]:
        

    @abstractmethod
    async def alist_keys(
        self,
        *,
        before: Optional[float] = None,
        after: Optional[float] = None,
        group_ids: Optional[Sequence[str]] = None,
        limit: Optional[int] = None,
    ) -> List[str]:
        

    @abstractmethod
    def delete_keys(self, keys: Sequence[str]) -> None:
        

    @abstractmethod
    async def adelete_keys(self, keys: Sequence[str]) -> None:
        
