from typing import Any, Dict, List, Optional

from langchain_core.callbacks import CallbackManagerForLLMRun
from langchain_core.language_models import BaseLLM
from langchain_core.outputs import Generation, LLMResult
from langchain_core.utils import pre_init
from pydantic import Field


class Aphrodite(BaseLLM):
    

    model: str = ""
    

    tensor_parallel_size: Optional[int] = 1
    

    trust_remote_code: Optional[bool] = False
    

    n: int = 1
    

    best_of: Optional[int] = None
    

    presence_penalty: float = 0.0
    

    frequency_penalty: float = 0.0
    

    repetition_penalty: float = 1.0
    

    temperature: float = 1.0
    

    top_p: float = 1.0
    

    top_k: int = -1
    

    top_a: float = 0.0
    

    min_p: float = 0.0
    

    tfs: float = 1.0
    

    eta_cutoff: float = 0.0
    

    epsilon_cutoff: float = 0.0
    

    typical_p: float = 1.0
    

    mirostat_mode: int = 0
    

    mirostat_tau: float = 0.0
    

    use_beam_search: bool = False
    

    length_penalty: float = 1.0
    

    early_stopping: bool = False
    

    stop: Optional[List[str]] = None
    

    stop_token_ids: Optional[List[int]] = None
    

    ignore_eos: bool = False
    

    max_tokens: int = 512
    

    logprobs: Optional[int] = None
    

    prompt_logprobs: Optional[int] = None
    

    custom_token_bans: Optional[List[int]] = None
    

    skip_special_tokens: bool = True
    

    spaces_between_special_tokens: bool = True
    

    logit_bias: Optional[Dict[str, float]] = None
    

    dtype: str = "auto"
    

    download_dir: Optional[str] = None
    

    quantization: Optional[str] = None
    

    aphrodite_kwargs: Dict[str, Any] = Field(default_factory=dict)
    

    client: Any = None  

    @pre_init
    def validate_environment(cls, values: Dict) -> Dict:
        

        try:
            from aphrodite import LLM as AphroditeModel
        except ImportError:
            raise ImportError(
                "Could not import aphrodite-engine python package. "
                "Please install it with `pip install aphrodite-engine`."
            )

        
        
        

        values["client"] = AphroditeModel(
            model=values["model"],
            tensor_parallel_size=values["tensor_parallel_size"],
            trust_remote_code=values["trust_remote_code"],
            dtype=values["dtype"],
            download_dir=values["download_dir"],
            **values["aphrodite_kwargs"],
        )

        return values

    @property
    def _default_params(self) -> Dict[str, Any]:
        
        return {
            "n": self.n,
            "best_of": self.best_of,
            "max_tokens": self.max_tokens,
            "top_k": self.top_k,
            "top_p": self.top_p,
            "top_a": self.top_a,
            "min_p": self.min_p,
            "temperature": self.temperature,
            "presence_penalty": self.presence_penalty,
            "frequency_penalty": self.frequency_penalty,
            "repetition_penalty": self.repetition_penalty,
            "tfs": self.tfs,
            "eta_cutoff": self.eta_cutoff,
            "epsilon_cutoff": self.epsilon_cutoff,
            "typical_p": self.typical_p,
            "mirostat_mode": self.mirostat_mode,
            "mirostat_tau": self.mirostat_tau,
            "length_penalty": self.length_penalty,
            "early_stopping": self.early_stopping,
            "use_beam_search": self.use_beam_search,
            "stop": self.stop,
            "ignore_eos": self.ignore_eos,
            "logprobs": self.logprobs,
            "prompt_logprobs": self.prompt_logprobs,
            "custom_token_bans": self.custom_token_bans,
            "skip_special_tokens": self.skip_special_tokens,
            "spaces_between_special_tokens": self.spaces_between_special_tokens,
            "logit_bias": self.logit_bias,
        }

    def _generate(
        self,
        prompts: List[str],
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> LLMResult:
        

        from aphrodite import SamplingParams

        
        params = {**self._default_params, **kwargs, "stop": stop}
        if "logit_bias" in params:
            del params["logit_bias"]
        sampling_params = SamplingParams(**params)
        
        outputs = self.client.generate(prompts, sampling_params)

        generations = []
        for output in outputs:
            text = output.outputs[0].text
            generations.append([Generation(text=text)])

        return LLMResult(generations=generations)

    @property
    def _llm_type(self) -> str:
        
        return "aphrodite"
