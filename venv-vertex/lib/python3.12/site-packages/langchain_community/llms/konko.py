

import logging
import warnings
from typing import Any, Dict, List, Optional

from langchain_core.callbacks import (
    AsyncCallbackManagerForLLMRun,
    CallbackManagerForLLMRun,
)
from langchain_core.language_models.llms import LLM
from pydantic import ConfigDict, SecretStr, model_validator

from langchain_community.utils.openai import is_openai_v1

logger = logging.getLogger(__name__)


class Konko(LLM):
    

    base_url: str = "https://api.konko.ai/v1/completions"
    
    konko_api_key: SecretStr
    
    model: str
    
    temperature: Optional[float] = None
    
    top_p: Optional[float] = None
    
    top_k: Optional[int] = None
    
    max_tokens: Optional[int] = None
    
    repetition_penalty: Optional[float] = None
    
    logprobs: Optional[int] = None
    

    model_config = ConfigDict(
        extra="forbid",
    )

    @model_validator(mode="before")
    @classmethod
    def validate_environment(cls, values: Dict[str, Any]) -> Any:
        
        try:
            import konko

        except ImportError:
            raise ImportError(
                "Could not import konko python package. "
                "Please install it with `pip install konko`."
            )
        if not hasattr(konko, "_is_legacy_openai"):
            warnings.warn(
                "You are using an older version of the 'konko' package. "
                "Please consider upgrading to access new features"
                "including the completion endpoint."
            )
        return values

    def construct_payload(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> Dict[str, Any]:
        stop_to_use = stop[0] if stop and len(stop) == 1 else stop
        payload: Dict[str, Any] = {
            **self.default_params,
            "prompt": prompt,
            "stop": stop_to_use,
            **kwargs,
        }
        return {k: v for k, v in payload.items() if v is not None}

    @property
    def _llm_type(self) -> str:
        
        return "konko"

    @staticmethod
    def get_user_agent() -> str:
        from langchain_community import __version__

        return f"langchain/{__version__}"

    @property
    def default_params(self) -> Dict[str, Any]:
        return {
            "model": self.model,
            "temperature": self.temperature,
            "top_p": self.top_p,
            "top_k": self.top_k,
            "max_tokens": self.max_tokens,
            "repetition_penalty": self.repetition_penalty,
        }

    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        
        import konko

        payload = self.construct_payload(prompt, stop, **kwargs)

        try:
            if is_openai_v1():
                response = konko.completions.create(**payload)
            else:
                response = konko.Completion.create(**payload)

        except AttributeError:
            raise ValueError(
                "`konko` has no `Completion` attribute, this is likely "
                "due to an old version of the konko package. Try upgrading it "
                "with `pip install --upgrade konko`."
            )

        if is_openai_v1():
            output = response.choices[0].text
        else:
            output = response["choices"][0]["text"]

        return output

    async def _acall(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[AsyncCallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        
        import konko

        payload = self.construct_payload(prompt, stop, **kwargs)

        try:
            if is_openai_v1():
                client = konko.AsyncKonko()
                response = await client.completions.create(**payload)
            else:
                response = await konko.Completion.acreate(**payload)

        except AttributeError:
            raise ValueError(
                "`konko` has no `Completion` attribute, this is likely "
                "due to an old version of the konko package. Try upgrading it "
                "with `pip install --upgrade konko`."
            )

        if is_openai_v1():
            output = response.choices[0].text
        else:
            output = response["choices"][0]["text"]

        return output
