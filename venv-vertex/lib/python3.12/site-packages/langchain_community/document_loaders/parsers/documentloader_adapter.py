import inspect
from typing import Any, Dict, Iterator, Type

from langchain.document_loaders.base import BaseBlobParser, BaseLoader
from langchain_core._api import beta
from langchain_core.documents import Document
from langchain_core.documents.base import Blob


@beta()
class DocumentLoaderAsParser(BaseBlobParser):
    

    DocumentLoaderType: Type[BaseLoader]
    doc_loader_kwargs: Dict[str, Any]

    def __init__(self, document_loader_class: Type[BaseLoader], **kwargs: Any) -> None:
          
        super().__init__()
        self.DocumentLoaderClass = document_loader_class
        self.document_loader_kwargs = kwargs

        
        init_signature = inspect.signature(document_loader_class.__init__)
        if "file_path" not in init_signature.parameters:
            raise TypeError(
                f"{document_loader_class.__name__} does not accept `file_path`."
                "Only document loaders with `file_path` parameter"
                "can be morphed into a parser."
            )

    def lazy_parse(self, blob: Blob) -> Iterator[Document]:
        
        doc_loader = self.DocumentLoaderClass(  
            file_path=blob.path, **self.document_loader_kwargs
        )
        for document in doc_loader.lazy_load():
            document.metadata.update(blob.metadata)
            yield document
