from __future__ import annotations

from typing import TYPE_CHECKING, Iterator, List, Optional

from langchain_core.documents import Document

from langchain_community.document_loaders.base import BaseLoader
from langchain_community.document_loaders.blob_loaders import Blob
from langchain_community.document_loaders.parsers import (
    AzureAIDocumentIntelligenceParser,
)

if TYPE_CHECKING:
    from azure.core.credentials import TokenCredential


class AzureAIDocumentIntelligenceLoader(BaseLoader):
    

    def __init__(
        self,
        api_endpoint: str,
        api_key: Optional[str] = None,
        file_path: Optional[str] = None,
        url_path: Optional[str] = None,
        bytes_source: Optional[bytes] = None,
        api_version: Optional[str] = None,
        api_model: str = "prebuilt-layout",
        mode: str = "markdown",
        *,
        analysis_features: Optional[List[str]] = None,
        azure_credential: Optional["TokenCredential"] = None,
    ) -> None:
        

        assert (
            file_path is not None or url_path is not None or bytes_source is not None
        ), "file_path, url_path or bytes_source must be provided"

        assert api_key is not None or azure_credential is not None, (
            "Either api_key or azure_credential must be provided."
        )

        assert api_key is None or azure_credential is None, (
            "Only one of api_key or azure_credential should be provided."
        )

        self.file_path = file_path
        self.url_path = url_path
        self.bytes_source = bytes_source

        self.parser = AzureAIDocumentIntelligenceParser(
            api_endpoint=api_endpoint,
            api_key=api_key,
            api_version=api_version,
            api_model=api_model,
            mode=mode,
            analysis_features=analysis_features,
            azure_credential=azure_credential,
        )

    def lazy_load(
        self,
    ) -> Iterator[Document]:
        
        if self.file_path is not None:
            blob = Blob.from_path(self.file_path)
            yield from self.parser.parse(blob)
        elif self.url_path is not None:
            yield from self.parser.parse_url(self.url_path)
        elif self.bytes_source is not None:
            yield from self.parser.parse_bytes(self.bytes_source)
        else:
            raise ValueError("No data source provided.")
