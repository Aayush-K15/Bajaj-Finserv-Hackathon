import warnings
from typing import Any, Dict, List, Optional

from langchain_core._api import deprecated

from langchain_community.graphs.graph_document import GraphDocument
from langchain_community.graphs.graph_store import GraphStore

node_properties_query = 

rel_properties_query = 

rel_query = 


class FalkorDBGraph(GraphStore):
    

    def __init__(
        self,
        database: str,
        host: str = "localhost",
        port: int = 6379,
        username: Optional[str] = None,
        password: Optional[str] = None,
        ssl: bool = False,
    ) -> None:
        
        try:
            self.__init_falkordb_connection(
                database, host, port, username, password, ssl
            )

        except ImportError:
            try:
                
                self.__init_redis_connection(
                    database, host, port, username, password, ssl
                )
            except ImportError:
                raise ImportError(
                    "Could not import falkordb python package. "
                    "Please install it with `pip install falkordb`."
                )

        self.schema: str = ""
        self.structured_schema: Dict[str, Any] = {}

        try:
            self.refresh_schema()
        except Exception as e:
            raise ValueError(f"Could not refresh schema. Error: {e}")

    def __init_falkordb_connection(
        self,
        database: str,
        host: str = "localhost",
        port: int = 6379,
        username: Optional[str] = None,
        password: Optional[str] = None,
        ssl: bool = False,
    ) -> None:
        from falkordb import FalkorDB

        try:
            self._driver = FalkorDB(
                host=host, port=port, username=username, password=password, ssl=ssl
            )
        except Exception as e:
            raise ConnectionError(f"Failed to connect to FalkorDB: {e}")

        self._graph = self._driver.select_graph(database)

    @deprecated("0.0.31", alternative="__init_falkordb_connection")
    def __init_redis_connection(
        self,
        database: str,
        host: str = "localhost",
        port: int = 6379,
        username: Optional[str] = None,
        password: Optional[str] = None,
        ssl: bool = False,
    ) -> None:
        import redis
        from redis.commands.graph import Graph

        
        warnings.warn(
            "Using the redis package is deprecated. "
            "Please use the falkordb package instead, "
            "install it with `pip install falkordb`.",
            DeprecationWarning,
        )

        self._driver = redis.Redis(
            host=host, port=port, username=username, password=password, ssl=ssl
        )

        self._graph = Graph(self._driver, database)

    @property
    def get_schema(self) -> str:
        
        return self.schema

    @property
    def get_structured_schema(self) -> Dict[str, Any]:
        
        return self.structured_schema

    def refresh_schema(self) -> None:
        
        node_properties: List[Any] = self.query(node_properties_query)
        rel_properties: List[Any] = self.query(rel_properties_query)
        relationships: List[Any] = self.query(rel_query)

        self.structured_schema = {
            "node_props": {el[0]["label"]: el[0]["keys"] for el in node_properties},
            "rel_props": {el[0]["types"]: el[0]["keys"] for el in rel_properties},
            "relationships": [el[0] for el in relationships],
        }

        self.schema = (
            f"Node properties: {node_properties}\n"
            f"Relationships properties: {rel_properties}\n"
            f"Relationships: {relationships}\n"
        )

    def query(self, query: str, params: dict = {}) -> List[Dict[str, Any]]:
        

        try:
            data = self._graph.query(query, params)
            return data.result_set
        except Exception as e:
            raise ValueError(f"Generated Cypher Statement is not valid\n{e}")

    def add_graph_documents(
        self, graph_documents: List[GraphDocument], include_source: bool = False
    ) -> None:
        
        for document in graph_documents:
            
            for node in document.nodes:
                self.query(
                    (
                        f"MERGE (n:{node.type} {{id:'{node.id}'}}) "
                        "SET n += $properties "
                        "RETURN distinct 'done' AS result"
                    ),
                    {"properties": node.properties},
                )

            
            for rel in document.relationships:
                self.query(
                    (
                        f"MATCH (a:{rel.source.type} {{id:'{rel.source.id}'}}), "
                        f"(b:{rel.target.type} {{id:'{rel.target.id}'}}) "
                        f"MERGE (a)-[r:{(rel.type.replace(' ', '_').upper())}]->(b) "
                        "SET r += $properties "
                        "RETURN distinct 'done' AS result"
                    ),
                    {"properties": rel.properties},
                )
