

from typing import Any, Optional, Type

from langchain_core.callbacks import (
    CallbackManagerForToolRun,
)
from langchain_core.tools import BaseTool, ToolException
from pydantic import BaseModel, Field


class ExecPythonInput(BaseModel):
    code: str = Field(description="the Python code to execute")


class ExecPython(BaseTool):
      

    name: str = "riza_exec_python"
    description: str = 
    args_schema: Type[BaseModel] = ExecPythonInput
    handle_tool_error: bool = True

    client: Any = None
    runtime_revision_id: Optional[str] = None

    def __init__(
        self, runtime_revision_id: Optional[str] = None, **kwargs: Any
    ) -> None:
        try:
            from rizaio import Riza
        except ImportError as e:
            raise ImportError(
                "Couldn't import the `rizaio` package. "
                "Try running `pip install rizaio`."
            ) from e
        super().__init__(**kwargs)
        self.client = Riza()
        self.runtime_revision_id = runtime_revision_id

    def _run(
        self, code: str, run_manager: Optional[CallbackManagerForToolRun] = None
    ) -> str:
        output = self.client.command.exec(
            runtime_revision_id=self.runtime_revision_id, language="python", code=code
        )
        if output.exit_code > 0:
            raise ToolException(
                f"Riza code execution returned a non-zero exit code. "
                f"The output captured from stderr was:\n{output.stderr}"
            )
        return output.stdout


class ExecJavaScriptInput(BaseModel):
    code: str = Field(description="the JavaScript code to execute")


class ExecJavaScript(BaseTool):
    

    name: str = "riza_exec_javascript"
    description: str = 
    args_schema: Type[BaseModel] = ExecJavaScriptInput
    handle_tool_error: bool = True

    client: Any = None
    runtime_revision_id: Optional[str] = None

    def __init__(
        self, runtime_revision_id: Optional[str] = None, **kwargs: Any
    ) -> None:
        try:
            from rizaio import Riza
        except ImportError as e:
            raise ImportError(
                "Couldn't import the `rizaio` package. "
                "Try running `pip install rizaio`."
            ) from e
        super().__init__(**kwargs)
        self.client = Riza()
        self.runtime_revision_id = runtime_revision_id

    def _run(
        self, code: str, run_manager: Optional[CallbackManagerForToolRun] = None
    ) -> str:
        output = self.client.command.exec(
            runtime_revision_id=self.runtime_revision_id,
            language="javascript",
            code=code,
        )
        if output.exit_code > 0:
            raise ToolException(
                f"Riza code execution returned a non-zero exit code. "
                f"The output captured from stderr was:\n{output.stderr}"
            )
        return output.stdout
