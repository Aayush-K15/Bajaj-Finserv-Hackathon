from typing import TYPE_CHECKING, Optional, Type

from langchain_core.callbacks import (
    CallbackManagerForToolRun,
)
from langchain_core.tools import BaseTool
from pydantic import BaseModel, Field

if TYPE_CHECKING:
    
    import multion
else:
    try:
        
        import multion
    except ImportError:
        pass


class CloseSessionSchema(BaseModel):
    

    sessionId: str = Field(
        ...,
        description=,
    )


class MultionCloseSession(BaseTool):
    

    name: str = "close_multion_session"
    description: str = 
    args_schema: Type[CloseSessionSchema] = CloseSessionSchema
    sessionId: str = ""

    def _run(
        self,
        sessionId: str,
        run_manager: Optional[CallbackManagerForToolRun] = None,
    ) -> None:
        try:
            try:
                multion.close_session(sessionId)
            except Exception as e:
                print(f"{e}, retrying...")  
        except Exception as e:
            raise Exception(f"An error occurred: {e}")
