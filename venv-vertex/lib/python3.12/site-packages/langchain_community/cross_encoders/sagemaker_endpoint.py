import json
from typing import Any, Dict, List, Optional, Tuple

from pydantic import BaseModel, ConfigDict, model_validator

from langchain_community.cross_encoders.base import BaseCrossEncoder


class CrossEncoderContentHandler:
    

    content_type = "application/json"
    accepts = "application/json"

    def transform_input(self, text_pairs: List[Tuple[str, str]]) -> bytes:
        input_str = json.dumps({"text_pairs": text_pairs})
        return input_str.encode("utf-8")

    def transform_output(self, output: Any) -> List[float]:
        response_json = json.loads(output.read().decode("utf-8"))
        scores = response_json["scores"]
        return scores


class SagemakerEndpointCrossEncoder(BaseModel, BaseCrossEncoder):
    

    
    client: Any = None  

    endpoint_name: str = ""
    

    region_name: str = ""
    

    credentials_profile_name: Optional[str] = None
    

    content_handler: CrossEncoderContentHandler = CrossEncoderContentHandler()

    model_kwargs: Optional[Dict] = None
    

    endpoint_kwargs: Optional[Dict] = None
    

    model_config = ConfigDict(
        arbitrary_types_allowed=True, extra="forbid", protected_namespaces=()
    )

    @model_validator(mode="before")
    @classmethod
    def validate_environment(cls, values: Dict) -> Any:
        
        try:
            import boto3

            try:
                if values.get("credentials_profile_name"):
                    session = boto3.Session(
                        profile_name=values["credentials_profile_name"]
                    )
                else:
                    
                    session = boto3.Session()

                values["client"] = session.client(
                    "sagemaker-runtime", region_name=values["region_name"]
                )

            except Exception as e:
                raise ValueError(
                    "Could not load credentials to authenticate with AWS client. "
                    "Please check that credentials in the specified "
                    "profile name are valid."
                ) from e

        except ImportError:
            raise ImportError(
                "Could not import boto3 python package. "
                "Please install it with `pip install boto3`."
            )
        return values

    def score(self, text_pairs: List[Tuple[str, str]]) -> List[float]:
        
        _endpoint_kwargs = self.endpoint_kwargs or {}

        body = self.content_handler.transform_input(text_pairs)
        content_type = self.content_handler.content_type
        accepts = self.content_handler.accepts

        
        try:
            response = self.client.invoke_endpoint(
                EndpointName=self.endpoint_name,
                Body=body,
                ContentType=content_type,
                Accept=accepts,
                **_endpoint_kwargs,
            )
        except Exception as e:
            raise ValueError(f"Error raised by inference endpoint: {e}")

        return self.content_handler.transform_output(response["Body"])
