import logging
from typing import List, Optional

import requests
from langchain_core.embeddings import Embeddings
from pydantic import BaseModel

logger = logging.getLogger(__name__)


class LlamafileEmbeddings(BaseModel, Embeddings):
    

    base_url: str = "http://localhost:8080"
    

    request_timeout: Optional[int] = None
    

    def _embed(self, text: str) -> List[float]:
        try:
            response = requests.post(
                url=f"{self.base_url}/embedding",
                headers={
                    "Content-Type": "application/json",
                },
                json={
                    "content": text,
                },
                timeout=self.request_timeout,
            )
        except requests.exceptions.ConnectionError:
            raise requests.exceptions.ConnectionError(
                f"Could not connect to Llamafile server. Please make sure "
                f"that a server is running at {self.base_url}."
            )

        
        response.raise_for_status()

        contents = response.json()
        if "embedding" not in contents:
            raise KeyError(
                "Unexpected output from /embedding endpoint, output dict "
                "missing 'embedding' key."
            )

        embedding = contents["embedding"]

        
        
        
        
        
        
        if sum(embedding) == 0.0:
            raise ValueError(
                "Embedding sums to 0, did you start the llamafile server with "
                "the `--embedding` option enabled?"
            )

        return embedding

    def embed_documents(self, texts: List[str]) -> List[List[float]]:
        
        doc_embeddings = []
        for text in texts:
            doc_embeddings.append(self._embed(text))
        return doc_embeddings

    def embed_query(self, text: str) -> List[float]:
        
        return self._embed(text)
