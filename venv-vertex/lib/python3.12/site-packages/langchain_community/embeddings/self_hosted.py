from typing import Any, Callable, List

from langchain_core.embeddings import Embeddings
from pydantic import ConfigDict

from langchain_community.llms.self_hosted import SelfHostedPipeline


def _embed_documents(pipeline: Any, *args: Any, **kwargs: Any) -> List[List[float]]:
    
    return pipeline(*args, **kwargs)


class SelfHostedEmbeddings(SelfHostedPipeline, Embeddings):
    

    inference_fn: Callable = _embed_documents
    
    inference_kwargs: Any = None
    

    model_config = ConfigDict(
        extra="forbid",
    )

    def embed_documents(self, texts: List[str]) -> List[List[float]]:
        
        texts = list(map(lambda x: x.replace("\n", " "), texts))
        embeddings = self.client(self.pipeline_ref, texts)
        if not isinstance(embeddings, list):
            return embeddings.tolist()
        return embeddings

    def embed_query(self, text: str) -> List[float]:
        
        text = text.replace("\n", " ")
        embeddings = self.client(self.pipeline_ref, text)
        if not isinstance(embeddings, list):
            return embeddings.tolist()
        return embeddings
