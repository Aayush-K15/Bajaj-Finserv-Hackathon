from enum import Enum
from typing import Any, Dict, List, Optional, Set, Union

from langchain_core.embeddings import Embeddings
from pydantic import BaseModel, ConfigDict


class TakeoffEmbeddingException(Exception):
    


class MissingConsumerGroup(TakeoffEmbeddingException):
    


class Device(str, Enum):
    

    cuda = "cuda"
    cpu = "cpu"


class ReaderConfig(BaseModel):
    

    model_config = ConfigDict(
        protected_namespaces=(),
    )

    model_name: str
    

    device: Device = Device.cuda
    

    consumer_group: str = "primary"
    


class TitanTakeoffEmbed(Embeddings):
    

    base_url: str = "http://localhost"
    

    port: int = 3000
    

    mgmt_port: int = 3001
    

    client: Any = None
    

    embed_consumer_groups: Set[str] = set()
    

    def __init__(
        self,
        base_url: str = "http://localhost",
        port: int = 3000,
        mgmt_port: int = 3001,
        models: List[ReaderConfig] = [],
    ):
        
        self.base_url = base_url
        self.port = port
        self.mgmt_port = mgmt_port
        try:
            from takeoff_client import TakeoffClient
        except ImportError:
            raise ImportError(
                "takeoff-client is required for TitanTakeoff. "
                "Please install it with `pip install 'takeoff-client==0.4.0'`."
            )
        self.client = TakeoffClient(
            self.base_url, port=self.port, mgmt_port=self.mgmt_port
        )
        for model in models:
            self.client.create_reader(model)
            if isinstance(model, dict):
                self.embed_consumer_groups.add(model.get("consumer_group"))
            else:
                self.embed_consumer_groups.add(model.consumer_group)
        super(TitanTakeoffEmbed, self).__init__()

    def _embed(
        self, input: Union[List[str], str], consumer_group: Optional[str]
    ) -> Dict[str, Any]:
        
        if not consumer_group:
            if len(self.embed_consumer_groups) == 1:
                consumer_group = list(self.embed_consumer_groups)[0]
            elif len(self.embed_consumer_groups) > 1:
                raise MissingConsumerGroup(
                    "TakeoffEmbedding was initialized with multiple embedding reader"
                    "groups, you must specify which one to use."
                )
            else:
                raise MissingConsumerGroup(
                    "You must specify what consumer group you want to send embedding"
                    "response to as TitanTakeoffEmbed was not initialized with an "
                    "embedding reader."
                )
        return self.client.embed(input, consumer_group)

    def embed_documents(
        self, texts: List[str], consumer_group: Optional[str] = None
    ) -> List[List[float]]:
        
        return self._embed(texts, consumer_group)["result"]

    def embed_query(
        self, text: str, consumer_group: Optional[str] = None
    ) -> List[float]:
        
        return self._embed(text, consumer_group)["result"]
