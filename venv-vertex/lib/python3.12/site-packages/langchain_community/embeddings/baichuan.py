from typing import Any, List, Optional

import requests
from langchain_core.embeddings import Embeddings
from langchain_core.utils import (
    secret_from_env,
)
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    SecretStr,
    model_validator,
)
from requests import RequestException
from typing_extensions import Self

BAICHUAN_API_URL: str = "https://api.baichuan-ai.com/v1/embeddings"















class BaichuanTextEmbeddings(BaseModel, Embeddings):
      

    session: Any = None  
    model_name: str = Field(default="Baichuan-Text-Embedding", alias="model")
    
    baichuan_api_key: SecretStr = Field(
        alias="api_key",
        default_factory=secret_from_env(["BAICHUAN_API_KEY", "BAICHUAN_AUTH_TOKEN"]),
    )
    
    chunk_size: int = 16
    

    model_config = ConfigDict(populate_by_name=True, protected_namespaces=())

    @model_validator(mode="after")
    def validate_environment(self) -> Self:
        
        session = requests.Session()
        session.headers.update(
            {
                "Authorization": f"Bearer {self.baichuan_api_key.get_secret_value()}",
                "Accept-Encoding": "identity",
                "Content-type": "application/json",
            }
        )
        self.session = session
        return self

    def _embed(self, texts: List[str]) -> Optional[List[List[float]]]:
        
        chunk_texts = [
            texts[i : i + self.chunk_size]
            for i in range(0, len(texts), self.chunk_size)
        ]
        embed_results = []
        for chunk in chunk_texts:
            response = self.session.post(
                BAICHUAN_API_URL, json={"input": chunk, "model": self.model_name}
            )
            
            response.raise_for_status()
            
            if response.status_code == 200:
                resp = response.json()
                embeddings = resp.get("data", [])
                
                sorted_embeddings = sorted(embeddings, key=lambda e: e.get("index", 0))
                
                embed_results.extend(
                    [result.get("embedding", []) for result in sorted_embeddings]
                )
            else:
                
                
                raise RequestException(
                    f"Error: Received status code {response.status_code} from "
                    "`BaichuanEmbedding` API"
                )
        return embed_results

    def embed_documents(self, texts: List[str]) -> Optional[List[List[float]]]:  
        
        return self._embed(texts)

    def embed_query(self, text: str) -> Optional[List[float]]:  
        
        result = self._embed([text])
        return result[0] if result is not None else None
