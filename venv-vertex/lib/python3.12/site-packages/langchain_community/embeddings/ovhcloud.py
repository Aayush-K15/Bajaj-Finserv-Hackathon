import json
import logging
import time
from typing import Any, List

import requests
from langchain_core.embeddings import Embeddings
from pydantic import BaseModel, ConfigDict

logger = logging.getLogger(__name__)


class OVHCloudEmbeddings(BaseModel, Embeddings):
    

    
    access_token: str = ""

    
    model_name: str = ""

    
    region: str = "kepler"

    model_config = ConfigDict(extra="forbid", protected_namespaces=())

    def __init__(self, **kwargs: Any):
        super().__init__(**kwargs)
        if self.access_token == "":
            raise ValueError("Access token is required for OVHCloud embeddings.")
        if self.model_name == "":
            raise ValueError("Model name is required for OVHCloud embeddings.")
        if self.region == "":
            raise ValueError("Region is required for OVHCloud embeddings.")

    def _generate_embedding(self, text: str) -> List[float]:
        

        return self._send_request_to_ai_endpoints("text/plain", text, "text2vec")

    def embed_documents(self, texts: List[str]) -> List[List[float]]:
        

        return self._send_request_to_ai_endpoints(
            "application/json", json.dumps(texts), "batch_text2vec"
        )

    def embed_query(self, text: str) -> List[float]:
        
        return self._generate_embedding(text)

    def _send_request_to_ai_endpoints(
        self, contentType: str, payload: str, route: str
    ) -> Any:
          
        headers = {
            "content-type": contentType,
            "Authorization": f"Bearer {self.access_token}",
        }

        session = requests.session()
        while True:
            response = session.post(
                (
                    f"https://{self.model_name}.endpoints.{self.region}"
                    f".ai.cloud.ovh.net/api/{route}"
                ),
                headers=headers,
                data=payload,
            )
            if response.status_code != 200:
                if response.status_code == 429:
                    
                    reset_time = int(response.headers.get("RateLimit-Reset", 0))
                    logger.info("Rate limit exceeded. Waiting %d seconds.", reset_time)
                    if reset_time > 0:
                        time.sleep(reset_time)
                        continue
                    else:
                        
                        continue
                if response.status_code == 401:
                    
                    raise ValueError("Unauthorized, retry with new token")
                
                raise ValueError(
                    "Request failed with status code: {status_code}, {text}".format(
                        status_code=response.status_code, text=response.text
                    )
                )
            return response.json()
