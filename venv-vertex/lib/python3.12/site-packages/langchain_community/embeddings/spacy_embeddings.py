import importlib.util
from typing import Any, Dict, List, Optional

from langchain_core.embeddings import Embeddings
from pydantic import BaseModel, ConfigDict, model_validator


class SpacyEmbeddings(BaseModel, Embeddings):
    

    model_name: str = "en_core_web_sm"
    nlp: Optional[Any] = None

    model_config = ConfigDict(extra="forbid", protected_namespaces=())

    @model_validator(mode="before")
    @classmethod
    def validate_environment(cls, values: Dict) -> Any:
        
        if values.get("model_name") is None:
            values["model_name"] = "en_core_web_sm"

        model_name = values.get("model_name")

        
        if importlib.util.find_spec("spacy") is None:
            raise ValueError(
                "SpaCy package not found. Please install it with `pip install spacy`."
            )
        try:
            
            import spacy

            values["nlp"] = spacy.load(model_name)
        except OSError:
            
            raise ValueError(
                f"SpaCy model '{model_name}' not found. "
                f"Please install it with"
                f" `python -m spacy download {model_name}`"
                "or provide a valid spaCy model name."
            )
        return values  

    def embed_documents(self, texts: List[str]) -> List[List[float]]:
        
        return [self.nlp(text).vector.tolist() for text in texts]  

    def embed_query(self, text: str) -> List[float]:
        
        return self.nlp(text).vector.tolist()  

    async def aembed_documents(self, texts: List[str]) -> List[List[float]]:
        
        raise NotImplementedError("Asynchronous embedding generation is not supported.")

    async def aembed_query(self, text: str) -> List[float]:
        
        raise NotImplementedError("Asynchronous embedding generation is not supported.")
