from typing import Any, List

from langchain_core.tools import BaseTool
from langchain_core.tools.base import BaseToolkit
from pydantic import model_validator

from langchain_community.tools.connery import ConneryService


class ConneryToolkit(BaseToolkit):
    

    tools: List[BaseTool]

    def get_tools(self) -> List[BaseTool]:
        
        return self.tools

    @model_validator(mode="before")
    @classmethod
    def validate_attributes(cls, values: dict) -> Any:
        

        if not values.get("tools"):
            raise ValueError("The attribute 'tools' must be set.")

        return values

    @classmethod
    def create_instance(cls, connery_service: ConneryService) -> "ConneryToolkit":
        

        instance = cls(tools=connery_service.list_actions())  

        return instance
