
import math
from ..bindings.view_state import ViewState
from .type_checking import is_pandas_df


def _squared_diff(x, x0):
    return (x0 - x) * (x0 - x)


def euclidean(y, y1):
    
    if not len(y) == len(y1):
        raise Exception("Input coordinates must be of the same length")
    return math.sqrt(sum([_squared_diff(x, x0) for x, x0 in zip(y, y1)]))


def geometric_mean(points):
    
    avg_x = sum([float(p[0]) for p in points]) / len(points)
    avg_y = sum([float(p[1]) for p in points]) / len(points)
    return (avg_x, avg_y)


def get_bbox(points):
    
    xs = [p[0] for p in points]
    ys = [p[1] for p in points]
    max_x = max(xs)
    max_y = max(ys)
    min_x = min(xs)
    min_y = min(ys)
    return ((min_x, max_y), (max_x, min_y))


def k_nearest_neighbors(points, center, k):
    
    pts_with_distance = [(pt, euclidean(pt, center)) for pt in points]
    sorted_pts = sorted(pts_with_distance, key=lambda x: x[1])
    return [x[0] for x in sorted_pts][: int(k)]


def get_n_pct(points, proportion=1):
    
    if proportion == 1:
        return points
    
    centroid = geometric_mean(points)
    
    n_to_keep = math.floor(proportion * len(points))
    return k_nearest_neighbors(points, centroid, n_to_keep)


def bbox_to_zoom_level(bbox):
    
    lat_diff = max(bbox[0][0], bbox[1][0]) - min(bbox[0][0], bbox[1][0])
    lng_diff = max(bbox[0][1], bbox[1][1]) - min(bbox[0][1], bbox[1][1])

    max_diff = max(lng_diff, lat_diff)
    zoom_level = None
    if max_diff < (360.0 / math.pow(2, 20)):
        zoom_level = 21
    else:
        zoom_level = int(-1 * ((math.log(max_diff) / math.log(2.0)) - (math.log(360.0) / math.log(2))))
        if zoom_level < 1:
            zoom_level = 1
    return zoom_level


def compute_view(points, view_proportion=1, view_type=ViewState):
    
    if is_pandas_df(points):
        points = points.to_records(index=False)
    bbox = get_bbox(get_n_pct(points, view_proportion))
    zoom = bbox_to_zoom_level(bbox)
    center = geometric_mean(points)
    instance = view_type(latitude=center[1], longitude=center[0], zoom=zoom)
    return instance
