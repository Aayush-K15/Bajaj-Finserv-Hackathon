import os
import sys

from .json_tools import JSONMixin
from .layer import Layer
from ..io.html import deck_to_html
from ..settings import settings as pydeck_settings
from .view import View
from .view_state import ViewState
from .base_map_provider import BaseMapProvider
from .map_styles import DARK, get_from_map_identifier


def has_jupyter_extra():
    try:
        from ..widget import DeckGLWidget

        DeckGLWidget()
        return True
    except (ImportError, NotImplementedError):
        return False


in_google_colab = "google.colab" in sys.modules


class Deck(JSONMixin):
    def __init__(
        self,
        layers=None,
        views=[View(type="MapView", controller=True)],
        map_style=DARK,
        api_keys=None,
        initial_view_state=ViewState(latitude=0, longitude=0, zoom=1),
        width="100%",
        height=500,
        tooltip=True,
        description=None,
        effects=None,
        map_provider=BaseMapProvider.CARTO.value,
        parameters=None,
    ):
        
        self.layers = []
        if isinstance(layers, Layer):
            self.layers.append(layers)
        else:
            self.layers = layers or []
        self.views = views
        
        self.initial_view_state = initial_view_state

        api_keys = api_keys or {}

        self.description = description
        self.effects = effects
        self.map_provider = str(map_provider).lower() if map_provider else None
        self._tooltip = tooltip

        if has_jupyter_extra():
            from ..widget import DeckGLWidget

            self.deck_widget = DeckGLWidget()
            self.deck_widget.custom_libraries = pydeck_settings.custom_libraries
            self.deck_widget.configuration = pydeck_settings.configuration

            self.deck_widget.height = height
            self.deck_widget.width = width
            self.deck_widget.tooltip = tooltip
            self.deck_widget.map_provider = map_provider

        self._set_api_keys(api_keys)

        custom_map_style_error = "The map_provider parameter must be 'mapbox' when map_style is provided as a dict."

        if isinstance(map_style, dict):
            assert map_provider == BaseMapProvider.MAPBOX.value, custom_map_style_error
            self.map_style = map_style
        else:
            self.map_style = get_from_map_identifier(map_style, map_provider)

        self.parameters = parameters

    @property
    def selected_data(self):
        if not self.deck_widget.selected_data:
            return None
        return self.deck_widget.selected_data

    def _set_api_keys(self, api_keys: dict = None):
        
        for k in api_keys:
            k and BaseMapProvider(k)
        for provider in BaseMapProvider:
            attr_name = f"{provider.value}_key"
            provider_env_var = f"{provider.name}_API_KEY"
            attr_value = api_keys.get(provider.value) or os.getenv(provider_env_var)
            setattr(self, attr_name, attr_value)
            if has_jupyter_extra():
                setattr(self.deck_widget, attr_name, attr_value)

    def show(self):
        
        
        
        
        
        
        
        return self.to_html(notebook_display=True)

    def update(self):
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        raise NotImplementedError(
            "Jupyter-specific features not currently supported in pydeck v0.9."
        )

    def to_html(
        self,
        filename=None,
        open_browser=False,
        notebook_display=None,
        iframe_width="100%",
        iframe_height=500,
        as_string=False,
        offline=False,
        **kwargs,
    ):
        
        deck_json = self.to_json()
        f = deck_to_html(
            deck_json,
            mapbox_key=self.mapbox_key,
            google_maps_key=self.google_maps_key,
            filename=filename,
            open_browser=open_browser,
            notebook_display=notebook_display,
            iframe_height=iframe_height,
            iframe_width=iframe_width,
            tooltip=self._tooltip,
            custom_libraries=pydeck_settings.custom_libraries,
            configuration=pydeck_settings.configuration,
            as_string=as_string,
            offline=offline,
            **kwargs,
        )
        return f

    def _repr_html_(self):
        
        
        html = self.to_html(notebook_display=True)
        return getattr(html, "data", "")
