

from enum import Enum, IntFlag, auto, unique
from typing import Dict, Tuple


class StrEnum(str, Enum):  
    def __str__(self) -> str:
        return str(self.value)


class Core:
    

    OUTLINES = "/Outlines"
    THREADS = "/Threads"
    PAGE = "/Page"
    PAGES = "/Pages"
    CATALOG = "/Catalog"


class TrailerKeys:
    SIZE = "/Size"
    PREV = "/Prev"
    ROOT = "/Root"
    ENCRYPT = "/Encrypt"
    INFO = "/Info"
    ID = "/ID"


class CatalogAttributes:
    NAMES = "/Names"
    DESTS = "/Dests"


class EncryptionDictAttributes:
    

    R = "/R"  
    O = "/O"  
    U = "/U"  
    P = "/P"  
    ENCRYPT_METADATA = "/EncryptMetadata"  


class UserAccessPermissions(IntFlag):
    

    R1 = 1
    R2 = 2
    PRINT = 4
    MODIFY = 8
    EXTRACT = 16
    ADD_OR_MODIFY = 32
    R7 = 64
    R8 = 128
    FILL_FORM_FIELDS = 256
    EXTRACT_TEXT_AND_GRAPHICS = 512
    ASSEMBLE_DOC = 1024
    PRINT_TO_REPRESENTATION = 2048
    R13 = 2**12
    R14 = 2**13
    R15 = 2**14
    R16 = 2**15
    R17 = 2**16
    R18 = 2**17
    R19 = 2**18
    R20 = 2**19
    R21 = 2**20
    R22 = 2**21
    R23 = 2**22
    R24 = 2**23
    R25 = 2**24
    R26 = 2**25
    R27 = 2**26
    R28 = 2**27
    R29 = 2**28
    R30 = 2**29
    R31 = 2**30
    R32 = 2**31

    @classmethod
    def _is_reserved(cls, name: str) -> bool:
        
        return name.startswith("R") and name[1:].isdigit()

    @classmethod
    def _is_active(cls, name: str) -> bool:
        
        return name not in {"R1", "R2"}

    def to_dict(self) -> Dict[str, bool]:
        
        result: Dict[str, bool] = {}
        for name, flag in UserAccessPermissions.__members__.items():
            if UserAccessPermissions._is_reserved(name):
                continue
            result[name.lower()] = (self & flag) == flag
        return result

    @classmethod
    def from_dict(cls, value: Dict[str, bool]) -> "UserAccessPermissions":
        
        value_copy = value.copy()
        result = cls(0)
        for name, flag in cls.__members__.items():
            if cls._is_reserved(name):
                
                if cls._is_active(name):
                    result |= flag
                continue
            is_active = value_copy.pop(name.lower(), False)
            if is_active:
                result |= flag
        if value_copy:
            raise ValueError(f"Unknown dictionary keys: {value_copy!r}")
        return result

    @classmethod
    def all(cls) -> "UserAccessPermissions":
        return cls((2**32 - 1) - cls.R1 - cls.R2)


class Resources:
    

    EXT_G_STATE = "/ExtGState"  
    COLOR_SPACE = "/ColorSpace"  
    PATTERN = "/Pattern"  
    SHADING = "/Shading"  
    XOBJECT = "/XObject"  
    FONT = "/Font"  
    PROC_SET = "/ProcSet"  
    PROPERTIES = "/Properties"  


class Ressources:  
    


class PagesAttributes:
    

    TYPE = "/Type"  
    PARENT = "/Parent"  
    KIDS = "/Kids"  
    COUNT = "/Count"
    
    


class PageAttributes:
    

    TYPE = "/Type"  
    PARENT = "/Parent"  
    LAST_MODIFIED = (
        "/LastModified"  
    )
    RESOURCES = "/Resources"  
    MEDIABOX = "/MediaBox"  
    CROPBOX = "/CropBox"  
    BLEEDBOX = "/BleedBox"  
    TRIMBOX = "/TrimBox"  
    ARTBOX = "/ArtBox"  
    BOX_COLOR_INFO = "/BoxColorInfo"  
    CONTENTS = "/Contents"  
    ROTATE = "/Rotate"  
    GROUP = "/Group"  
    THUMB = "/Thumb"  
    B = "/B"  
    DUR = "/Dur"  
    TRANS = "/Trans"  
    ANNOTS = "/Annots"  
    AA = "/AA"  
    METADATA = "/Metadata"  
    PIECE_INFO = "/PieceInfo"  
    STRUCT_PARENTS = "/StructParents"  
    ID = "/ID"  
    PZ = "/PZ"  
    SEPARATION_INFO = "/SeparationInfo"  
    TABS = "/Tabs"  
    TEMPLATE_INSTANTIATED = "/TemplateInstantiated"  
    PRES_STEPS = "/PresSteps"  
    USER_UNIT = "/UserUnit"  
    VP = "/VP"  
    AF = "/AF"  
    OUTPUT_INTENTS = "/OutputIntents"  
    D_PART = "/DPart"  


class FileSpecificationDictionaryEntries:
    

    Type = "/Type"
    FS = "/FS"  
    F = "/F"  
    UF = "/UF"  
    DOS = "/DOS"
    Mac = "/Mac"
    Unix = "/Unix"
    ID = "/ID"
    V = "/V"
    EF = "/EF"  
    RF = "/RF"  
    DESC = "/Desc"  
    Cl = "/Cl"


class StreamAttributes:
    

    LENGTH = "/Length"  
    FILTER = "/Filter"  
    DECODE_PARMS = "/DecodeParms"  


@unique
class FilterTypes(StrEnum):
    

    ASCII_HEX_DECODE = "/ASCIIHexDecode"  
    ASCII_85_DECODE = "/ASCII85Decode"  
    LZW_DECODE = "/LZWDecode"  
    FLATE_DECODE = "/FlateDecode"  
    RUN_LENGTH_DECODE = "/RunLengthDecode"  
    CCITT_FAX_DECODE = "/CCITTFaxDecode"  
    DCT_DECODE = "/DCTDecode"  
    JPX_DECODE = "/JPXDecode"
    JBIG2_DECODE = "/JBIG2Decode"


class FilterTypeAbbreviations:
    

    AHx = "/AHx"
    A85 = "/A85"
    LZW = "/LZW"
    FL = "/Fl"
    RL = "/RL"
    CCF = "/CCF"
    DCT = "/DCT"


class LzwFilterParameters:
    

    PREDICTOR = "/Predictor"  
    COLORS = "/Colors"  
    BITS_PER_COMPONENT = "/BitsPerComponent"  
    COLUMNS = "/Columns"  
    EARLY_CHANGE = "/EarlyChange"  


class CcittFaxDecodeParameters:
    

    K = "/K"  
    END_OF_LINE = "/EndOfLine"  
    ENCODED_BYTE_ALIGN = "/EncodedByteAlign"  
    COLUMNS = "/Columns"  
    ROWS = "/Rows"  
    END_OF_BLOCK = "/EndOfBlock"  
    BLACK_IS_1 = "/BlackIs1"  
    DAMAGED_ROWS_BEFORE_ERROR = "/DamagedRowsBeforeError"  


class ImageAttributes:
    

    TYPE = "/Type"  
    SUBTYPE = "/Subtype"  
    NAME = "/Name"  
    WIDTH = "/Width"  
    HEIGHT = "/Height"  
    BITS_PER_COMPONENT = "/BitsPerComponent"  
    COLOR_SPACE = "/ColorSpace"  
    DECODE = "/Decode"  
    INTENT = "/Intent"  
    INTERPOLATE = "/Interpolate"  
    IMAGE_MASK = "/ImageMask"  
    MASK = "/Mask"  
    S_MASK = "/SMask"  


class ColorSpaces:
    DEVICE_RGB = "/DeviceRGB"
    DEVICE_CMYK = "/DeviceCMYK"
    DEVICE_GRAY = "/DeviceGray"


class TypArguments:
    

    LEFT = "/Left"
    RIGHT = "/Right"
    BOTTOM = "/Bottom"
    TOP = "/Top"


class TypFitArguments:
    

    XYZ = "/XYZ"
    FIT = "/Fit"
    FIT_H = "/FitH"
    FIT_V = "/FitV"
    FIT_R = "/FitR"
    FIT_B = "/FitB"
    FIT_BH = "/FitBH"
    FIT_BV = "/FitBV"


class GoToActionArguments:
    S = "/S"  
    D = "/D"  
    SD = "/SD"  


class AnnotationDictionaryAttributes:
    

    Type = "/Type"
    Subtype = "/Subtype"
    Rect = "/Rect"
    Contents = "/Contents"
    P = "/P"
    NM = "/NM"
    M = "/M"
    F = "/F"
    AP = "/AP"
    AS = "/AS"
    DA = "/DA"
    Border = "/Border"
    C = "/C"
    StructParent = "/StructParent"
    OC = "/OC"


class InteractiveFormDictEntries:
    Fields = "/Fields"
    NeedAppearances = "/NeedAppearances"
    SigFlags = "/SigFlags"
    CO = "/CO"
    DR = "/DR"
    DA = "/DA"
    Q = "/Q"
    XFA = "/XFA"


class FieldDictionaryAttributes:
    

    FT = "/FT"  
    Parent = "/Parent"  
    Kids = "/Kids"  
    T = "/T"  
    TU = "/TU"  
    TM = "/TM"  
    Ff = "/Ff"  
    V = "/V"  
    DV = "/DV"  
    AA = "/AA"  
    Opt = "/Opt"  

    class FfBits(IntFlag):
        

        ReadOnly = 1 << 0
        
        Required = 1 << 1
        
        NoExport = 1 << 2
        

        Multiline = 1 << 12
        
        Password = 1 << 13
        

        NoToggleToOff = 1 << 14
        
        Radio = 1 << 15
        
        Pushbutton = 1 << 16
        

        Combo = 1 << 17
        
        Edit = 1 << 18
        
        Sort = 1 << 19
        

        FileSelect = 1 << 20
        

        MultiSelect = 1 << 21
        

        DoNotSpellCheck = 1 << 22
        
        DoNotScroll = 1 << 23
        
        Comb = 1 << 24
        

        RadiosInUnison = 1 << 25
        

        RichText = 1 << 25
        

        CommitOnSelChange = 1 << 26
        

    @classmethod
    def attributes(cls) -> Tuple[str, ...]:
        
        return (
            cls.TM,
            cls.T,
            cls.FT,
            cls.Parent,
            cls.TU,
            cls.Ff,
            cls.V,
            cls.DV,
            cls.Kids,
            cls.AA,
        )

    @classmethod
    def attributes_dict(cls) -> Dict[str, str]:
        
        return {
            cls.FT: "Field Type",
            cls.Parent: "Parent",
            cls.T: "Field Name",
            cls.TU: "Alternate Field Name",
            cls.TM: "Mapping Name",
            cls.Ff: "Field Flags",
            cls.V: "Value",
            cls.DV: "Default Value",
        }


class CheckboxRadioButtonAttributes:
    

    Opt = "/Opt"  

    @classmethod
    def attributes(cls) -> Tuple[str, ...]:
        
        return (cls.Opt,)

    @classmethod
    def attributes_dict(cls) -> Dict[str, str]:
        
        return {
            cls.Opt: "Options",
        }


class FieldFlag(IntFlag):
    

    READ_ONLY = 1
    REQUIRED = 2
    NO_EXPORT = 4


class DocumentInformationAttributes:
    

    TITLE = "/Title"  
    AUTHOR = "/Author"  
    SUBJECT = "/Subject"  
    KEYWORDS = "/Keywords"  
    CREATOR = "/Creator"  
    PRODUCER = "/Producer"  
    CREATION_DATE = "/CreationDate"  
    MOD_DATE = "/ModDate"  
    TRAPPED = "/Trapped"  


class PageLayouts:
    

    SINGLE_PAGE = "/SinglePage"
    ONE_COLUMN = "/OneColumn"
    TWO_COLUMN_LEFT = "/TwoColumnLeft"
    TWO_COLUMN_RIGHT = "/TwoColumnRight"
    TWO_PAGE_LEFT = "/TwoPageLeft"  
    TWO_PAGE_RIGHT = "/TwoPageRight"  


class GraphicsStateParameters:
    

    TYPE = "/Type"  
    LW = "/LW"  
    LC = "/LC"  
    LJ = "/LJ"  
    ML = "/ML"  
    D = "/D"  
    RI = "/RI"  
    OP = "/OP"
    op = "/op"
    OPM = "/OPM"
    FONT = "/Font"  
    BG = "/BG"
    BG2 = "/BG2"
    UCR = "/UCR"
    UCR2 = "/UCR2"
    TR = "/TR"
    TR2 = "/TR2"
    HT = "/HT"
    FL = "/FL"
    SM = "/SM"
    SA = "/SA"
    BM = "/BM"
    S_MASK = "/SMask"  
    CA = "/CA"
    ca = "/ca"
    AIS = "/AIS"
    TK = "/TK"


class CatalogDictionary:
    

    TYPE = "/Type"  
    VERSION = "/Version"  
    EXTENSIONS = "/Extensions"  
    PAGES = "/Pages"  
    PAGE_LABELS = "/PageLabels"  
    NAMES = "/Names"  
    DESTS = "/Dests"  
    VIEWER_PREFERENCES = "/ViewerPreferences"  
    PAGE_LAYOUT = "/PageLayout"  
    PAGE_MODE = "/PageMode"  
    OUTLINES = "/Outlines"  
    THREADS = "/Threads"  
    OPEN_ACTION = "/OpenAction"  
    AA = "/AA"  
    URI = "/URI"  
    ACRO_FORM = "/AcroForm"  
    METADATA = "/Metadata"  
    STRUCT_TREE_ROOT = "/StructTreeRoot"  
    MARK_INFO = "/MarkInfo"  
    LANG = "/Lang"  
    SPIDER_INFO = "/SpiderInfo"  
    OUTPUT_INTENTS = "/OutputIntents"  
    PIECE_INFO = "/PieceInfo"  
    OC_PROPERTIES = "/OCProperties"  
    PERMS = "/Perms"  
    LEGAL = "/Legal"  
    REQUIREMENTS = "/Requirements"  
    COLLECTION = "/Collection"  
    NEEDS_RENDERING = "/NeedsRendering"  
    DSS = "/DSS"  
    AF = "/AF"  
    D_PART_ROOT = "/DPartRoot"  


class OutlineFontFlag(IntFlag):
    

    italic = 1
    bold = 2


class PageLabelStyle:
    

    DECIMAL = "/D"  
    UPPERCASE_ROMAN = "/R"  
    LOWERCASE_ROMAN = "/r"  
    UPPERCASE_LETTER = "/A"  
    LOWERCASE_LETTER = "/a"  


class AnnotationFlag(IntFlag):
    

    INVISIBLE = 1
    HIDDEN = 2
    PRINT = 4
    NO_ZOOM = 8
    NO_ROTATE = 16
    NO_VIEW = 32
    READ_ONLY = 64
    LOCKED = 128
    TOGGLE_NO_VIEW = 256
    LOCKED_CONTENTS = 512


PDF_KEYS = (
    AnnotationDictionaryAttributes,
    CatalogAttributes,
    CatalogDictionary,
    CcittFaxDecodeParameters,
    CheckboxRadioButtonAttributes,
    ColorSpaces,
    Core,
    DocumentInformationAttributes,
    EncryptionDictAttributes,
    FieldDictionaryAttributes,
    FileSpecificationDictionaryEntries,
    FilterTypeAbbreviations,
    FilterTypes,
    GoToActionArguments,
    GraphicsStateParameters,
    ImageAttributes,
    InteractiveFormDictEntries,
    LzwFilterParameters,
    PageAttributes,
    PageLayouts,
    PagesAttributes,
    Resources,
    StreamAttributes,
    TrailerKeys,
    TypArguments,
    TypFitArguments,
)


class ImageType(IntFlag):
    NONE = 0
    XOBJECT_IMAGES = auto()
    INLINE_IMAGES = auto()
    DRAWING_IMAGES = auto()
    ALL = XOBJECT_IMAGES | INLINE_IMAGES | DRAWING_IMAGES
    IMAGES = ALL  


_INLINE_IMAGE_VALUE_MAPPING = {
    "/G": "/DeviceGray",
    "/RGB": "/DeviceRGB",
    "/CMYK": "/DeviceCMYK",
    "/I": "/Indexed",
    "/AHx": "/ASCIIHexDecode",
    "/A85": "/ASCII85Decode",
    "/LZW": "/LZWDecode",
    "/Fl": "/FlateDecode",
    "/RL": "/RunLengthDecode",
    "/CCF": "/CCITTFaxDecode",
    "/DCT": "/DCTDecode",
    "/DeviceGray": "/DeviceGray",
    "/DeviceRGB": "/DeviceRGB",
    "/DeviceCMYK": "/DeviceCMYK",
    "/Indexed": "/Indexed",
    "/ASCIIHexDecode": "/ASCIIHexDecode",
    "/ASCII85Decode": "/ASCII85Decode",
    "/LZWDecode": "/LZWDecode",
    "/FlateDecode": "/FlateDecode",
    "/RunLengthDecode": "/RunLengthDecode",
    "/CCITTFaxDecode": "/CCITTFaxDecode",
    "/DCTDecode": "/DCTDecode",
    "/RelativeColorimetric": "/RelativeColorimetric",
}

_INLINE_IMAGE_KEY_MAPPING = {
    "/BPC": "/BitsPerComponent",
    "/CS": "/ColorSpace",
    "/D": "/Decode",
    "/DP": "/DecodeParms",
    "/F": "/Filter",
    "/H": "/Height",
    "/W": "/Width",
    "/I": "/Interpolate",
    "/Intent": "/Intent",
    "/IM": "/ImageMask",
    "/BitsPerComponent": "/BitsPerComponent",
    "/ColorSpace": "/ColorSpace",
    "/Decode": "/Decode",
    "/DecodeParms": "/DecodeParms",
    "/Filter": "/Filter",
    "/Height": "/Height",
    "/Width": "/Width",
    "/Interpolate": "/Interpolate",
    "/ImageMask": "/ImageMask",
}
