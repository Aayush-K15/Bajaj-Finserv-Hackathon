
























from __future__ import absolute_import
import codecs


__all__ = [
    'codec_names',
    'ignored_codec_names',
    'lookup',
    '__version__',
    '__version_info__'
]
__version_info__ = (1, 1, 1)
__version__ = '.'.join([str(item) for item in __version_info__])


def _codec_names():
    
    import glob
    import os.path

    package_folder = os.path.dirname(__file__)
    for codec_path in glob.glob(os.path.join(package_folder, 'cp*.py')):
        codec_name = os.path.splitext(os.path.basename(codec_path))[0]
        yield codec_name


def _create_codec_name_to_info_map():
    result = {}
    for codec_name in codec_names:
        codec_module = __import__('ebcdic.' + codec_name, globals(), locals(), ['getregentry'])
        result[codec_name] = codec_module.getregentry()
    return result


def _find_ebcdic_codec(code_name):
    
    return _codec_name_to_info_map.get(code_name)


def ignored_codec_names():
    
    return [codec_name
            for codec_name, codec_info in sorted(_codec_name_to_info_map.items())
            if codec_info != codecs.lookup(codec_name)
    ]


def lookup(codec_name):
    
    result = _find_ebcdic_codec(codec_name)
    if result is None:
        raise LookupError('EBCDIC codec is %r but must be one of: %s' % (codec_name, codec_names))
    return result



codec_names = sorted(_codec_names())
_codec_name_to_info_map = _create_codec_name_to_info_map()
codecs.register(_find_ebcdic_codec)
