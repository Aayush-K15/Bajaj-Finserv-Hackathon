

from __future__ import unicode_literals

import codecs



class Codec(codecs.Codec):
    def encode(self, text, errors='strict'):
        return codecs.charmap_encode(text, errors, encoding_table)

    def decode(self, data, errors='strict'):
        return codecs.charmap_decode(data, errors, decoding_table)


class IncrementalEncoder(codecs.IncrementalEncoder):
    def encode(self, text, final=False):
        return codecs.charmap_encode(text, self.errors, encoding_table)[0]


class IncrementalDecoder(codecs.IncrementalDecoder):
    def decode(self, data, final=False):
        return codecs.charmap_decode(data, self.errors, decoding_table)[0]


class StreamWriter(Codec, codecs.StreamWriter):
    pass


class StreamReader(Codec, codecs.StreamReader):
    pass



def getregentry():
    return codecs.CodecInfo(
        name='cp1149',
        encode=Codec().encode,
        decode=Codec().decode,
        incrementalencoder=IncrementalEncoder,
        incrementaldecoder=IncrementalDecoder,
        streamreader=StreamReader,
        streamwriter=StreamWriter,
    )




decoding_table = (
    '\x00'      
    '\x01'      
    '\x02'      
    '\x03'      
    '\x9c'      
    '\t'        
    '\x86'      
    '\x7f'      
    '\x97'      
    '\x8d'      
    '\x8e'      
    '\x0b'      
    '\x0c'      
    '\r'        
    '\x0e'      
    '\x0f'      
    '\x10'      
    '\x11'      
    '\x12'      
    '\x13'      
    '\x9d'      
    '\n'        
    '\x08'      
    '\x87'      
    '\x18'      
    '\x19'      
    '\x92'      
    '\x8f'      
    '\x1c'      
    '\x1d'      
    '\x1e'      
    '\x1f'      
    '\x80'      
    '\x81'      
    '\x82'      
    '\x83'      
    '\x84'      
    '\n'        
    '\x17'      
    '\x1b'      
    '\x88'      
    '\x89'      
    '\x8a'      
    '\x8b'      
    '\x8c'      
    '\x05'      
    '\x06'      
    '\x07'      
    '\x90'      
    '\x91'      
    '\x16'      
    '\x93'      
    '\x94'      
    '\x95'      
    '\x96'      
    '\x04'      
    '\x98'      
    '\x99'      
    '\x9a'      
    '\x9b'      
    '\x14'      
    '\x15'      
    '\x9e'      
    '\x1a'      
    ' '         
    '\xa0'      
    '\xe2'      
    '\xe4'      
    '\xe0'      
    '\xe1'      
    '\xe3'      
    '\xe5'      
    '\xe7'      
    '\xf1'      
    '\xde'      
    '.'         
    '<'         
    '('         
    '+'         
    '!'         
    '&'         
    '\xe9'      
    '\xea'      
    '\xeb'      
    '\xe8'      
    '\xed'      
    '\xee'      
    '\xef'      
    '\xec'      
    '\xdf'      
    '\xc6'      
    '$'         
    '*'         
    ')'         
    ';'         
    '\xd6'      
    '-'         
    '/'         
    '\xc2'      
    '\xc4'      
    '\xc0'      
    '\xc1'      
    '\xc3'      
    '\xc5'      
    '\xc7'      
    '\xd1'      
    '\xa6'      
    ','         
    '%'         
    '_'         
    '>'         
    '?'         
    '\xf8'      
    '\xc9'      
    '\xca'      
    '\xcb'      
    '\xc8'      
    '\xcd'      
    '\xce'      
    '\xcf'      
    '\xcc'      
    '\xf0'      
    ':'         
    '
    '\xd0'      
    "'"         
    '='         
    '"'         
    '\xd8'      
    'a'         
    'b'         
    'c'         
    'd'         
    'e'         
    'f'         
    'g'         
    'h'         
    'i'         
    '\xab'      
    '\xbb'      
    '`'         
    '\xfd'      
    '{'         
    '\xb1'      
    '\xb0'      
    'j'         
    'k'         
    'l'         
    'm'         
    'n'         
    'o'         
    'p'         
    'q'         
    'r'         
    '\xaa'      
    '\xba'      
    '}'         
    '\xb8'      
    ']'         
    '\u20ac'    
    '\xb5'      
    '\xf6'      
    's'         
    't'         
    'u'         
    'v'         
    'w'         
    'x'         
    'y'         
    'z'         
    '\xa1'      
    '\xbf'      
    '@'         
    '\xdd'      
    '['         
    '\xae'      
    '\xa2'      
    '\xa3'      
    '\xa5'      
    '\xb7'      
    '\xa9'      
    '\xa7'      
    '\xb6'      
    '\xbc'      
    '\xbd'      
    '\xbe'      
    '\xac'      
    '|'         
    '\xaf'      
    '\xa8'      
    '\\'        
    '\xd7'      
    '\xfe'      
    'A'         
    'B'         
    'C'         
    'D'         
    'E'         
    'F'         
    'G'         
    'H'         
    'I'         
    '\xad'      
    '\xf4'      
    '~'         
    '\xf2'      
    '\xf3'      
    '\xf5'      
    '\xe6'      
    'J'         
    'K'         
    'L'         
    'M'         
    'N'         
    'O'         
    'P'         
    'Q'         
    'R'         
    '\xb9'      
    '\xfb'      
    '\xfc'      
    '\xf9'      
    '\xfa'      
    '\xff'      
    '\xb4'      
    '\xf7'      
    'S'         
    'T'         
    'U'         
    'V'         
    'W'         
    'X'         
    'Y'         
    'Z'         
    '\xb2'      
    '\xd4'      
    '^'         
    '\xd2'      
    '\xd3'      
    '\xd5'      
    '0'         
    '1'         
    '2'         
    '3'         
    '4'         
    '5'         
    '6'         
    '7'         
    '8'         
    '9'         
    '\xb3'      
    '\xdb'      
    '\xdc'      
    '\xd9'      
    '\xda'      
    '\x9f'      
)



encoding_table = codecs.charmap_build(decoding_table)
