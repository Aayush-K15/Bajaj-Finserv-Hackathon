

import re
import typing as t

from uritemplate import orderedset
from uritemplate import variable

template_re = re.compile("{([^}]+)}")


def _merge(
    var_dict: t.Optional[variable.VariableValueDict],
    overrides: variable.VariableValueDict,
) -> variable.VariableValueDict:
    if var_dict:
        opts = var_dict.copy()
        opts.update(overrides)
        return opts
    return overrides


class URITemplate:
    

    def __init__(self, uri: str):
        
        self.uri: str = uri
        
        
        self.variables: t.List[variable.URIVariable] = [
            variable.URIVariable(m.groups()[0])
            for m in template_re.finditer(self.uri)
        ]
        
        self.variable_names = orderedset.OrderedSet()
        for var in self.variables:
            for name in var.variable_names:
                self.variable_names.add(name)

    def __repr__(self) -> str:
        return 'URITemplate("%s")' % self

    def __str__(self) -> str:
        return self.uri

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, URITemplate):
            return NotImplemented
        return self.uri == other.uri

    def __hash__(self) -> int:
        return hash(self.uri)

    def _expand(
        self, var_dict: variable.VariableValueDict, replace: bool
    ) -> str:
        if not self.variables:
            return self.uri

        expansion = var_dict
        expanded: t.Dict[str, str] = {}
        for v in self.variables:
            expanded.update(v.expand(expansion))

        def replace_all(match: "re.Match[str]") -> str:
            return expanded.get(match.groups()[0], "")

        def replace_partial(match: "re.Match[str]") -> str:
            match_group = match.groups()[0]
            var = "{%s}" % match_group
            return expanded.get(match_group) or var

        replace_func = replace_partial if replace else replace_all

        return template_re.sub(replace_func, self.uri)

    def expand(
        self,
        var_dict: t.Optional[variable.VariableValueDict] = None,
        **kwargs: variable.VariableValue,
    ) -> str:
        
        return self._expand(_merge(var_dict, kwargs), False)

    def partial(
        self,
        var_dict: t.Optional[variable.VariableValueDict] = None,
        **kwargs: variable.VariableValue,
    ) -> "URITemplate":
        
        return URITemplate(self._expand(_merge(var_dict, kwargs), True))
