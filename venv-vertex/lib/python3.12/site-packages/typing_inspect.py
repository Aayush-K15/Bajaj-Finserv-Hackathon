



import sys
import types
import typing
import typing_extensions

from mypy_extensions import _TypedDictMeta as _TypedDictMeta_Mypy


if (3, 4, 0) <= sys.version_info[:3] < (3, 9, 2):
    from typing_extensions import _TypedDictMeta as _TypedDictMeta_TE
elif sys.version_info[:3] >= (3, 9, 2):
    
    
    
    try:
        from typing_extensions import _TypedDictMeta as _TypedDictMeta_TE
    except ImportError:
        from typing import _TypedDictMeta as _TypedDictMeta_TE
else:
    
    from typing import TypedDict
    _TypedDictMeta_TE = type(TypedDict)

NEW_TYPING = sys.version_info[:3] >= (3, 7, 0)  
if NEW_TYPING:
    import collections.abc

WITH_FINAL = True
WITH_LITERAL = True
WITH_CLASSVAR = True
WITH_NEWTYPE = True
LEGACY_TYPING = False

if NEW_TYPING:
    from typing import (
        Generic, Callable, Union, TypeVar, ClassVar, Tuple, _GenericAlias,
        ForwardRef, NewType,
    )
    from typing_extensions import Final, Literal
    if sys.version_info[:3] >= (3, 9, 0):
        from typing import _SpecialGenericAlias
        typingGenericAlias = (_GenericAlias, _SpecialGenericAlias, types.GenericAlias)
    else:
        typingGenericAlias = (_GenericAlias,)
else:
    from typing import (
        Callable, CallableMeta, Union, Tuple, TupleMeta, TypeVar, GenericMeta,
        _ForwardRef,
    )
    try:
        from typing import _Union, _ClassVar
    except ImportError:
        
        _Union = type(Union)
        WITH_CLASSVAR = False
        LEGACY_TYPING = True

    try:  
        from typing_extensions import _Final
    except ImportError:  
        try:
            from typing import _Final
        except ImportError:
            WITH_FINAL = False

    try:  
        from typing_extensions import Literal
    except ImportError:  
        try:
            from typing import Literal
        except ImportError:
            WITH_LITERAL = False

    try:  
        from typing_extensions import NewType
    except ImportError:
        try:
            from typing import NewType
        except ImportError:
            WITH_NEWTYPE = False


def _gorg(cls):
    
    assert isinstance(cls, GenericMeta)
    if hasattr(cls, '_gorg'):
        return cls._gorg
    while cls.__origin__ is not None:
        cls = cls.__origin__
    return cls


def is_generic_type(tp):
    
    if NEW_TYPING:
        return (isinstance(tp, type) and issubclass(tp, Generic) or
                isinstance(tp, typingGenericAlias) and
                tp.__origin__ not in (Union, tuple, ClassVar, collections.abc.Callable))
    return (isinstance(tp, GenericMeta) and not
            isinstance(tp, (CallableMeta, TupleMeta)))


def is_callable_type(tp):
    
    if NEW_TYPING:
        return (tp is Callable or isinstance(tp, typingGenericAlias) and
                tp.__origin__ is collections.abc.Callable or
                isinstance(tp, type) and issubclass(tp, Generic) and
                issubclass(tp, collections.abc.Callable))
    return type(tp) is CallableMeta


def is_tuple_type(tp):
    
    if NEW_TYPING:
        return (tp is Tuple or isinstance(tp, typingGenericAlias) and
                tp.__origin__ is tuple or
                isinstance(tp, type) and issubclass(tp, Generic) and
                issubclass(tp, tuple))
    return type(tp) is TupleMeta


def is_optional_type(tp):
    

    if tp is type(None):  
        return True
    elif is_union_type(tp):
        return any(is_optional_type(tt) for tt in get_args(tp, evaluate=True))
    else:
        return False


def is_final_type(tp):
    
    if NEW_TYPING:
        return (tp is Final or
                isinstance(tp, typingGenericAlias) and tp.__origin__ is Final)
    return WITH_FINAL and type(tp) is _Final


try:
    MaybeUnionType = types.UnionType
except AttributeError:
    MaybeUnionType = None


def is_union_type(tp):
    
    if NEW_TYPING:
        return (tp is Union or
                (isinstance(tp, typingGenericAlias) and tp.__origin__ is Union) or
                (MaybeUnionType and isinstance(tp, MaybeUnionType)))
    return type(tp) is _Union


LITERALS = {Literal}
if hasattr(typing, "Literal"):
    LITERALS.add(typing.Literal)


def is_literal_type(tp):
    if NEW_TYPING:
        return (tp in LITERALS or
                isinstance(tp, typingGenericAlias) and tp.__origin__ in LITERALS)
    return WITH_LITERAL and type(tp) is type(Literal)


def is_typevar(tp):
    

    return type(tp) is TypeVar


def is_classvar(tp):
    
    if NEW_TYPING:
        return (tp is ClassVar or
                isinstance(tp, typingGenericAlias) and tp.__origin__ is ClassVar)
    elif WITH_CLASSVAR:
        return type(tp) is _ClassVar
    else:
        return False


def is_new_type(tp):
    
    if not WITH_NEWTYPE:
        return False
    elif sys.version_info[:3] >= (3, 10, 0) and sys.version_info.releaselevel != 'beta':
        return (tp in (NewType, typing_extensions.NewType) or
                isinstance(tp, (NewType, typing_extensions.NewType)))
    elif sys.version_info[:3] >= (3, 0, 0):
        try:
            res = isinstance(tp, typing_extensions.NewType)
        except TypeError:
            pass
        else:
            if res:
                return res
        return (tp in (NewType, typing_extensions.NewType) or
                (getattr(tp, '__supertype__', None) is not None and
                 getattr(tp, '__qualname__', '') == 'NewType.<locals>.new_type' and
                 tp.__module__ in ('typing', 'typing_extensions')))
    else:  
        
        return (tp is NewType or
                (getattr(tp, '__supertype__', None) is not None and
                 tp.__module__ in ('typing', 'typing_extensions')))


def is_forward_ref(tp):
    
    if not NEW_TYPING:
        return isinstance(tp, _ForwardRef)
    return isinstance(tp, ForwardRef)


def get_last_origin(tp):
    
    if NEW_TYPING:
        raise ValueError('This function is only supported in Python 3.6,'
                         ' use get_origin instead')
    sentinel = object()
    origin = getattr(tp, '__origin__', sentinel)
    if origin is sentinel:
        return None
    if origin is None:
        return tp
    return origin


def get_origin(tp):
    
    if NEW_TYPING:
        if isinstance(tp, typingGenericAlias):
            return tp.__origin__ if tp.__origin__ is not ClassVar else None
        if tp is Generic:
            return Generic
        return None
    if isinstance(tp, GenericMeta):
        return _gorg(tp)
    if is_union_type(tp):
        return Union
    if is_tuple_type(tp):
        return Tuple
    if is_literal_type(tp):
        if NEW_TYPING:
            return tp.__origin__ or tp
        return Literal

    return None


def get_parameters(tp):
    
    if LEGACY_TYPING:
        
        if is_union_type(tp):
            params = []
            for arg in (tp.__union_params__ if tp.__union_params__ is not None else ()):
                params += get_parameters(arg)
            return tuple(params)
        elif is_tuple_type(tp):
            params = []
            for arg in (tp.__tuple_params__ if tp.__tuple_params__ is not None else ()):
                params += get_parameters(arg)
            return tuple(params)
        elif is_generic_type(tp):
            params = []
            base_params = tp.__parameters__
            if base_params is None:
                return ()
            for bp_ in base_params:
                for bp in (get_args(bp_) if is_tuple_type(bp_) else (bp_,)):
                    if _has_type_var(bp) and not isinstance(bp, TypeVar):
                        raise TypeError(
                            "Cannot inherit from a generic class "
                            "parameterized with "
                            "non-type-variable %s" % bp)
                    if params is None:
                        params = []
                    if bp not in params:
                        params.append(bp)
            if params is not None:
                return tuple(params)
            else:
                return ()
        else:
            return ()
    elif NEW_TYPING:
        if (
                (
                    isinstance(tp, typingGenericAlias) and
                    hasattr(tp, '__parameters__')
                ) or
                isinstance(tp, type) and issubclass(tp, Generic) and
                tp is not Generic):
            return tp.__parameters__
        else:
            return ()
    elif (
        is_generic_type(tp) or is_union_type(tp) or
        is_callable_type(tp) or is_tuple_type(tp)
    ):
        return tp.__parameters__ if tp.__parameters__ is not None else ()
    else:
        return ()


def get_last_args(tp):
    
    if NEW_TYPING:
        raise ValueError('This function is only supported in Python 3.6,'
                         ' use get_args instead')
    elif is_classvar(tp):
        return (tp.__type__,) if tp.__type__ is not None else ()
    elif is_generic_type(tp):
        try:
            if tp.__args__ is not None and len(tp.__args__) > 0:
                return tp.__args__
        except AttributeError:
            
            pass
        return tp.__parameters__ if tp.__parameters__ is not None else ()
    elif is_union_type(tp):
        try:
            return tp.__args__ if tp.__args__ is not None else ()
        except AttributeError:
            
            return tp.__union_params__ if tp.__union_params__ is not None else ()
    elif is_callable_type(tp):
        return tp.__args__ if tp.__args__ is not None else ()
    elif is_tuple_type(tp):
        try:
            return tp.__args__ if tp.__args__ is not None else ()
        except AttributeError:
            
            return tp.__tuple_params__ if tp.__tuple_params__ is not None else ()
    else:
        return ()


def _eval_args(args):
    
    res = []
    for arg in args:
        if not isinstance(arg, tuple):
            res.append(arg)
        elif is_callable_type(arg[0]):
            callable_args = _eval_args(arg[1:])
            if len(arg) == 2:
                res.append(Callable[[], callable_args[0]])
            elif arg[1] is Ellipsis:
                res.append(Callable[..., callable_args[1]])
            else:
                res.append(Callable[list(callable_args[:-1]), callable_args[-1]])
        else:
            res.append(type(arg[0]).__getitem__(arg[0], _eval_args(arg[1:])))
    return tuple(res)


def get_args(tp, evaluate=None):
    
    if NEW_TYPING:
        if evaluate is not None and not evaluate:
            raise ValueError('evaluate can only be True in Python >= 3.7')
        
        if isinstance(tp, typingGenericAlias) and hasattr(tp, '__args__'):
            res = tp.__args__
            if get_origin(tp) is collections.abc.Callable and res[0] is not Ellipsis:
                res = (list(res[:-1]), res[-1])
            return res
        if MaybeUnionType and isinstance(tp, MaybeUnionType):
            return tp.__args__
        return ()
    if is_classvar(tp) or is_final_type(tp):
        return (tp.__type__,) if tp.__type__ is not None else ()
    if is_literal_type(tp):
        return tp.__values__ or ()
    if (
        is_generic_type(tp) or is_union_type(tp) or
        is_callable_type(tp) or is_tuple_type(tp)
    ):
        try:
            tree = tp._subs_tree()
        except AttributeError:
            
            if is_union_type(tp):
                
                tree = _union_subs_tree(tp)
            elif is_generic_type(tp):
                
                tree = _generic_subs_tree(tp)
            elif is_tuple_type(tp):
                
                tree = _tuple_subs_tree(tp)
            else:
                
                return ()

        if isinstance(tree, tuple) and len(tree) > 1:
            if not evaluate:
                return tree[1:]
            res = _eval_args(tree[1:])
            if get_origin(tp) is Callable and res[0] is not Ellipsis:
                res = (list(res[:-1]), res[-1])
            return res

    return ()


def get_bound(tp):
    

    if is_typevar(tp):
        return getattr(tp, '__bound__', None)
    else:
        raise TypeError("type is not a `TypeVar`: " + str(tp))


def get_constraints(tp):
    

    if is_typevar(tp):
        return getattr(tp, '__constraints__', ())
    else:
        raise TypeError("type is not a `TypeVar`: " + str(tp))


def get_generic_type(obj):
    

    gen_type = getattr(obj, '__orig_class__', None)
    return gen_type if gen_type is not None else type(obj)


def get_generic_bases(tp):
    
    if LEGACY_TYPING:
        return tuple(t for t in tp.__bases__ if isinstance(t, GenericMeta))
    else:
        return getattr(tp, '__orig_bases__', ())


def typed_dict_keys(td):
    
    if isinstance(td, (_TypedDictMeta_Mypy, _TypedDictMeta_TE)):
        return td.__annotations__.copy()
    return None


def get_forward_arg(fr):
    
    return fr.__forward_arg__ if is_forward_ref(fr) else None




def _replace_arg(arg, tvars, args):
    
    if tvars is None:
        tvars = []
    
    
    if is_union_type(arg):
        return _union_subs_tree(arg, tvars, args)
    if is_tuple_type(arg):
        return _tuple_subs_tree(arg, tvars, args)
    if is_generic_type(arg):
        return _generic_subs_tree(arg, tvars, args)
    if isinstance(arg, TypeVar):
        for i, tvar in enumerate(tvars):
            if arg == tvar:
                return args[i]
    return arg


def _remove_dups_flatten(parameters):
    

    
    params = []
    for p in parameters:
        if isinstance(p, _Union):  
            params.extend(p.__union_params__)  
        elif isinstance(p, tuple) and len(p) > 0 and p[0] is Union:
            params.extend(p[1:])
        else:
            params.append(p)
    
    all_params = set(params)
    if len(all_params) < len(params):
        new_params = []
        for t in params:
            if t in all_params:
                new_params.append(t)
                all_params.remove(t)
        params = new_params
        assert not all_params, all_params
    
    
    
    
    
    all_params = set(params)
    for t1 in params:
        if not isinstance(t1, type):
            continue
        if any(isinstance(t2, type) and issubclass(t1, t2)
               for t2 in all_params - {t1}
               if (not (isinstance(t2, GenericMeta) and
                        get_origin(t2) is not None) and
                   not isinstance(t2, TypeVar))):
            all_params.remove(t1)
    return tuple(t for t in params if t in all_params)


def _subs_tree(cls, tvars=None, args=None):
    
    def _get_origin(cls):
        try:
            return cls.__origin__
        except AttributeError:
            return None

    current = _get_origin(cls)
    if current is None:
        if not is_union_type(cls) and not is_tuple_type(cls):
            return cls

    
    orig_chain = []
    while _get_origin(current) is not None:
        orig_chain.append(current)
        current = _get_origin(current)

    
    tree_args = []

    def _get_args(cls):
        if is_union_type(cls):
            cls_args = cls.__union_params__
        elif is_tuple_type(cls):
            cls_args = cls.__tuple_params__
        else:
            try:
                cls_args = cls.__args__
            except AttributeError:
                cls_args = ()
        return cls_args if cls_args is not None else ()

    for arg in _get_args(cls):
        tree_args.append(_replace_arg(arg, tvars, args))
    
    for ocls in orig_chain:
        new_tree_args = []
        for arg in _get_args(ocls):
            new_tree_args.append(_replace_arg(arg, get_parameters(ocls), tree_args))
        tree_args = new_tree_args
    return tree_args


def _union_subs_tree(tp, tvars=None, args=None):
    
    if tp is Union:
        return Union  
    tree_args = _subs_tree(tp, tvars, args)
    
    tree_args = _remove_dups_flatten(tree_args)
    if len(tree_args) == 1:
        return tree_args[0]  
    return (Union,) + tree_args


def _generic_subs_tree(tp, tvars=None, args=None):
    
    if tp.__origin__ is None:
        return tp
    tree_args = _subs_tree(tp, tvars, args)
    return (_gorg(tp),) + tuple(tree_args)


def _tuple_subs_tree(tp, tvars=None, args=None):
    
    if tp is Tuple:
        return Tuple  
    tree_args = _subs_tree(tp, tvars, args)
    return (Tuple,) + tuple(tree_args)


def _has_type_var(t):
    if t is None:
        return False
    elif is_union_type(t):
        return _union_has_type_var(t)
    elif is_tuple_type(t):
        return _tuple_has_type_var(t)
    elif is_generic_type(t):
        return _generic_has_type_var(t)
    elif is_callable_type(t):
        return _callable_has_type_var(t)
    else:
        return False


def _union_has_type_var(tp):
    if tp.__union_params__:
        for t in tp.__union_params__:
            if _has_type_var(t):
                return True
    return False


def _tuple_has_type_var(tp):
    if tp.__tuple_params__:
        for t in tp.__tuple_params__:
            if _has_type_var(t):
                return True
    return False


def _callable_has_type_var(tp):
    if tp.__args__:
        for t in tp.__args__:
            if _has_type_var(t):
                return True
    return _has_type_var(tp.__result__)


def _generic_has_type_var(tp):
    if tp.__parameters__:
        for t in tp.__parameters__:
            if _has_type_var(t):
                return True
    return False
