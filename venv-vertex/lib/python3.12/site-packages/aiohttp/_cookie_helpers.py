

import re
import sys
from http.cookies import Morsel
from typing import List, Optional, Sequence, Tuple, cast

from .log import internal_logger

__all__ = (
    "parse_set_cookie_headers",
    "parse_cookie_header",
    "preserve_morsel_with_coded_value",
)








_COOKIE_NAME_RE = re.compile(r"^[!
_COOKIE_KNOWN_ATTRS = frozenset(  
    (
        "path",
        "domain",
        "max-age",
        "expires",
        "secure",
        "httponly",
        "samesite",
        "partitioned",
        "version",
        "comment",
    )
)
_COOKIE_BOOL_ATTRS = frozenset(  
    ("secure", "httponly", "partitioned")
)




_COOKIE_PATTERN = re.compile(
    r,
    re.VERBOSE | re.ASCII,
)


def preserve_morsel_with_coded_value(cookie: Morsel[str]) -> Morsel[str]:
    
    mrsl_val = cast("Morsel[str]", cookie.get(cookie.key, Morsel()))
    
    
    
    
    mrsl_val.__setstate__(  
        {"key": cookie.key, "value": cookie.value, "coded_value": cookie.coded_value}
    )
    return mrsl_val


_unquote_sub = re.compile(r"\\(?:([0-3][0-7][0-7])|(.))").sub


def _unquote_replace(m: re.Match[str]) -> str:
    
    if m[1]:
        return chr(int(m[1], 8))
    return m[2]


def _unquote(value: str) -> str:
    
    
    
    if len(value) < 2:
        return value
    if value[0] != '"' or value[-1] != '"':
        return value

    
    

    
    value = value[1:-1]

    
    
    
    
    return _unquote_sub(_unquote_replace, value)


def parse_cookie_header(header: str) -> List[Tuple[str, Morsel[str]]]:
    
    if not header:
        return []

    cookies: List[Tuple[str, Morsel[str]]] = []
    i = 0
    n = len(header)

    while i < n:
        
        match = _COOKIE_PATTERN.match(header, i)
        if not match:
            break

        key = match.group("key")
        value = match.group("val") or ""
        i = match.end(0)

        
        if not key or not _COOKIE_NAME_RE.match(key):
            internal_logger.warning("Can not load cookie: Illegal cookie name %r", key)
            continue

        
        morsel: Morsel[str] = Morsel()
        
        
        
        
        
        morsel.__setstate__(  
            {"key": key, "value": _unquote(value), "coded_value": value}
        )

        cookies.append((key, morsel))

    return cookies


def parse_set_cookie_headers(headers: Sequence[str]) -> List[Tuple[str, Morsel[str]]]:
    
    parsed_cookies: List[Tuple[str, Morsel[str]]] = []

    for header in headers:
        if not header:
            continue

        
        i = 0
        n = len(header)
        current_morsel: Optional[Morsel[str]] = None
        morsel_seen = False

        while 0 <= i < n:
            
            match = _COOKIE_PATTERN.match(header, i)
            if not match:
                
                break

            key, value = match.group("key"), match.group("val")
            i = match.end(0)
            lower_key = key.lower()

            if key[0] == "$":
                if not morsel_seen:
                    
                    
                    continue
                
                if current_morsel is not None:
                    attr_lower_key = lower_key[1:]
                    if attr_lower_key in _COOKIE_KNOWN_ATTRS:
                        current_morsel[attr_lower_key] = value or ""
            elif lower_key in _COOKIE_KNOWN_ATTRS:
                if not morsel_seen:
                    
                    break
                if lower_key in _COOKIE_BOOL_ATTRS:
                    
                    if current_morsel is not None:
                        if lower_key == "partitioned" and sys.version_info < (3, 14):
                            dict.__setitem__(current_morsel, lower_key, True)
                        else:
                            current_morsel[lower_key] = True
                elif value is None:
                    
                    break
                elif current_morsel is not None:
                    
                    current_morsel[lower_key] = _unquote(value)
            elif value is not None:
                
                
                if key in _COOKIE_KNOWN_ATTRS or not _COOKIE_NAME_RE.match(key):
                    internal_logger.warning(
                        "Can not load cookies: Illegal cookie name %r", key
                    )
                    current_morsel = None
                else:
                    
                    current_morsel = Morsel()
                    
                    
                    
                    
                    
                    current_morsel.__setstate__(  
                        {"key": key, "value": _unquote(value), "coded_value": value}
                    )
                    parsed_cookies.append((key, current_morsel))
                    morsel_seen = True
            else:
                
                break

    return parsed_cookies
