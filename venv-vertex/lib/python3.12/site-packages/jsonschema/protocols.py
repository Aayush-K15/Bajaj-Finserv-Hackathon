




from __future__ import annotations

from typing import TYPE_CHECKING, Any, ClassVar, Protocol, runtime_checkable





if TYPE_CHECKING:
    from collections.abc import Iterable, Mapping

    import referencing.jsonschema

    from jsonschema import _typing
    from jsonschema.exceptions import ValidationError
    import jsonschema
    import jsonschema.validators














@runtime_checkable
class Validator(Protocol):
    

    
    
    META_SCHEMA: ClassVar[Mapping]

    
    
    
    VALIDATORS: ClassVar[Mapping]

    
    
    TYPE_CHECKER: ClassVar[jsonschema.TypeChecker]

    
    
    FORMAT_CHECKER: ClassVar[jsonschema.FormatChecker]

    
    ID_OF: _typing.id_of

    
    schema: Mapping | bool

    def __init__(
        self,
        schema: Mapping | bool,
        registry: referencing.jsonschema.SchemaRegistry,
        format_checker: jsonschema.FormatChecker | None = None,
    ) -> None:
        ...

    @classmethod
    def check_schema(cls, schema: Mapping | bool) -> None:
        

    def is_type(self, instance: Any, type: str) -> bool:
        

    def is_valid(self, instance: Any) -> bool:
        

    def iter_errors(self, instance: Any) -> Iterable[ValidationError]:
        r

    def validate(self, instance: Any) -> None:
        

    def evolve(self, **kwargs) -> Validator:
        
