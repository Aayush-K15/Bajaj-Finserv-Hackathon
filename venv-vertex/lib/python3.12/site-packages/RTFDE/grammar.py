















HTMLRTF_GRAMMAR = 


GRAMMAR = {
    "imports": r,
    "ignore": r,
    "_LBRACE": r'"{"',
    "_RBRACE": r'"}"',
    "BACKSLASH": r'"\\"',
    "start": r"_LBRACE document _RBRACE",
    "document": r,
    "group": r,
    "htmltag_group": r"STAR_ESCAPE HTMLTAG ( string | group )*",
    "HTMLTAG": r'"\\htmltag" DIGIT~0..3 _SPACE_DELETE?',
    "MHTMLTAG": r'"\\mhtmltag" DIGIT~0..3 _SPACE_DELETE?',
    "mhtmltag_group": r"STAR_ESCAPE MHTMLTAG ( string | group )*",
    "NUMERICALDEL": r"SIGNED_NUMBER*",
    "_SPACE_DELETE": r'" "',
    "SPACE_SAVE": r'" "',
    "DELIMITER": r"NUMERICALDEL _SPACE_DELETE?",
    "ASCIILETTERSEQUENCE" : r"LETTER+",
    "CONTROLWORD": "BACKSLASH ASCIILETTERSEQUENCE~1..32 DELIMITER",
    "STAR_ESCAPE": r'BACKSLASH "*"',
    "NONBREAKING_HYPHEN": r'BACKSLASH "_"',
    "OPTIONAL_HYPHEN": r'BACKSLASH "-"',
    "NONBREAKING_SPACE": r'BACKSLASH "~"',
    "FORMULA_CHARACTER": r'BACKSLASH "|"',
    "INDEX_SUBENTRY": r'BACKSLASH ":"',
    "control_symbol": r"(STAR_ESCAPE | INDEX_SUBENTRY | FORMULA_CHARACTER | NONBREAKING_SPACE | OPTIONAL_HYPHEN | NONBREAKING_HYPHEN )",
    "STRING": r'/.+?/',
    "?string": r"STRING+ SPACE_SAVE?",
    "_QUESTION_MARK": r'"?"',
    "UNICODE" : r,
    "HEXENCODED": ,
    "hexarray": "HEXENCODED+",
    "HTMLRTF": r'"\\htmlrtf" DIGIT~0..3 _SPACE_DELETE?',
   }











PRIORITY_LEVELS = {
    "_LBRACE": ".2",
    "_RBRACE": ".2",
    "BACKSLASH" : ".1",
    "start" : ".1",
    "document": ".1",
    "group": ".1",
    "htmltag_group" : ".2",
    "HTMLRTF" : ".2",
    "HTMLTAG" : ".2",
    "MHTMLTAG" : ".2",
    "mhtmltag_group" : ".2",
    "NUMERICALDEL" : ".1",
    "_SPACE_DELETE" : ".1",
    "SPACE_SAVE" : ".1",
    "DELIMITER" : ".1",
    "ASCIILETTERSEQUENCE" : ".1",
    "CONTROLWORD": ".1",
    "STAR_ESCAPE": ".1",
    "NONBREAKING_HYPHEN": ".1",
    "OPTIONAL_HYPHEN": ".1",
    "NONBREAKING_SPACE": ".1",
    "FORMULA_CHARACTER": ".1",
    "INDEX_SUBENTRY": ".1",
    "control_symbol": ".1",
    "STRING" : ".0",
    "_QUESTION_MARK": ".1",
    "?string" : ".0",
    "UNICODE" : ".2",
    "HEXENCODED" : ".1",
    "hexarray" : ".2",
}

def make_concise_grammar():
    
    grammar = r
    for key, priority in PRIORITY_LEVELS.items():
        grammar += "{0}{1} : {2}\n".format(key,priority,GRAMMAR[key])
    grammar += GRAMMAR['imports'] + "\n"
    grammar += GRAMMAR['ignore'] + "\n"
    return (grammar)



def make_literate_grammar():
    
    grammar = r.format(**GRAMMAR)
    return grammar


if __name__ == '__main__':
    
    print(make_concise_grammar())
