
import errno
import os
import pickle
import datetime

def read_or_create_settings(file_name):
    settings = Settings(file_name)
    settings.restore()
    return settings

class EgStore(object):
    

    def __init__(self, filename):
        

        self.filename = filename

    def restore(self):
        try:
            self._restore()
        except IOError as e:
            if e.errno != errno.ENOENT:
                raise


    def _restore(self):
        
        with open(self.filename, 'rb') as f:
            store = pickle.load(f)

        for key, value in store.__dict__.items():
            self.__dict__[key] = value

        self.last_time_restored = datetime.datetime.now()


    def store(self):
        

        with open(self.filename, 'wb') as f:
            self.last_time_stored = datetime.datetime.now()
            pickle.dump(self, f)


    def kill(self):
        

        if os.path.isfile(self.filename):
            os.remove(self.filename)

    def __getstate__(self):
        
        state = self.__dict__.copy()
        return state

    def __setstate__(self, state):
        
        if 'filename' in state:
            del state['filename']
        self.__dict__.update(state)

    def __str__(self):
        
        stored_values = self.__dict__
        lines = []
        width = max(len(key) for key in stored_values)
        for key in sorted(stored_values.keys()):
            value = stored_values[key]
            if isinstance(value, datetime.datetime):
                value = value.isoformat()
            lines.append('{0} : {1!r}'.format(key.ljust(width), value))
        return '\n'.join(lines)

    def __repr__(self):
        return '{0}({1!r})'.format(self.__class__.__name__, self.filename)


class Settings(EgStore):
    def __init__(self, filename):
        self.filename = filename
