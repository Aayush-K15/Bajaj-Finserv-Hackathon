

try:
    from .fillable_box import __fillablebox
    from .button_box import buttonbox
    from . import text_box as tb
    from . import utils as ut
except (SystemError, ValueError, ImportError):
    from fillable_box import __fillablebox
    from button_box import buttonbox
    import text_box as tb
    import utils as ut










def ynbox(msg="Shall I continue?", title=" ",
          choices=("[<F1>]Yes", "[<F2>]No"), image=None,
          default_choice='[<F1>]Yes', cancel_choice='[<F2>]No'):
    
    return boolbox(msg=msg,
                   title=title,
                   choices=choices,
                   image=image,
                   default_choice=default_choice,
                   cancel_choice=cancel_choice)






def ccbox(msg="Shall I continue?", title=" ",
          choices=("C[o]ntinue", "C[a]ncel"), image=None,
          default_choice='Continue', cancel_choice='Cancel'):
    
    return boolbox(msg=msg,
                   title=title,
                   choices=choices,
                   image=image,
                   default_choice=default_choice,
                   cancel_choice=cancel_choice)






def boolbox(msg="Shall I continue?", title=" ",
            choices=("[T]rue", "[F]alse"), image=None,
            default_choice='[T]rue', cancel_choice='[F]alse'):
    
    if len(choices) != 2:
        raise AssertionError(
            'boolbox() takes exactly 2 choices!  Consider using indexbox() instead.'
        )

    reply = buttonbox(msg=msg,
                      title=title,
                      choices=choices,
                      image=image,
                      default_choice=default_choice,
                      cancel_choice=cancel_choice)

    if reply == choices[0]:
        return True  
    elif reply == choices[1]:
        return False  
    elif reply is None:
        return None  

    assert False, "The user selected an unexpected response."





def indexbox(msg="Shall I continue?", title=" ",
             choices=("Yes", "No"), image=None,
             default_choice='Yes', cancel_choice='No'):
    
    reply = buttonbox(msg=msg,
                      title=title,
                      choices=choices,
                      image=image,
                      default_choice=default_choice,
                      cancel_choice=cancel_choice)
    if reply is None:
        return None
    for i, choice in enumerate(choices):
        if reply == choice:
            return i
    msg = ("There is a program logic error in the EasyGui code "
           "for indexbox.\nreply={0}, choices={1}".format(
               reply, choices))
    raise AssertionError(msg)





def msgbox(msg="(Your message goes here)", title=" ",
           ok_button="OK", image=None, root=None):
    
    if not isinstance(ok_button, ut.basestring):
        raise AssertionError(
            "The 'ok_button' argument to msgbox must be a string.")

    return buttonbox(msg=msg,
                     title=title,
                     choices=[ok_button],
                     image=image,
                     default_choice=ok_button,
                     cancel_choice=ok_button)


def convert_to_type(input_value, new_type, input_value_name=None):
    
    if input_value is None or new_type is None:
        return input_value

    exception_string = (
        'value {0}:{1} must be of type {2}.')
    ret_value = new_type(input_value)



    return ret_value





def integerbox(msg="", title=" ", default=None,
               lowerbound=0, upperbound=99, image=None, root=None):
    

    if not msg:
        msg = "Enter an integer between {0} and {1}".format(
            lowerbound, upperbound)

    
    
    default = convert_to_type(default, int, "default")
    lowerbound = convert_to_type(lowerbound, int, "lowerbound")
    upperbound = convert_to_type(upperbound, int, "upperbound")

    while True:
        reply = enterbox(msg, title, default, image=image, root=root)
        if reply is None:
            return None
        try:
            reply = convert_to_type(reply, int)
        except ValueError:
            msgbox('The value that you entered:\n\t"{}"\nis not an integer.'.format(reply), "Error")
            continue
        if lowerbound is not None:
            if reply < lowerbound:
                msgbox('The value that you entered is less than the lower bound of {}.'.format(lowerbound), "Error")
                continue
        if upperbound is not None:
            if reply > upperbound:
                msgbox('The value that you entered is greater than the upper bound of {}.'.format(upperbound), "Error")
                continue
        
        
        break
    return reply










def enterbox(msg="Enter something.", title=" ", default="",
             strip=True, image=None, root=None):
    
    result = __fillablebox(
        msg, title, default=default, mask=None, image=image, root=root)
    if result and strip:
        result = result.strip()
    return result


def passwordbox(msg="Enter your password.", title=" ", default="",
                image=None, root=None):
    
    return __fillablebox(msg, title, default, mask="*",
                         image=image, root=root)





def exceptionbox(msg=None, title=None):
    
    if title is None:
        title = "Error Report"
    if msg is None:
        msg = "An error (exception) has occurred in the program."

    codebox(msg, title, ut.exception_format())






def codebox(msg="", title=" ", text=""):
    
    return tb.textbox(msg, title, text, codebox=True)
