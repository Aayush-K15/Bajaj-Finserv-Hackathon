
from typing import final

from numpy._utils import set_module


@final  
@set_module("numpy.typing")
class NBitBase:
    
    

    def __init_subclass__(cls) -> None:
        allowed_names = {
            "NBitBase", "_128Bit", "_96Bit", "_64Bit", "_32Bit", "_16Bit", "_8Bit"
        }
        if cls.__name__ not in allowed_names:
            raise TypeError('cannot inherit from final class "NBitBase"')
        super().__init_subclass__()

@final
@set_module("numpy._typing")

class _128Bit(NBitBase):  
    pass

@final
@set_module("numpy._typing")
class _96Bit(_128Bit):  
    pass

@final
@set_module("numpy._typing")
class _64Bit(_96Bit):  
    pass

@final
@set_module("numpy._typing")
class _32Bit(_64Bit):  
    pass

@final
@set_module("numpy._typing")
class _16Bit(_32Bit):  
    pass

@final
@set_module("numpy._typing")
class _8Bit(_16Bit):  
    pass
