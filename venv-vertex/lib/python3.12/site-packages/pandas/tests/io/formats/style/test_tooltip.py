import numpy as np
import pytest

from pandas import DataFrame

pytest.importorskip("jinja2")
from pandas.io.formats.style import Styler


@pytest.fixture
def df():
    return DataFrame(
        data=[[0, 1, 2], [3, 4, 5], [6, 7, 8]],
        columns=["A", "B", "C"],
        index=["x", "y", "z"],
    )


@pytest.fixture
def styler(df):
    return Styler(df, uuid_len=0)


@pytest.mark.parametrize(
    "ttips",
    [
        DataFrame(  
            data=[["Min", "Max"], [np.nan, ""]],
            columns=["A", "C"],
            index=["x", "y"],
        ),
        DataFrame(  
            data=[["Max", "Min", "Bad-Col"]], columns=["C", "A", "D"], index=["x"]
        ),
    ],
)
def test_tooltip_render(ttips, styler):
    
    result = styler.set_tooltips(ttips).to_html()

    
    assert "

    
    assert "
    assert '
    assert 'class="data row0 col0" >0<span class="pd-t"></span></td>' in result

    
    assert "
    assert '
    assert 'class="data row0 col2" >2<span class="pd-t"></span></td>' in result

    
    assert "
    assert "
    assert "
    assert "
    assert "Bad-Col" not in result


def test_tooltip_ignored(styler):
    
    result = styler.to_html()  
    assert '<style type="text/css">\n</style>' in result
    assert '<span class="pd-t"></span>' not in result


def test_tooltip_css_class(styler):
    
    result = styler.set_tooltips(
        DataFrame([["tooltip"]], index=["x"], columns=["A"]),
        css_class="other-class",
        props=[("color", "green")],
    ).to_html()
    assert "
    assert '

    
    result = styler.set_tooltips(  
        DataFrame([["tooltip"]], index=["x"], columns=["A"]),
        css_class="another-class",
        props="color:green;color:red;",
    ).to_html()
    assert "
