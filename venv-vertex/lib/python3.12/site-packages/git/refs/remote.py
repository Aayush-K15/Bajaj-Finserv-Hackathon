




__all__ = ["RemoteReference"]

import os

from git.util import join_path

from .head import Head



from typing import Any, Iterator, NoReturn, TYPE_CHECKING, Union

from git.types import PathLike

if TYPE_CHECKING:
    from git.remote import Remote
    from git.repo import Repo




class RemoteReference(Head):
    

    _common_path_default = Head._remote_common_path_default

    @classmethod
    def iter_items(
        cls,
        repo: "Repo",
        common_path: Union[PathLike, None] = None,
        remote: Union["Remote", None] = None,
        *args: Any,
        **kwargs: Any,
    ) -> Iterator["RemoteReference"]:
        
        common_path = common_path or cls._common_path_default
        if remote is not None:
            common_path = join_path(common_path, str(remote))
        
        
        return super().iter_items(repo, common_path)

    
    
    
    
    @classmethod
    def delete(cls, repo: "Repo", *refs: "RemoteReference", **kwargs: Any) -> None:  
        
        repo.git.branch("-d", "-r", *refs)
        
        
        
        for ref in refs:
            try:
                os.remove(os.path.join(repo.common_dir, ref.path))
            except OSError:
                pass
            try:
                os.remove(os.path.join(repo.git_dir, ref.path))
            except OSError:
                pass
        

    @classmethod
    def create(cls, *args: Any, **kwargs: Any) -> NoReturn:
        
        raise TypeError("Cannot explicitly create remote references")
