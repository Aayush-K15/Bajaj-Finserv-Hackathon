






import locale
import os
import sys
import warnings

from gitdb.utils.encoding import force_bytes, force_text  



from typing import (
    Any,  
    AnyStr,
    Dict,  
    IO,  
    List,
    Optional,
    TYPE_CHECKING,
    Tuple,  
    Type,  
    Union,
    overload,
)




_deprecated_platform_aliases = {
    "is_win": os.name == "nt",
    "is_posix": os.name == "posix",
    "is_darwin": sys.platform == "darwin",
}


def _getattr(name: str) -> Any:
    try:
        value = _deprecated_platform_aliases[name]
    except KeyError:
        raise AttributeError(f"module {__name__!r} has no attribute {name!r}") from None

    warnings.warn(
        f"{__name__}.{name} and other is_<platform> aliases are deprecated. "
        "Write the desired os.name or sys.platform check explicitly instead.",
        DeprecationWarning,
        stacklevel=2,
    )
    return value


if not TYPE_CHECKING:  
    __getattr__ = _getattr


def __dir__() -> List[str]:
    return [*globals(), *_deprecated_platform_aliases]


is_win: bool


is_posix: bool


is_darwin: bool


defenc = sys.getfilesystemencoding()



@overload
def safe_decode(s: None) -> None: ...


@overload
def safe_decode(s: AnyStr) -> str: ...


def safe_decode(s: Union[AnyStr, None]) -> Optional[str]:
    
    if isinstance(s, str):
        return s
    elif isinstance(s, bytes):
        return s.decode(defenc, "surrogateescape")
    elif s is None:
        return None
    else:
        raise TypeError("Expected bytes or text, but got %r" % (s,))


@overload
def safe_encode(s: None) -> None: ...


@overload
def safe_encode(s: AnyStr) -> bytes: ...


def safe_encode(s: Optional[AnyStr]) -> Optional[bytes]:
    
    if isinstance(s, str):
        return s.encode(defenc)
    elif isinstance(s, bytes):
        return s
    elif s is None:
        return None
    else:
        raise TypeError("Expected bytes or text, but got %r" % (s,))


@overload
def win_encode(s: None) -> None: ...


@overload
def win_encode(s: AnyStr) -> bytes: ...


def win_encode(s: Optional[AnyStr]) -> Optional[bytes]:
    
    if isinstance(s, str):
        return s.encode(locale.getpreferredencoding(False))
    elif isinstance(s, bytes):
        return s
    elif s is not None:
        raise TypeError("Expected bytes or text, but got %r" % (s,))
    return None
