




__all__ = ["GitCmdObjectDB", "GitDB"]

from gitdb.base import OInfo, OStream
from gitdb.db import GitDB, LooseObjectDB
from gitdb.exc import BadObject

from git.util import bin_to_hex, hex_to_bin
from git.exc import GitCommandError



from typing import TYPE_CHECKING

from git.types import PathLike

if TYPE_CHECKING:
    from git.cmd import Git




class GitCmdObjectDB(LooseObjectDB):
    

    def __init__(self, root_path: PathLike, git: "Git") -> None:
        
        super().__init__(root_path)
        self._git = git

    def info(self, binsha: bytes) -> OInfo:
        
        hexsha, typename, size = self._git.get_object_header(bin_to_hex(binsha))
        return OInfo(hex_to_bin(hexsha), typename, size)

    def stream(self, binsha: bytes) -> OStream:
        
        hexsha, typename, size, stream = self._git.stream_object_data(bin_to_hex(binsha))
        return OStream(hex_to_bin(hexsha), typename, size, stream)

    

    def partial_to_complete_sha_hex(self, partial_hexsha: str) -> bytes:
        
        try:
            hexsha, _typename, _size = self._git.get_object_header(partial_hexsha)
            return hex_to_bin(hexsha)
        except (GitCommandError, ValueError) as e:
            raise BadObject(partial_hexsha) from e
        

    
