
import collections
import platform
import sys


def user_agent(name, version, extras=None):
    
    if extras is None:
        extras = []

    return UserAgentBuilder(
            name, version
        ).include_extras(
            extras
        ).include_implementation(
        ).include_system().build()


class UserAgentBuilder(object):
    

    format_string = '%s/%s'

    def __init__(self, name, version):
        
        self._pieces = collections.deque([(name, version)])

    def build(self):
        
        return " ".join([self.format_string % piece for piece in self._pieces])

    def include_extras(self, extras):
        
        if any(len(extra) != 2 for extra in extras):
            raise ValueError('Extras should be a sequence of two item tuples.')

        self._pieces.extend(extras)
        return self

    def include_implementation(self):
        
        self._pieces.append(_implementation_tuple())
        return self

    def include_system(self):
        
        self._pieces.append(_platform_tuple())
        return self


def _implementation_tuple():
    
    implementation = platform.python_implementation()

    if implementation == 'CPython':
        implementation_version = platform.python_version()
    elif implementation == 'PyPy':
        implementation_version = '%s.%s.%s' % (sys.pypy_version_info.major,
                                               sys.pypy_version_info.minor,
                                               sys.pypy_version_info.micro)
        if sys.pypy_version_info.releaselevel != 'final':
            implementation_version = ''.join([
                implementation_version, sys.pypy_version_info.releaselevel
                ])
    elif implementation == 'Jython':
        implementation_version = platform.python_version()  
    elif implementation == 'IronPython':
        implementation_version = platform.python_version()  
    else:
        implementation_version = 'Unknown'

    return (implementation, implementation_version)


def _implementation_string():
    return "%s/%s" % _implementation_tuple()


def _platform_tuple():
    try:
        p_system = platform.system()
        p_release = platform.release()
    except IOError:
        p_system = 'Unknown'
        p_release = 'Unknown'
    return (p_system, p_release)
