from contextvars import ContextVar
from typing import Optional
import sys
import threading

current_async_library_cvar = ContextVar(
    "current_async_library_cvar", default=None
)  


class _ThreadLocal(threading.local):
    
    
    
    name = None  


thread_local = _ThreadLocal()


class AsyncLibraryNotFoundError(RuntimeError):
    pass


def current_async_library() -> str:
    
    value = thread_local.name
    if value is not None:
        return value

    value = current_async_library_cvar.get()
    if value is not None:
        return value

    
    if "asyncio" in sys.modules:
        import asyncio
        try:
            current_task = asyncio.current_task  
        except AttributeError:
            current_task = asyncio.Task.current_task  
        try:
            if current_task() is not None:
                return "asyncio"
        except RuntimeError:
            pass

    
    if 'curio' in sys.modules:
        from curio.meta import curio_running
        if curio_running():
            return 'curio'

    raise AsyncLibraryNotFoundError(
        "unknown async library, or not in async context"
    )
