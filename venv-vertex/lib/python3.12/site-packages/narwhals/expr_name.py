from __future__ import annotations

from typing import TYPE_CHECKING, Callable, Generic, TypeVar

if TYPE_CHECKING:
    from narwhals.expr import Expr

ExprT = TypeVar("ExprT", bound="Expr")


class ExprNameNamespace(Generic[ExprT]):
    def __init__(self, expr: ExprT) -> None:
        self._expr = expr

    def keep(self) -> ExprT:
        r
        return self._expr._with_elementwise(
            lambda plx: self._expr._to_compliant_expr(plx).name.keep()
        )

    def map(self, function: Callable[[str], str]) -> ExprT:
        r
        return self._expr._with_elementwise(
            lambda plx: self._expr._to_compliant_expr(plx).name.map(function)
        )

    def prefix(self, prefix: str) -> ExprT:
        r
        return self._expr._with_elementwise(
            lambda plx: self._expr._to_compliant_expr(plx).name.prefix(prefix)
        )

    def suffix(self, suffix: str) -> ExprT:
        r
        return self._expr._with_elementwise(
            lambda plx: self._expr._to_compliant_expr(plx).name.suffix(suffix)
        )

    def to_lowercase(self) -> ExprT:
        r
        return self._expr._with_elementwise(
            lambda plx: self._expr._to_compliant_expr(plx).name.to_lowercase()
        )

    def to_uppercase(self) -> ExprT:
        r
        return self._expr._with_elementwise(
            lambda plx: self._expr._to_compliant_expr(plx).name.to_uppercase()
        )
