from __future__ import annotations  

from typing import (
    TYPE_CHECKING,  
    Any,  
    TypeVar,  
)

if TYPE_CHECKING:
    import sys
    from typing import Generic, Literal

    if sys.version_info >= (3, 10):
        from typing import TypeAlias
    else:
        from typing_extensions import TypeAlias

    import pyarrow as pa
    from pyarrow.__lib_pxi.table import (
        AggregateOptions,  
        Aggregation,  
    )
    from pyarrow._stubs_typing import (  
        Indices,  
        Mask,  
        Order,  
    )

    from narwhals._arrow.expr import ArrowExpr
    from narwhals._arrow.series import ArrowSeries

    IntoArrowExpr: TypeAlias = "ArrowExpr | ArrowSeries"
    TieBreaker: TypeAlias = Literal["min", "max", "first", "dense"]
    NullPlacement: TypeAlias = Literal["at_start", "at_end"]
    NativeIntervalUnit: TypeAlias = Literal[
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond",
        "microsecond",
        "nanosecond",
    ]

    ChunkedArrayAny: TypeAlias = pa.ChunkedArray[Any]
    ArrayAny: TypeAlias = pa.Array[Any]
    ArrayOrChunkedArray: TypeAlias = "ArrayAny | ChunkedArrayAny"
    ScalarAny: TypeAlias = pa.Scalar[Any]
    ArrayOrScalar: TypeAlias = "ArrayOrChunkedArray | ScalarAny"
    ArrayOrScalarT1 = TypeVar("ArrayOrScalarT1", ArrayAny, ChunkedArrayAny, ScalarAny)
    ArrayOrScalarT2 = TypeVar("ArrayOrScalarT2", ArrayAny, ChunkedArrayAny, ScalarAny)
    _AsPyType = TypeVar("_AsPyType")

    class _BasicDataType(pa.DataType, Generic[_AsPyType]): ...


Incomplete: TypeAlias = Any  

