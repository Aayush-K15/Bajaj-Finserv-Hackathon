from __future__ import annotations

from typing import TYPE_CHECKING, Any, Protocol, TypeVar, Union

if TYPE_CHECKING:
    import sys

    from narwhals.stable.v2 import DataFrame, LazyFrame

    if sys.version_info >= (3, 10):
        from typing import TypeAlias
    else:
        from typing_extensions import TypeAlias

    from narwhals.stable.v2 import Expr, Series

    
    
    
    class NativeFrame(Protocol):
        @property
        def columns(self) -> Any: ...

        def join(self, *args: Any, **kwargs: Any) -> Any: ...

    class NativeSeries(Protocol):
        def __len__(self) -> int: ...


IntoExpr: TypeAlias = Union["Expr", str, "Series[Any]"]


IntoDataFrame: TypeAlias = Union["NativeFrame", "DataFrame[Any]"]


IntoFrame: TypeAlias = Union["NativeFrame", "DataFrame[Any]", "LazyFrame[Any]"]


Frame: TypeAlias = Union["DataFrame[Any]", "LazyFrame[Any]"]


IntoSeries: TypeAlias = Union["Series[Any]", "NativeSeries"]


IntoFrameT = TypeVar("IntoFrameT", bound="IntoFrame")


IntoDataFrameT = TypeVar("IntoDataFrameT", bound="IntoDataFrame")


FrameT = TypeVar("FrameT", "DataFrame[Any]", "LazyFrame[Any]")


DataFrameT = TypeVar("DataFrameT", bound="DataFrame[Any]")


IntoSeriesT = TypeVar("IntoSeriesT", bound="IntoSeries")



__all__ = [
    "DataFrameT",
    "Frame",
    "FrameT",
    "IntoDataFrame",
    "IntoDataFrameT",
    "IntoExpr",
    "IntoFrame",
    "IntoFrameT",
    "IntoSeries",
    "IntoSeriesT",
]
