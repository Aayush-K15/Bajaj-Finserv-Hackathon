from __future__ import annotations

from collections.abc import Sequence

from ..frames import Frame
from ..typing import ExtensionName, ExtensionParameter


__all__ = ["Extension", "ClientExtensionFactory", "ServerExtensionFactory"]


class Extension:
    

    name: ExtensionName
    

    def decode(self, frame: Frame, *, max_size: int | None = None) -> Frame:
        
        raise NotImplementedError

    def encode(self, frame: Frame) -> Frame:
        
        raise NotImplementedError


class ClientExtensionFactory:
    

    name: ExtensionName
    

    def get_request_params(self) -> Sequence[ExtensionParameter]:
        
        raise NotImplementedError

    def process_response_params(
        self,
        params: Sequence[ExtensionParameter],
        accepted_extensions: Sequence[Extension],
    ) -> Extension:
        
        raise NotImplementedError


class ServerExtensionFactory:
    

    name: ExtensionName
    

    def process_request_params(
        self,
        params: Sequence[ExtensionParameter],
        accepted_extensions: Sequence[Extension],
    ) -> tuple[list[ExtensionParameter], Extension]:
        
        raise NotImplementedError
