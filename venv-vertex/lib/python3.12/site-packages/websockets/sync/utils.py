from __future__ import annotations

import time


__all__ = ["Deadline"]


class Deadline:
    

    def __init__(self, timeout: float | None) -> None:
        self.deadline: float | None
        if timeout is None:
            self.deadline = None
        else:
            self.deadline = time.monotonic() + timeout

    def timeout(self, *, raise_if_elapsed: bool = True) -> float | None:
        
        if self.deadline is None:
            return None
        timeout = self.deadline - time.monotonic()
        if raise_if_elapsed and timeout <= 0:
            raise TimeoutError("timed out")
        return timeout
