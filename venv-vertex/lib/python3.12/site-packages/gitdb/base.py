




from gitdb.util import bin_to_hex

from gitdb.fun import (
    type_id_to_type_map,
    type_to_type_id_map
)

__all__ = ('OInfo', 'OPackInfo', 'ODeltaPackInfo',
           'OStream', 'OPackStream', 'ODeltaPackStream',
           'IStream', 'InvalidOInfo', 'InvalidOStream')




class OInfo(tuple):

    
    __slots__ = tuple()

    def __new__(cls, sha, type, size):
        return tuple.__new__(cls, (sha, type, size))

    def __init__(self, *args):
        tuple.__init__(self)

    
    @property
    def binsha(self):
        
        return self[0]

    @property
    def hexsha(self):
        
        return bin_to_hex(self[0])

    @property
    def type(self):
        return self[1]

    @property
    def type_id(self):
        return type_to_type_id_map[self[1]]

    @property
    def size(self):
        return self[2]
    


class OPackInfo(tuple):

    
    __slots__ = tuple()

    def __new__(cls, packoffset, type, size):
        return tuple.__new__(cls, (packoffset, type, size))

    def __init__(self, *args):
        tuple.__init__(self)

    

    @property
    def pack_offset(self):
        return self[0]

    @property
    def type(self):
        return type_id_to_type_map[self[1]]

    @property
    def type_id(self):
        return self[1]

    @property
    def size(self):
        return self[2]

    


class ODeltaPackInfo(OPackInfo):

    
    __slots__ = tuple()

    def __new__(cls, packoffset, type, size, delta_info):
        return tuple.__new__(cls, (packoffset, type, size, delta_info))

    
    @property
    def delta_info(self):
        return self[3]
    


class OStream(OInfo):

    
    __slots__ = tuple()

    def __new__(cls, sha, type, size, stream, *args, **kwargs):
        
        return tuple.__new__(cls, (sha, type, size, stream))

    def __init__(self, *args, **kwargs):
        tuple.__init__(self)

    

    def read(self, size=-1):
        return self[3].read(size)

    @property
    def stream(self):
        return self[3]

    


class ODeltaStream(OStream):

    

    def __new__(cls, sha, type, size, stream, *args, **kwargs):
        
        return tuple.__new__(cls, (sha, type, size, stream))

    

    @property
    def size(self):
        return self[3].size

    


class OPackStream(OPackInfo):

    
    __slots__ = tuple()

    def __new__(cls, packoffset, type, size, stream, *args):
        
        return tuple.__new__(cls, (packoffset, type, size, stream))

    
    def read(self, size=-1):
        return self[3].read(size)

    @property
    def stream(self):
        return self[3]
    


class ODeltaPackStream(ODeltaPackInfo):

    
    __slots__ = tuple()

    def __new__(cls, packoffset, type, size, delta_info, stream):
        return tuple.__new__(cls, (packoffset, type, size, delta_info, stream))

    
    def read(self, size=-1):
        return self[4].read(size)

    @property
    def stream(self):
        return self[4]
    


class IStream(list):

    
    __slots__ = tuple()

    def __new__(cls, type, size, stream, sha=None):
        return list.__new__(cls, (sha, type, size, stream, None))

    def __init__(self, type, size, stream, sha=None):
        list.__init__(self, (sha, type, size, stream, None))

    
    @property
    def hexsha(self):
        
        return bin_to_hex(self[0])

    def _error(self):
        
        return self[4]

    def _set_error(self, exc):
        
        self[4] = exc

    error = property(_error, _set_error)

    

    

    def read(self, size=-1):
        
        return self[3].read(size)

    

    

    def _set_binsha(self, binsha):
        self[0] = binsha

    def _binsha(self):
        return self[0]

    binsha = property(_binsha, _set_binsha)

    def _type(self):
        return self[1]

    def _set_type(self, type):
        self[1] = type

    type = property(_type, _set_type)

    def _size(self):
        return self[2]

    def _set_size(self, size):
        self[2] = size

    size = property(_size, _set_size)

    def _stream(self):
        return self[3]

    def _set_stream(self, stream):
        self[3] = stream

    stream = property(_stream, _set_stream)

    


class InvalidOInfo(tuple):

    
    __slots__ = tuple()

    def __new__(cls, sha, exc):
        return tuple.__new__(cls, (sha, exc))

    def __init__(self, sha, exc):
        tuple.__init__(self, (sha, exc))

    @property
    def binsha(self):
        return self[0]

    @property
    def hexsha(self):
        return bin_to_hex(self[0])

    @property
    def error(self):
        
        return self[1]


class InvalidOStream(InvalidOInfo):

    
    __slots__ = tuple()


