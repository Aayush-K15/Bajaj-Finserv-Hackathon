

from __future__ import annotations

from collections.abc import Mapping as Mapping
from typing import TYPE_CHECKING, Any, Protocol

try:
    from typing_extensions import TypeVar
except ImportError:  
    from typing import TypeVar

if TYPE_CHECKING:
    from referencing._core import Resolved, Resolver, Resource


URI = str


D = TypeVar("D", default=Any)


class Retrieve(Protocol[D]):
    

    def __call__(self, uri: URI) -> Resource[D]:
        
        ...


class Anchor(Protocol[D]):
    

    @property
    def name(self) -> str:
        
        ...

    def resolve(self, resolver: Resolver[D]) -> Resolved[D]:
        
        ...
