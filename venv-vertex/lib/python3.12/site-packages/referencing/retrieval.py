

from __future__ import annotations

from functools import lru_cache
from typing import TYPE_CHECKING, Callable
import json

try:
    from typing_extensions import TypeVar
except ImportError:  
    from typing import TypeVar

from referencing import Resource

if TYPE_CHECKING:
    from referencing.typing import URI, D, Retrieve


_T = TypeVar("_T", default=str)


def to_cached_resource(
    cache: Callable[[Retrieve[D]], Retrieve[D]] | None = None,
    loads: Callable[[_T], D] = json.loads,
    from_contents: Callable[[D], Resource[D]] = Resource.from_contents,
) -> Callable[[Callable[[URI], _T]], Retrieve[D]]:
    
    if cache is None:
        cache = lru_cache(maxsize=None)

    def decorator(retrieve: Callable[[URI], _T]):
        @cache
        def cached_retrieve(uri: URI):
            response = retrieve(uri)
            contents = loads(response)
            return from_contents(contents)

        return cached_retrieve

    return decorator
