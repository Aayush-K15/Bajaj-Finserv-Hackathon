__all__ = [
    'TaskRequest',
]


import functools
import logging

from typing import cast, Optional

from .. import constants
from ..enums import ErrorBehavior, TaskMode, TaskRequestType
from ..exceptions import StandardViolationError
from .message_base import MessageBase
from .task import Task


logger = logging.getLogger(__name__)
logger.addHandler(logging.NullHandler())


class TaskRequest(MessageBase):
    

    @property
    def headerFormatProperties(self) -> constants.HEADER_FORMAT_TYPE:
        
        
        
        return None

    @functools.cached_property
    def processed(self) -> bool:
        
        return bool(self.getPropertyVal('7D01000B'))

    @functools.cached_property
    def taskMode(self) -> Optional[TaskMode]:
        
        return self.getNamedAs('8518', constants.ps.PSETID_COMMON, TaskMode)

    @functools.cached_property
    def taskObject(self) -> Optional[Task]:
        
        
        
        
        
        
        task = next(((index, att) for index, att in enumerate(self.attachments) if isinstance(att.data, Task)), None)

        if task is None:
            if ErrorBehavior.STANDARDS_VIOLATION in self.errorBehavior:
                logger.error('Task object not found on TaskRequest object.')
                return None
            raise StandardViolationError('Task object not found on TaskRequest object.')

        
        
        if task[0] != 0:
            logger.warning('Embedded task object was not located at index 0.')

        return cast(Task, task[1])

    @functools.cached_property
    def taskRequestType(self) -> Optional[TaskRequestType]:
        
        return self.getStringStreamAs('__substg1.0_001A', TaskRequestType.fromClassType)
