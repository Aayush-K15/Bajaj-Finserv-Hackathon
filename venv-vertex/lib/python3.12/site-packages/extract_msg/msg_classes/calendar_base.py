__all__ = [
    'CalendarBase',
]


import datetime
import enum
import functools
import logging

from typing import List, Optional, Type, Union

from ..constants import ps
from ..enums import AppointmentAuxilaryFlag, AppointmentColor, AppointmentStateFlag, BusyStatus, IconIndex, MeetingRecipientType, ResponseStatus
from .message_base import MessageBase
from ..structures.entry_id import EntryID
from ..structures.misc_id import GlobalObjectID
from ..structures.recurrence_pattern import RecurrencePattern
from ..structures.time_zone_definition import TimeZoneDefinition
from ..structures.time_zone_struct import TimeZoneStruct


logger = logging.getLogger(__name__)
logger.addHandler(logging.NullHandler())


class CalendarBase(MessageBase):
    

    @functools.cached_property
    def allAttendeesString(self) -> Optional[str]:
        
        return self.getNamedProp('8238', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def appointmentAuxilaryFlags(self) -> Optional[AppointmentAuxilaryFlag]:
        
        return self.getNamedAs('8207', ps.PSETID_APPOINTMENT, AppointmentAuxilaryFlag)

    @functools.cached_property
    def appointmentColor(self) -> Optional[AppointmentColor]:
        
        return self.getNamedAs('8214', ps.PSETID_APPOINTMENT, AppointmentColor)

    @functools.cached_property
    def appointmentDuration(self) -> Optional[int]:
        
        return self.getNamedProp('8213', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def appointmentEndWhole(self) -> Optional[datetime.datetime]:
        
        return self.getNamedProp('820E', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def appointmentNotAllowPropose(self) -> bool:
        
        return bool(self.getNamedProp('8259', ps.PSETID_APPOINTMENT))

    @functools.cached_property
    def appointmentRecur(self) -> Optional[RecurrencePattern]:
        
        return self.getNamedAs('8216', ps.PSETID_APPOINTMENT, RecurrencePattern)

    @functools.cached_property
    def appointmentSequence(self) -> Optional[int]:
        
        return self.getNamedProp('8201', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def appointmentStartWhole(self) -> Optional[datetime.datetime]:
        
        return self.getNamedProp('820D', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def appointmentStateFlags(self) -> Optional[AppointmentStateFlag]:
        
        return self.getNamedAs('8217', ps.PSETID_APPOINTMENT, AppointmentStateFlag)

    @functools.cached_property
    def appointmentSubType(self) -> bool:
        
        return bool(self.getNamedProp('8215', ps.PSETID_APPOINTMENT))

    @functools.cached_property
    def appointmentTimeZoneDefinitionEndDisplay(self) -> Optional[TimeZoneDefinition]:
        
        return self.getNamedAs('825F', ps.PSETID_APPOINTMENT, TimeZoneDefinition)

    @functools.cached_property
    def appointmentTimeZoneDefinitionRecur(self) -> Optional[TimeZoneDefinition]:
        
        return self.getNamedAs('8260', ps.PSETID_APPOINTMENT, TimeZoneDefinition)

    @functools.cached_property
    def appointmentTimeZoneDefinitionStartDisplay(self) -> Optional[TimeZoneDefinition]:
        
        return self.getNamedAs('825E', ps.PSETID_APPOINTMENT, TimeZoneDefinition)

    @functools.cached_property
    def appointmentUnsendableRecipients(self) -> Optional[bytes]:
        
        return self.getNamedProp('825D', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def bcc(self) -> Optional[str]:
        
        return self._genRecipient('bcc', MeetingRecipientType.SENDABLE_RESOURCE_OBJECT)

    @functools.cached_property
    def birthdayContactAttributionDisplayName(self) -> Optional[str]:
        
        return self.getNamedProp('BirthdayContactAttributionDisplayName', ps.PSETID_ADDRESS)

    @functools.cached_property
    def birthdayContactEntryID(self) -> Optional[EntryID]:
        
        return self.getNamedAs('BirthdayContactEntryId', ps.PSETID_ADDRESS, EntryID.autoCreate)

    @functools.cached_property
    def birthdayContactPersonGuid(self) -> Optional[bytes]:
        
        return self.getNamedProp('BirthdayContactPersonGuid', ps.PSETID_ADDRESS)

    @functools.cached_property
    def busyStatus(self) -> Optional[BusyStatus]:
        
        return self.getNamedAs('8205', ps.PSETID_APPOINTMENT, BusyStatus)

    @functools.cached_property
    def cc(self) -> Optional[str]:
        
        return self._genRecipient('cc', MeetingRecipientType.SENDABLE_OPTIONAL_ATTENDEE)

    @functools.cached_property
    def ccAttendeesString(self) -> Optional[str]:
        
        return self.getNamedProp('823C', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def cleanGlobalObjectID(self) -> Optional[GlobalObjectID]:
        
        return self.getNamedAs('0023', ps.PSETID_MEETING, GlobalObjectID)

    @functools.cached_property
    def clipEnd(self) -> Optional[datetime.datetime]:
        
        return self.getNamedProp('8236', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def clipStart(self) -> Optional[datetime.datetime]:
        
        return self.getNamedProp('8235', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def commonEnd(self) -> Optional[datetime.datetime]:
        
        return self.getNamedProp('8517', ps.PSETID_COMMON)

    @functools.cached_property
    def commonStart(self) -> Optional[datetime.datetime]:
        
        return self.getNamedProp('8516', ps.PSETID_COMMON)

    @functools.cached_property
    def endDate(self) -> Optional[datetime.datetime]:
        
        return self.getPropertyVal('00610040')

    @functools.cached_property
    def globalObjectID(self) -> Optional[GlobalObjectID]:
        
        return self.getNamedAs('0003', ps.PSETID_MEETING, GlobalObjectID)

    @functools.cached_property
    def iconIndex(self) -> Optional[Union[IconIndex, int]]:
        
        return self.getPropertyAs('10800003', IconIndex.tryMake)

    @functools.cached_property
    def isBirthdayContactWritable(self) -> bool:
        
        return bool(self.getNamedProp('IsBirthdayContactWritable', ps.PSETID_ADDRESS))
    @functools.cached_property
    def isException(self) -> bool:
        
        return bool(self.getNamedProp('000A', ps.PSETID_MEETING))

    @functools.cached_property
    def isRecurring(self) -> bool:
        
        return bool(self.getNamedProp('0005', ps.PSETID_MEETING))

    @functools.cached_property
    def keywords(self) -> Optional[List[str]]:
        
        return self.getNamedProp('Keywords', ps.PS_PUBLIC_STRINGS)

    @functools.cached_property
    def linkedTaskItems(self) -> Optional[List[EntryID]]:
        
        return self.getNamedAs('820C', ps.PSETID_APPOINTMENT, lambda x: list(EntryID.autoCreate(y) for y in x))

    @functools.cached_property
    def location(self) -> Optional[str]:
        
        return self.getNamedProp('8208', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def meetingDoNotForward(self) -> bool:
        
        return bool(self.getNamedProp('DoNotForward', ps.PS_PUBLIC_STRINGS))

    @functools.cached_property
    def meetingWorkspaceUrl(self) -> Optional[str]:
        
        return self.getNamedProp('8209', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def nonSendableBcc(self) -> Optional[str]:
        
        return self.getNamedProp('8538', ps.PSETID_COMMON)

    @functools.cached_property
    def nonSendableCc(self) -> Optional[str]:
        
        return self.getNamedProp('8537', ps.PSETID_COMMON)

    @functools.cached_property
    def nonSendableTo(self) -> Optional[str]:
        
        return self.getNamedProp('8536', ps.PSETID_COMMON)

    @functools.cached_property
    def nonSendBccTrackStatus(self) -> Optional[List[ResponseStatus]]:
        
        return self.getNamedAs('8545', ps.PSETID_COMMON, ResponseStatus.fromIter)

    @functools.cached_property
    def nonSendCcTrackStatus(self) -> Optional[List[ResponseStatus]]:
        
        return self.getNamedAs('8544', ps.PSETID_COMMON, ResponseStatus.fromIter)

    @functools.cached_property
    def nonSendToTrackStatus(self) -> Optional[List[ResponseStatus]]:
        
        return self.getNamedAs('8543', ps.PSETID_COMMON, ResponseStatus.fromIter)

    @functools.cached_property
    def optionalAttendees(self) -> Optional[str]:
        
        return self.getNamedProp('0007', ps.PSETID_MEETING)

    @property
    def organizer(self) -> Optional[str]:
        
        return self.getStringStream('__substg1.0_0042')

    @functools.cached_property
    def ownerAppointmentID(self) -> Optional[int]:
        
        return self.getPropertyVal('00620003')

    @functools.cached_property
    def ownerCriticalChange(self) -> Optional[datetime.datetime]:
        
        return self.getNamedProp('001A', ps.PSETID_MEETING)

    @property
    def recipientTypeClass(self) -> Type[enum.IntEnum]:
        return MeetingRecipientType

    @functools.cached_property
    def recurrencePattern(self) -> Optional[str]:
        
        return self.getNamedProp('8232', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def recurring(self) -> bool:
        
        return bool(self.getNamedProp('8223', ps.PSETID_APPOINTMENT))

    @functools.cached_property
    def replyRequested(self) -> bool:
        
        return bool(self.getPropertyVal('0C17000B'))

    @functools.cached_property
    def requiredAttendees(self) -> Optional[str]:
        
        return self.getNamedProp('0006', ps.PSETID_MEETING)

    @functools.cached_property
    def resourceAttendees(self) -> Optional[str]:
        
        return self.getNamedProp('0008', ps.PSETID_MEETING)

    @functools.cached_property
    def responseStatus(self) -> ResponseStatus:
        
        return ResponseStatus(self.getNamedProp('8218', ps.PSETID_APPOINTMENT, 0))

    @functools.cached_property
    def startDate(self) -> Optional[datetime.datetime]:
        
        return self.getPropertyVal('00600040')

    @functools.cached_property
    def timeZoneDescription(self) -> Optional[str]:
        
        return self.getNamedProp('8234', ps.PSETID_APPOINTMENT)

    @functools.cached_property
    def timeZoneStruct(self) -> Optional[TimeZoneStruct]:
        
        return self.getNamedAs('8233', ps.PSETID_APPOINTMENT, TimeZoneStruct)

    @functools.cached_property
    def to(self) -> Optional[str]:
        
        return self._genRecipient('to', MeetingRecipientType.SENDABLE_REQUIRED_ATTENDEE)

    @functools.cached_property
    def toAttendeesString(self) -> Optional[str]:
        
        return self.getNamedProp('823B', ps.PSETID_APPOINTMENT)
