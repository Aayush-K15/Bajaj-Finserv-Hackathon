from __future__ import annotations




__all__ = [
    
    'CustomAttachmentHandler',
    'LinkedObjectAttachment',
    'OutlookImageDIB',
    'OutlookImageMetafile',

    
    'getHandler',
    'registerHandler',
]


from typing import List, Type, TYPE_CHECKING

from .custom_handler import CustomAttachmentHandler
from ...exceptions import FeatureNotImplemented



_knownHandlers: List[Type[CustomAttachmentHandler]] = []

def registerHandler(handler: Type[CustomAttachmentHandler]) -> None:
    
    
    if not isinstance(handler, type):
        raise ValueError(':param handler: must be a class, not an instance of a class.')
    if not issubclass(handler, CustomAttachmentHandler): 
        raise ValueError(':param handler: must be a subclass of CustomAttachmentHandler.')
    _knownHandlers.append(handler)




from .outlook_image_dib import OutlookImageDIB
from .outlook_image_meta import OutlookImageMetafile
from .lnk_obj_att import LinkedObjectAttachment


if TYPE_CHECKING:
    from ..attachment_base import AttachmentBase



def getHandler(attachment: AttachmentBase) -> CustomAttachmentHandler:
    
    for handler in _knownHandlers:
        if handler.isCorrectHandler(attachment):
            return handler(attachment)

    raise FeatureNotImplemented(f'No valid handler could be found for the attachment. Contact the developers for help. If the CLSID is not all zeros, include it in the title or message. (CLSID: {attachment.clsid})')
