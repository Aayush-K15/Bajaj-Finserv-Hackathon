from __future__ import annotations


__all__ = [
    'CustomAttachmentHandler',
]


import abc
import functools

from typing import Dict, Optional, TYPE_CHECKING, TypeVar

from ...constants import MSG_PATH, OVERRIDE_CLASS
from ...structures.odt import ODTStruct
from ...structures.ole_pres import OLEPresentationStream
from ...structures.ole_stream_struct import OleStreamStruct
from ...utils import msgPathToString


if TYPE_CHECKING:
    from ..attachment_base import AttachmentBase

_T = TypeVar('_T')


class CustomAttachmentHandler(abc.ABC):
    

    def __init__(self, attachment: AttachmentBase):
        super().__init__()
        self.__att = attachment

    def getStream(self, filename: MSG_PATH) -> Optional[bytes]:
        
        return self.attachment.getStream('__substg1.0_3701000D/' + msgPathToString(filename))

    def getStreamAs(self, streamID: MSG_PATH, overrideClass: OVERRIDE_CLASS[_T]) -> Optional[_T]:
        
        value = self.getStream(streamID)

        if value is not None:
            value = overrideClass(value)

        return value

    @classmethod
    @abc.abstractmethod
    def isCorrectHandler(cls, attachment: AttachmentBase) -> bool:
        

    @abc.abstractmethod
    def generateRtf(self) -> Optional[bytes]:
        

    @property
    def attachment(self) -> AttachmentBase:
        
        return self.__att

    @property
    @abc.abstractmethod
    def data(self) -> Optional[bytes]:
        

    @property
    @abc.abstractmethod
    def name(self) -> Optional[str]:
        

    @property
    @abc.abstractmethod
    def obj(self) -> Optional[object]:
        

    @functools.cached_property
    def objInfo(self) -> Optional[ODTStruct]:
        
        return self.getStreamAs('\x03ObjInfo', ODTStruct)

    @functools.cached_property
    def ole(self) -> Optional[OleStreamStruct]:
        
        return self.getStreamAs('\x01Ole', OleStreamStruct)

    @functools.cached_property
    def presentationObjs(self) -> Optional[Dict[int, OLEPresentationStream]]:
        
        return {
            int(x[1][-3:]): self.getStreamAs(x[-1], OLEPresentationStream)
            for x in self.attachment.listDir()
            if x[0] == '__substg1.0_3701000D' and x[1].startswith('\x02OlePres')
        }