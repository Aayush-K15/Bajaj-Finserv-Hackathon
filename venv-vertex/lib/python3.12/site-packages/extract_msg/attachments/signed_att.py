from __future__ import annotations


__all__ = [
    'SignedAttachment',
]


import email.message
import logging
import os
import pathlib
import weakref
import zipfile

from typing import List, Optional, Type, TYPE_CHECKING, Union

from .. import constants
from ..enums import AttachmentType, SaveType
from ..open_msg import openMsg
from ..utils import createZipOpen, inputToString, makeWeakRef, prepareFilename



if TYPE_CHECKING:
    from ..msg_classes.msg import MSGFile

logger = logging.getLogger(__name__)
logger.addHandler(logging.NullHandler())


class SignedAttachment:
    def __init__(self, msg, data: bytes, name: str, mimetype: str, node: email.message.Message):
        
        self.__asBytes = data
        self.__name = name
        self.__mimetype = mimetype
        self.__msg = makeWeakRef(msg)
        self.__node = node
        self.__treePath = msg.treePath + [makeWeakRef(self)]

        self.__data = b''
        
        
        
        if data[:8] == b'\xD0\xCF\x11\xE0\xA1\xB1\x1A\xE1':
            try:
                
                
                
                
                self.__data = openMsg(data, treePath = self.__treePath, **msg.kwargs)
            except Exception:
                logger.exception('Signed message was an OLE file, but could not be read as an MSG file due to an exception.')

        if not self.__data:
            self.__data = data

    def _handleFnc(self, _zip, filename, customPath: pathlib.Path, kwargs) -> pathlib.Path:
        
        fullFilename = customPath / filename

        overwriteExisting = kwargs.get('overwriteExisting', False)

        if _zip:
            
            if not overwriteExisting:
                name, ext = os.path.splitext(filename)
                nameList = _zip.namelist()
                if str(fullFilename).replace('\\', '/') in nameList:
                    for i in range(2, 100):
                        testName = customPath / f'{name} ({i}){ext}'
                        if str(testName).replace('\\', '/') not in nameList:
                            return testName
                    else:
                        
                        raise FileExistsError(f'Could not create the specified file because it already exists ("{fullFilename}").')
        else:
            if not overwriteExisting and fullFilename.exists():
                
                name, ext = os.path.splitext(filename)
                
                for i in range(2, 100):
                    testName = customPath / f'{name} ({i}){ext}'
                    if not testName.exists():
                        return testName
                else:
                    
                    raise FileExistsError(f'Could not create the specified file because it already exists ("{fullFilename}").')

        return fullFilename

    def save(self, **kwargs) -> constants.SAVE_TYPE:
        
        
        
        if self.type is AttachmentType.SIGNED_EMBEDDED and kwargs.get('skipEmbedded'):
            return (SaveType.NONE, None)

        
        
        if (self.type is AttachmentType.SIGNED_EMBEDDED and
            not kwargs.get('extractEmbedded', False)):
            return self.saveEmbededMessage(**kwargs)

        
        filename = self.name

        
        filename = prepareFilename(inputToString(filename, self.msg.stringEncoding))

        
        maxNameLength = kwargs.get('maxNameLength', 256)

        
        if len(filename) > maxNameLength:
            name, ext = os.path.splitext(filename)
            filename = name[:maxNameLength - len(ext)] + ext

        
        _zip = kwargs.get('zip')

        createdZip = True
        try:
            
            if _zip:
                
                
                if isinstance(_zip, (str, pathlib.Path)):
                    
                    _zip = zipfile.ZipFile(_zip, 'a', zipfile.ZIP_DEFLATED)
                    kwargs['zip'] = _zip
                    createdZip = True
                else:
                    createdZip = False
                
                
                customPath = pathlib.Path(kwargs.get('customPath', ''))
                
                _open = createZipOpen(_zip.open)
                
                mode = 'w'
            else:
                customPath = pathlib.Path(kwargs.get('customPath', '.')).absolute()
                mode = 'wb'
                _open = open

            fullFilename = self._handleFnc(_zip, filename, customPath, kwargs)

            if self.type is AttachmentType.DATA:
                with _open(str(fullFilename), mode) as f:
                    f.write(self.__data)

                return (SaveType.FILE, str(fullFilename))
            else:
                with _open(str(fullFilename), mode) as f:
                    
                    f.write(self.__asBytes)
                return (SaveType.FILE, str(fullFilename))
        finally:
            
            if _zip and createdZip:
                _zip.close()

    def saveEmbededMessage(self, **kwargs) -> constants.SAVE_TYPE:
        
        return self.data.save(**kwargs)

    @property
    def asBytes(self) -> bytes:
        return self.__asBytes

    @property
    def contentID(self) -> None:
        return None

    cid = contentID

    @property
    def data(self) -> Union[bytes, MSGFile]:
        
        return self.__data

    @property
    def dataType(self) -> Optional[Type[type]]:
        
        try:
            return None if self.data is None else self.data.__class__
        except Exception:
            
            return None

    @property
    def emailMessage(self) -> email.message.Message:
        
        return self.__node

    @property
    def mimetype(self) -> str:
        
        return self.__mimetype

    @property
    def msg(self) -> MSGFile:
        
        if (msg := self.__msg()) is None:
            raise ReferenceError('The MSGFile for this Attachment instance has been garbage collected.')
        return msg

    @property
    def name(self) -> str:
        
        return self.__name

    longFilename = name
    shortFilename = name

    @property
    def treePath(self) -> List[weakref.ReferenceType]:
        
        return self.__treePath

    @property
    def type(self) -> AttachmentType:
        return AttachmentType.SIGNED if isinstance(self.__data, bytes) else AttachmentType.SIGNED_EMBEDDED
