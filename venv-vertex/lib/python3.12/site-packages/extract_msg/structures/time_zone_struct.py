__all__ = [
    'TimeZoneStruct',
]


from typing import Optional

from .. import constants
from .system_time import SystemTime


class TimeZoneStruct:
    

    def __init__(self, data: Optional[bytes] = None):
        if not data:
            self.__bias = 0
            self.__standardBias = 0
            self.__daylightBias = 0
            self.__standardDate = SystemTime()
            self.__daylightDate = SystemTime()

            return
        unpacked = constants.st.ST_TZ.unpack(data)
        self.__bias = unpacked[0]
        self.__standardBias = unpacked[1]
        self.__daylightBias = unpacked[2]
        self.__standardDate = SystemTime(unpacked[4])
        self.__daylightDate = SystemTime(unpacked[6])

    def __bytes__(self) -> bytes:
        return self.toBytes()

    def toBytes(self) -> bytes:
        return constants.st.ST_TZ.pack(self.__bias,
                                       self.__standardBias,
                                       self.__daylightBias,
                                       self.standardYear,
                                       bytes(self.__standardDate),
                                       self.daylightYear,
                                       bytes(self.__daylightDate))

    @property
    def bias(self) -> int:
        
        return self.__bias

    @property
    def daylightBias(self) -> int:
        
        return self.__daylightBias

    @property
    def daylightDate(self) -> SystemTime:
        
        return self.__daylightDate

    @property
    def daylightYear(self) -> int:
        
        return self.__daylightDate.year

    @property
    def standardBias(self) -> int:
        
        return self.__standardBias

    @property
    def standardDate(self) -> SystemTime:
        
        return self.__standardDate

    @property
    def standardYear(self) -> int:
        
        return self.__standardDate.year
