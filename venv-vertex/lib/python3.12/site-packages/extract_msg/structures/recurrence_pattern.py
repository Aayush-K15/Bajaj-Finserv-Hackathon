__all__ = [
    'RecurrencePattern',
]


from typing import Any, Tuple

from ..enums import RecurCalendarType, RecurDOW, RecurEndType, RecurFrequency, RecurMonthNthWeek, RecurPatternType, RecurPatternTypeSpecificWeekday
from ._helpers import BytesReader


class RecurrencePattern:
    

    def __init__(self, data: bytes):
        self.__rawData = data
        reader = BytesReader(data)
        self.__readerVersion = reader.readUnsignedShort()
        self.__writerVersion = reader.readUnsignedShort()
        if not (self.__readerVersion == self.__writerVersion == 0x3004):
            raise ValueError('Reader version or writer version was not set to 0x3004.')

        self.__recurFrequency = RecurFrequency(reader.readUnsignedShort())
        self.__patternType = RecurPatternType(reader.readUnsignedShort())
        self.__calendarType = RecurCalendarType(reader.readUnsignedShort())
        self.__firstDateTime = reader.readUnsignedInt()
        self.__period = reader.readUnsignedInt()
        self.__slidingFlag = reader.readUnsignedInt()
        
        RPTSW = RecurPatternTypeSpecificWeekday
        
        if self.__patternType == RecurPatternType.DAY:
            self.__patternTypeSpecific = None
        elif self.__patternType == RecurPatternType.WEEK:
            self.__patternTypeSpecific = RPTSW(reader.readUnsignedInt())
        elif self.__patternType in (RecurPatternType.MONTH_NTH, RecurPatternType.HJ_MONTH_NTH):
            self.__patternTypeSpecific = reader.readUnsignedInt()
        else:
            self.__patternTypeSpecific = (RPTSW(reader.readUnsignedInt()),
                                          RecurMonthNthWeek(reader.readUnsignedInt()))

        self.__endType = RecurEndType.fromInt(reader.readUnsignedInt())
        self.__occurrenceCount = reader.readUnsignedInt()
        self.__firstDOW = RecurDOW(reader.readUnsignedInt())
        deletedInstanceCount = reader.readUnsignedInt()
        self.__deletedInstanceDates = tuple(reader.readUnsignedInt() for _ in range(deletedInstanceCount))
        modifiedInstanceCount = reader.readUnsignedInt()
        self.__modifiedInstanceDates = tuple(reader.readUnsignedInt() for _ in range(modifiedInstanceCount))
        self.__startDate = reader.readUnsignedInt()
        self.__endDate = reader.readUnsignedInt()

    def __bytes__(self) -> bytes:
        return self.toBytes()

    def toBytes(self) -> bytes:
        return self.__rawData

    @property
    def calendarType(self) -> RecurCalendarType:
        
        return self.__calendarType

    @property
    def deletedInstanceDates(self) -> Tuple[int, ...]:
        
        return self.__deletedInstanceDates

    @property
    def endDate(self) -> int:
        
        return self.__endDate

    @property
    def endType(self) -> RecurEndType:
        
        return self.__endType

    @property
    def firstDateTime(self) -> int:
        
        return self.__firstDateTime

    @property
    def firstDayOfWeek(self) -> RecurDOW:
        
        return self.__firstDOW

    @property
    def modifiedInstanceDates(self) -> Tuple[int, ...]:
        
        return self.__modifiedInstanceDates

    @property
    def occurrenceCount(self) -> int:
        
        return self.__occurrenceCount

    @property
    def patternType(self) -> RecurPatternType:
        
        return self.__patternType

    @property
    def patternTypeSpecific(self) -> Any:
        
        return self.__patternTypeSpecific

    @property
    def period(self) -> int:
        
        return self.__period

    @property
    def readerVersion(self) -> int:
        return self.__readerVersion

    @property
    def recurFrequency(self) -> RecurFrequency:
        
        return self.__recurFrequency

    @property
    def slidingFlag(self) -> int:
        return self.__slidingFlag

    @property
    def startDate(self) -> int:
        
        return self.__startDate

    @property
    def writerVersion(self) -> int:
        return self.__writerVersion
