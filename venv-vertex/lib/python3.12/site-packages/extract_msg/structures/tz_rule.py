__all__ = [
    'TZRule',
]


import logging

from struct import Struct
from typing import Final, final, Optional

from ..enums import TZFlag
from ._helpers import BytesReader
from .system_time import SystemTime


logger = logging.getLogger(__name__)
logger.addHandler(logging.NullHandler())


@final
class TZRule:
    

    __SIZE__: int = 66
    __struct: Final[Struct] = Struct('4B2H14x3i16s16s')

    def __init__(self, data: Optional[bytes] = None):
        if not data:
            self.__majorVersion = 2
            self.__minorVersion = 1
            self.__flags = TZFlag(0)
            self.__year = 0
            self.__bias = 0
            self.__standardBias = 0
            self.__daylightBias = 0
            self.__standardDate = SystemTime()
            self.__daylightDate = SystemTime()
            return

        reader = BytesReader(data)
        self.__majorVersion = reader.readUnsignedByte()
        self.__minorVersion = reader.readUnsignedByte()
        reader.assertRead(b'\x3E\x00')
        self.__flags = TZFlag(reader.readUnsignedShort())
        self.__year = reader.readUnsignedShort()
        
        
        if any(b := reader.read(14)):
            logger.warning(f'Read TZRule with non-null X section (got {b}).')
        self.__bias = reader.readInt()
        self.__standardBias = reader.readInt()
        self.__daylightBias = reader.readInt()
        self.__standardDate = SystemTime(reader.read(16))
        self.__daylightDate = SystemTime(reader.read(16))

    def __bytes__(self) -> bytes:
        return self.toBytes()

    def toBytes(self) -> bytes:
        return self.__struct.pack(self.__majorVersion,
                                  self.__minorVersion,
                                  62,
                                  0,
                                  self.__flags,
                                  self.__year,
                                  self.__bias,
                                  self.__standardBias,
                                  self.__daylightBias,
                                  bytes(self.__standardDate),
                                  bytes(self.__daylightDate))

    @property
    def bias(self) -> int:
        
        return self.__bias

    @property
    def daylightBias(self) -> int:
        
        return self.__daylightBias

    @property
    def daylightDate(self) -> SystemTime:
        
        return self.__daylightDate

    @property
    def flags(self) -> TZFlag:
        
        return self.__flags

    @property
    def majorVersion(self) -> int:
        
        return self.__majorVersion

    @property
    def minorVersion(self) -> int:
        
        return self.__minorVersion

    @property
    def standardBias(self) -> int:
        
        return self.__standardBias

    @property
    def standardDate(self) -> SystemTime:
        
        return self.__standardDate

    @property
    def year(self) -> int:
        
        return self.__year
