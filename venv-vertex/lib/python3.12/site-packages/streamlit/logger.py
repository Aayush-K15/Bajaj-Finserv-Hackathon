















from __future__ import annotations

import logging
import sys
from typing import Final

DEFAULT_LOG_MESSAGE: Final = "%(asctime)s %(levelname) -7s %(name)s: %(message)s"


_loggers: dict[str, logging.Logger] = {}


_global_log_level = logging.INFO


def set_log_level(level: str | int) -> None:
    
    logger = get_logger(__name__)

    if isinstance(level, str):
        level = level.upper()
    if level in {"CRITICAL", logging.CRITICAL}:
        log_level = logging.CRITICAL
    elif level in {"ERROR", logging.ERROR}:
        log_level = logging.ERROR
    elif level in {"WARNING", logging.WARNING}:
        log_level = logging.WARNING
    elif level in {"INFO", logging.INFO}:
        log_level = logging.INFO
    elif level in {"DEBUG", logging.DEBUG}:
        log_level = logging.DEBUG
    else:
        msg = f'undefined log level "{level}"'
        logger.critical(msg)
        sys.exit(1)

    for log in _loggers.values():
        log.setLevel(log_level)

    global _global_log_level  
    _global_log_level = log_level


def setup_formatter(logger: logging.Logger) -> None:
    
    
    if hasattr(logger, "streamlit_console_handler"):
        logger.removeHandler(logger.streamlit_console_handler)

    logger.streamlit_console_handler = logging.StreamHandler()  

    
    from streamlit import config

    if config._config_options:
        
        
        
        message_format = config.get_option("logger.messageFormat")
    else:
        message_format = DEFAULT_LOG_MESSAGE
    formatter = logging.Formatter(fmt=message_format)
    formatter.default_msec_format = "%s.%03d"
    logger.streamlit_console_handler.setFormatter(formatter)  

    
    logger.addHandler(logger.streamlit_console_handler)  


def update_formatter() -> None:
    for log in _loggers.values():
        setup_formatter(log)


def init_tornado_logs() -> None:
    
    
    for log in ("access", "application", "general"):
        
        get_logger(f"tornado.{log}")


def get_logger(name: str) -> logging.Logger:
    
    if name in _loggers:
        return _loggers[name]

    logger = (
        logging.getLogger("streamlit") if name == "root" else logging.getLogger(name)
    )

    logger.setLevel(_global_log_level)
    logger.propagate = False
    setup_formatter(logger)

    _loggers[name] = logger

    return logger
