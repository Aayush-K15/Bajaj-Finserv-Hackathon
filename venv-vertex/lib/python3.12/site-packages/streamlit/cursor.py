













from __future__ import annotations

from typing import Any

from streamlit import util
from streamlit.runtime.scriptrunner_utils.script_run_context import get_script_run_ctx


def make_delta_path(
    root_container: int, parent_path: tuple[int, ...], index: int
) -> list[int]:
    delta_path = [root_container]
    delta_path.extend(parent_path)
    delta_path.append(index)
    return delta_path


def get_container_cursor(
    root_container: int | None,
) -> RunningCursor | None:
    
    if root_container is None:
        return None

    ctx = get_script_run_ctx()

    if ctx is None:
        return None

    if root_container in ctx.cursors:
        return ctx.cursors[root_container]

    cursor = RunningCursor(root_container=root_container)
    ctx.cursors[root_container] = cursor
    return cursor


class Cursor:
    

    def __repr__(self) -> str:
        return util.repr_(self)

    @property
    def root_container(self) -> int:
        
        raise NotImplementedError()

    @property
    def parent_path(self) -> tuple[int, ...]:
        
        raise NotImplementedError()

    @property
    def index(self) -> int:
        
        raise NotImplementedError()

    @property
    def delta_path(self) -> list[int]:
        
        return make_delta_path(self.root_container, self.parent_path, self.index)

    @property
    def is_locked(self) -> bool:
        raise NotImplementedError()

    def get_locked_cursor(self, **props: Any) -> LockedCursor:
        raise NotImplementedError()

    @property
    def props(self) -> Any:
        
        raise NotImplementedError()


class RunningCursor(Cursor):
    def __init__(self, root_container: int, parent_path: tuple[int, ...] = ()) -> None:
        
        self._root_container = root_container
        self._parent_path = parent_path
        self._index = 0

    @property
    def root_container(self) -> int:
        return self._root_container

    @property
    def parent_path(self) -> tuple[int, ...]:
        return self._parent_path

    @property
    def index(self) -> int:
        return self._index

    @property
    def is_locked(self) -> bool:
        return False

    def get_locked_cursor(self, **props: Any) -> LockedCursor:
        locked_cursor = LockedCursor(
            root_container=self._root_container,
            parent_path=self._parent_path,
            index=self._index,
            **props,
        )

        self._index += 1

        return locked_cursor


class LockedCursor(Cursor):
    def __init__(
        self,
        root_container: int,
        parent_path: tuple[int, ...] = (),
        index: int = 0,
        **props: Any,
    ) -> None:
        
        self._root_container = root_container
        self._index = index
        self._parent_path = parent_path
        self._props = props

    @property
    def root_container(self) -> int:
        return self._root_container

    @property
    def parent_path(self) -> tuple[int, ...]:
        return self._parent_path

    @property
    def index(self) -> int:
        return self._index

    @property
    def is_locked(self) -> bool:
        return True

    def get_locked_cursor(self, **props: Any) -> LockedCursor:
        self._props = props
        return self

    @property
    def props(self) -> Any:
        return self._props
