













from __future__ import annotations

from typing import TYPE_CHECKING, Final, Literal, cast

from streamlit.elements.lib.layout_utils import (
    LayoutConfig,
    Width,
    WidthWithoutContent,
    validate_width,
)
from streamlit.proto.Markdown_pb2 import Markdown as MarkdownProto
from streamlit.runtime.metrics_util import gather_metrics
from streamlit.string_util import clean_text, validate_icon_or_emoji
from streamlit.type_util import SupportsStr, is_sympy_expression

if TYPE_CHECKING:
    import sympy

    from streamlit.delta_generator import DeltaGenerator

MARKDOWN_HORIZONTAL_RULE_EXPRESSION: Final = "---"


class MarkdownMixin:
    @gather_metrics("markdown")
    def markdown(
        self,
        body: SupportsStr,
        unsafe_allow_html: bool = False,
        *,  
        help: str | None = None,
        width: Width = "stretch",
    ) -> DeltaGenerator:
        r
        markdown_proto = MarkdownProto()

        markdown_proto.body = clean_text(body)
        markdown_proto.allow_html = unsafe_allow_html
        markdown_proto.element_type = MarkdownProto.Type.NATIVE
        if help:
            markdown_proto.help = help

        validate_width(width, allow_content=True)
        layout_config = LayoutConfig(width=width)

        return self.dg._enqueue("markdown", markdown_proto, layout_config=layout_config)

    @gather_metrics("caption")
    def caption(
        self,
        body: SupportsStr,
        unsafe_allow_html: bool = False,
        *,  
        help: str | None = None,
        width: Width = "stretch",
    ) -> DeltaGenerator:
        
        caption_proto = MarkdownProto()
        caption_proto.body = clean_text(body)
        caption_proto.allow_html = unsafe_allow_html
        caption_proto.is_caption = True
        caption_proto.element_type = MarkdownProto.Type.CAPTION
        if help:
            caption_proto.help = help

        validate_width(width, allow_content=True)
        layout_config = LayoutConfig(width=width)

        return self.dg._enqueue("markdown", caption_proto, layout_config=layout_config)

    @gather_metrics("latex")
    def latex(
        self,
        body: SupportsStr | sympy.Expr,
        *,  
        help: str | None = None,
        width: Width = "stretch",
    ) -> DeltaGenerator:
        
        
        r

        if is_sympy_expression(body):
            import sympy

            body = sympy.latex(body)

        latex_proto = MarkdownProto()
        latex_proto.body = f"$$\n{clean_text(body)}\n$$"
        latex_proto.element_type = MarkdownProto.Type.LATEX
        if help:
            latex_proto.help = help

        validate_width(width, allow_content=True)
        layout_config = LayoutConfig(width=width)

        return self.dg._enqueue("markdown", latex_proto, layout_config=layout_config)

    @gather_metrics("divider")
    def divider(self, *, width: WidthWithoutContent = "stretch") -> DeltaGenerator:
        

        divider_proto = MarkdownProto()
        divider_proto.body = MARKDOWN_HORIZONTAL_RULE_EXPRESSION
        divider_proto.element_type = MarkdownProto.Type.DIVIDER

        validate_width(width, allow_content=False)
        layout_config = LayoutConfig(width=width)

        return self.dg._enqueue("markdown", divider_proto, layout_config=layout_config)

    @gather_metrics("badge")
    def badge(
        self,
        label: str,
        *,  
        icon: str | None = None,
        color: Literal[
            "blue",
            "green",
            "orange",
            "red",
            "violet",
            "gray",
            "grey",
            "primary",
        ] = "blue",
        width: Width = "content",
    ) -> DeltaGenerator:
        
        icon_str = validate_icon_or_emoji(icon) + " " if icon is not None else ""

        
        escaped_label = label.replace("[", "\\[").replace("]", "\\]")

        badge_proto = MarkdownProto()
        badge_proto.body = f":{color}-badge[{icon_str}{escaped_label}]"
        badge_proto.element_type = MarkdownProto.Type.NATIVE

        validate_width(width, allow_content=True)
        layout_config = LayoutConfig(width=width)

        return self.dg._enqueue("markdown", badge_proto, layout_config=layout_config)

    @property
    def dg(self) -> DeltaGenerator:
        
        return cast("DeltaGenerator", self)
