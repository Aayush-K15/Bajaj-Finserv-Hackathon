













from __future__ import annotations

from typing import TYPE_CHECKING, NamedTuple

from streamlit import runtime
from streamlit.delta_generator_singletons import context_dg_stack

if TYPE_CHECKING:
    from streamlit.delta_generator import DeltaGenerator


class FormData(NamedTuple):
    

    
    form_id: str


def _current_form(this_dg: DeltaGenerator) -> FormData | None:
    
    if not runtime.exists():
        return None

    if this_dg._form_data is not None:
        return this_dg._form_data

    if this_dg == this_dg._main_dg:
        
        
        for dg in reversed(context_dg_stack.get()):
            if dg._form_data is not None:
                return dg._form_data
    else:
        
        
        parent = this_dg._parent
        if parent is not None and parent._form_data is not None:
            return parent._form_data

    return None


def current_form_id(dg: DeltaGenerator) -> str:
    
    form_data = _current_form(dg)
    if form_data is None:
        return ""
    return form_data.form_id


def is_in_form(dg: DeltaGenerator) -> bool:
    
    return current_form_id(dg) != ""
