













from __future__ import annotations

import numbers


class JSNumberBoundsException(Exception):  
    pass


class JSNumber:
    

    
    
    MAX_SAFE_INTEGER = (1 << 53) - 1

    
    
    MIN_SAFE_INTEGER = -((1 << 53) - 1)

    
    MAX_VALUE = 1.7976931348623157e308

    
    MIN_VALUE = 5e-324

    
    MIN_NEGATIVE_VALUE = -MAX_VALUE

    @classmethod
    def validate_int_bounds(cls, value: int, value_name: str | None = None) -> None:
        
        if value_name is None:
            value_name = "value"

        if value < cls.MIN_SAFE_INTEGER:
            raise JSNumberBoundsException(
                f"{value_name} ({value}) must be >= -((1 << 53) - 1)"
            )
        if value > cls.MAX_SAFE_INTEGER:
            raise JSNumberBoundsException(
                f"{value_name} ({value}) must be <= (1 << 53) - 1"
            )

    @classmethod
    def validate_float_bounds(cls, value: int | float, value_name: str | None) -> None:
        
        if value_name is None:
            value_name = "value"

        if not isinstance(value, (numbers.Integral, float)):
            raise JSNumberBoundsException(f"{value_name} ({value}) is not a float")
        if value < cls.MIN_NEGATIVE_VALUE:
            raise JSNumberBoundsException(
                f"{value_name} ({value}) must be >= -1.797e+308"
            )
        if value > cls.MAX_VALUE:
            raise JSNumberBoundsException(
                f"{value_name} ({value}) must be <= 1.797e+308"
            )
