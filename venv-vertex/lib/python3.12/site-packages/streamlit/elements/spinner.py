













from __future__ import annotations

import contextlib
import threading
from typing import TYPE_CHECKING, Final

import streamlit as st
from streamlit.elements.lib.layout_utils import (
    LayoutConfig,
    Width,
    validate_width,
)
from streamlit.runtime.scriptrunner import add_script_run_ctx

if TYPE_CHECKING:
    from collections.abc import Iterator



DELAY_SECS: Final = 0.5


@contextlib.contextmanager
def spinner(
    text: str = "In progress...",
    *,
    show_time: bool = False,
    _cache: bool = False,
    width: Width = "content",
) -> Iterator[None]:
    
    from streamlit.proto.Spinner_pb2 import Spinner as SpinnerProto
    from streamlit.string_util import clean_text

    validate_width(width, allow_content=True)
    layout_config = LayoutConfig(width=width)

    message = st.empty()

    display_message = True
    display_message_lock = threading.Lock()

    try:

        def set_message() -> None:
            with display_message_lock:
                if display_message:
                    spinner_proto = SpinnerProto()
                    spinner_proto.text = clean_text(text)
                    spinner_proto.cache = _cache
                    spinner_proto.show_time = show_time
                    message._enqueue(
                        "spinner", spinner_proto, layout_config=layout_config
                    )

        add_script_run_ctx(threading.Timer(DELAY_SECS, set_message)).start()

        
        yield
    finally:
        if display_message_lock:
            with display_message_lock:
                display_message = False
            if "chat_message" in set(message._active_dg._ancestor_block_types):
                
                
                
                
                
                
                
                message.container()
            else:
                message.empty()
