















from __future__ import annotations

from abc import abstractmethod
from dataclasses import dataclass
from typing import Literal, Protocol


class CacheStorageError(Exception):
    


class CacheStorageKeyNotFoundError(CacheStorageError):
    


class InvalidCacheStorageContextError(CacheStorageError):
    


@dataclass(frozen=True)
class CacheStorageContext:
    

    function_key: str
    function_display_name: str
    ttl_seconds: float | None = None
    max_entries: int | None = None
    persist: Literal["disk"] | None = None


class CacheStorage(Protocol):
    

    @abstractmethod
    def get(self, key: str) -> bytes:
        
        raise NotImplementedError

    @abstractmethod
    def set(self, key: str, value: bytes) -> None:
        
        raise NotImplementedError

    @abstractmethod
    def delete(self, key: str) -> None:
        
        raise NotImplementedError

    @abstractmethod
    def clear(self) -> None:
        
        raise NotImplementedError

    def close(self) -> None:
        
        pass


class CacheStorageManager(Protocol):
    

    @abstractmethod
    def create(self, context: CacheStorageContext) -> CacheStorage:
        
        raise NotImplementedError

    def clear_all(self) -> None:
        
        raise NotImplementedError

    def check_context(self, context: CacheStorageContext) -> None:
        

        pass
