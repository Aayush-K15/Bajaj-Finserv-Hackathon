













from __future__ import annotations

from typing import Final

from streamlit import config, util
from streamlit.logger import get_logger
from streamlit.proto.ForwardMsg_pb2 import ForwardMsg

_LOGGER: Final = get_logger(__name__)


def populate_hash_if_needed(msg: ForwardMsg) -> None:
    
    if msg.hash == "" and msg.WhichOneof("type") not in {"ref_hash", "initialize"}:
        
        
        metadata = msg.metadata
        msg.ClearField("metadata")

        
        
        serialized_msg = msg.SerializeToString(deterministic=True)

        
        
        

        
        msg.hash = util.calc_md5(serialized_msg)

        
        msg.metadata.CopyFrom(metadata)

        
        
        
        
        
        
        msg.metadata.cacheable = (
            len(serialized_msg) >= int(config.get_option("global.minCachedMessageSize"))
            and msg.WhichOneof("type") == "delta"
            and msg.delta.WhichOneof("type") == "new_element"
        )


def create_reference_msg(msg: ForwardMsg) -> ForwardMsg:
    
    if not msg.hash:
        _LOGGER.warning(
            "Failed to create a reference message for a ForwardMsg since the "
            "message does not have a hash. This is not expected to happen, "
            "please report this as a bug. Falling back to the original message."
        )
        
        
        return msg

    ref_msg = ForwardMsg()
    ref_msg.ref_hash = msg.hash
    ref_msg.metadata.CopyFrom(msg.metadata)
    ref_msg.metadata.cacheable = False
    return ref_msg
