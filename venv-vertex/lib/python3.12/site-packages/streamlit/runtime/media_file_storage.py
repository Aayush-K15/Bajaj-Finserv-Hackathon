













from __future__ import annotations

from abc import abstractmethod
from enum import Enum
from typing import Protocol


class MediaFileKind(Enum):
    
    MEDIA = "media"

    
    DOWNLOADABLE = "downloadable"


class MediaFileStorageError(Exception):
    


class MediaFileStorage(Protocol):
    @abstractmethod
    def load_and_get_id(
        self,
        path_or_data: str | bytes,
        mimetype: str,
        kind: MediaFileKind,
        filename: str | None = None,
    ) -> str:
        
        raise NotImplementedError

    @abstractmethod
    def get_url(self, file_id: str) -> str:
        
        raise NotImplementedError

    @abstractmethod
    def delete_file(self, file_id: str) -> None:
        
        raise NotImplementedError
