













from __future__ import annotations

from collections.abc import Iterable, Iterator, MutableMapping
from typing import TYPE_CHECKING, Any, overload

from streamlit.runtime.metrics_util import gather_metrics
from streamlit.runtime.state.session_state_proxy import get_session_state

if TYPE_CHECKING:
    from _typeshed import SupportsKeysAndGetItem


class QueryParamsProxy(MutableMapping[str, str]):
    

    def __iter__(self) -> Iterator[str]:
        with get_session_state().query_params() as qp:
            return iter(qp)

    def __len__(self) -> int:
        with get_session_state().query_params() as qp:
            return len(qp)

    def __str__(self) -> str:
        with get_session_state().query_params() as qp:
            return str(qp)

    @gather_metrics("query_params.get_item")
    def __getitem__(self, key: str) -> str:
        with get_session_state().query_params() as qp:
            try:
                return qp[key]
            except KeyError:
                raise KeyError(self.missing_key_error_message(key))

    def __delitem__(self, key: str) -> None:
        with get_session_state().query_params() as qp:
            del qp[key]

    @gather_metrics("query_params.set_item")
    def __setitem__(self, key: str, value: Any) -> None:
        with get_session_state().query_params() as qp:
            qp[key] = value

    @gather_metrics("query_params.get_attr")
    def __getattr__(self, key: str) -> str:
        with get_session_state().query_params() as qp:
            try:
                return qp[key]
            except KeyError:
                raise AttributeError(self.missing_attr_error_message(key))

    def __delattr__(self, key: str) -> None:
        with get_session_state().query_params() as qp:
            try:
                del qp[key]
            except KeyError:
                raise AttributeError(self.missing_key_error_message(key))

    @overload
    def update(
        self, params: SupportsKeysAndGetItem[str, str | Iterable[str]], /, **kwds: str
    ) -> None: ...

    @overload
    def update(
        self, params: Iterable[tuple[str, str | Iterable[str]]], /, **kwds: str
    ) -> None: ...

    @overload
    def update(self, **kwds: str | Iterable[str]) -> None: ...

    def update(self, params=(), /, **kwds) -> None:  
        
        with get_session_state().query_params() as qp:
            qp.update(params, **kwds)

    @gather_metrics("query_params.set_attr")
    def __setattr__(self, key: str, value: Any) -> None:
        with get_session_state().query_params() as qp:
            qp[key] = value

    @gather_metrics("query_params.get_all")
    def get_all(self, key: str) -> list[str]:
        
        with get_session_state().query_params() as qp:
            return qp.get_all(key)

    @gather_metrics("query_params.clear")
    def clear(self) -> None:
        
        with get_session_state().query_params() as qp:
            qp.clear()

    @gather_metrics("query_params.to_dict")
    def to_dict(self) -> dict[str, str]:
        
        with get_session_state().query_params() as qp:
            return qp.to_dict()

    @overload
    def from_dict(self, params: Iterable[tuple[str, str | Iterable[str]]]) -> None: ...

    @overload
    def from_dict(
        self, params: SupportsKeysAndGetItem[str, str | Iterable[str]]
    ) -> None: ...

    @gather_metrics("query_params.from_dict")
    def from_dict(
        self,
        params: SupportsKeysAndGetItem[str, str | Iterable[str]]
        | Iterable[tuple[str, str | Iterable[str]]],
    ) -> None:
        
        with get_session_state().query_params() as qp:
            return qp.from_dict(params)

    @staticmethod
    def missing_key_error_message(key: str) -> str:
        
        return f'st.query_params has no key "{key}".'

    @staticmethod
    def missing_attr_error_message(key: str) -> str:
        
        return f'st.query_params has no attribute "{key}".'
