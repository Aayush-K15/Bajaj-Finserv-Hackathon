













from __future__ import annotations

from abc import abstractmethod
from typing import TYPE_CHECKING, Protocol

if TYPE_CHECKING:
    from streamlit.components.types.base_custom_component import BaseCustomComponent


class BaseComponentRegistry(Protocol):
    

    @abstractmethod
    def register_component(self, component: BaseCustomComponent) -> None:
        
        raise NotImplementedError

    @abstractmethod
    def get_component_path(self, name: str) -> str | None:
        
        raise NotImplementedError

    @abstractmethod
    def get_module_name(self, name: str) -> str | None:
        
        raise NotImplementedError

    @abstractmethod
    def get_component(self, name: str) -> BaseCustomComponent | None:
        
        raise NotImplementedError

    @abstractmethod
    def get_components(self) -> list[BaseCustomComponent]:
        
        raise NotImplementedError
