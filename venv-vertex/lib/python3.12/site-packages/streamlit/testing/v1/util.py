













from __future__ import annotations

from contextlib import contextmanager
from typing import TYPE_CHECKING, Any, Callable

from streamlit import config

if TYPE_CHECKING:
    from collections.abc import Generator


@contextmanager
def patch_config_options(
    config_overrides: dict[str, Any],
) -> Generator[None, None, None]:
    
    
    from unittest.mock import patch

    mock_get_option = build_mock_config_get_option(config_overrides)
    with patch.object(config, "get_option", new=mock_get_option):
        yield


def build_mock_config_get_option(
    overrides_dict: dict[str, Any],
) -> Callable[[str], Any]:
    orig_get_option = config.get_option

    def mock_config_get_option(name: str) -> Any:
        if name in overrides_dict:
            return overrides_dict[name]
        return orig_get_option(name)

    return mock_config_get_option
