import logging
from . import _root_logger_wrapper


class OletoolsLoggerAdapter(logging.LoggerAdapter):
    
    _json_enabled = None
    _is_warn_logger = False   

    def print_str(self, message, **kwargs):
        
        if self._json_enabled and self._json_enabled():
            
            
            
            self.log(_root_logger_wrapper.level(), message, extra=kwargs)
        else:
            print(message)

    def log(self, lvl, msg, *args, **kwargs):
        
        msg, kwargs = self.process(msg, kwargs)
        self.logger.log(lvl, msg, *args, **kwargs)

    def process(self, msg, kwargs):
        
        if 'extra' not in kwargs:
            kwargs['extra'] = {}
        if 'type' in kwargs:
            kwargs['extra']['type'] = kwargs['type']
            del kwargs['type']    
        if 'type' not in kwargs['extra']:
            if self._is_warn_logger:
                kwargs['extra']['type'] = 'warning'    
            else:
                kwargs['extra']['type'] = 'msg'        
        return msg, kwargs

    def set_json_enabled_function(self, json_enabled):
        
        self._json_enabled = json_enabled

    def set_warnings_logger(self):
        
        
        
        self._is_warn_logger = True

    def level(self):
        
        return self.logger.level

    def setLevel(self, new_level):
        
        return self.logger.setLevel(new_level)
