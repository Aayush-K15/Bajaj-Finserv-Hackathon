import logging
import json


class JsonFormatter(logging.Formatter):
    
    _is_first_line = True

    def __init__(self, other_logger_has_first_line=False):
        if other_logger_has_first_line:
            self._is_first_line = False
        self.msg_formatter = logging.Formatter()    

    def format(self, record):
        
        json_dict = dict(msg='', level='', type='')
        try:
            msg = self.msg_formatter.format(record)
            json_dict['msg'] = msg.replace('\n', ' ')
            json_dict['level'] = record.levelname
            json_dict['type'] = record.type
        except AttributeError:     
            if record.name == 'py.warnings':   
                json_dict['type'] = 'warning'
            else:
                json_dict['type'] = 'msg'      
        except Exception as exc:
            try:
                json_dict['msg'] = "Ignore {0} when formatting '{1}': {2}".format(type(exc), record.msg, exc)
            except Exception as exc2:
                json_dict['msg'] = 'Caught {0} in logging'.format(str(exc2))
            json_dict['type'] = 'log-warning'
            json_dict['level'] = 'warning'

        formatted_message = '    ' + json.dumps(json_dict)

        if self._is_first_line:
            self._is_first_line = False
            return formatted_message

        return ', ' + formatted_message
