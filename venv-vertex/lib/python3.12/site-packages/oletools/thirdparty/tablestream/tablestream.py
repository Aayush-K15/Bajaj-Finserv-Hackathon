



























from __future__ import print_function














__version__ = '0.09'











import textwrap
import sys, os

import colorclass


if os.name == 'nt':
    colorclass.Windows.enable(auto_colors=True)




if sys.version_info[0] >= 3:
    
    
    xrange = range
    ustr = str
    
    byte_strings = (bytes, bytearray)
else:
    
    ustr = unicode
    
    byte_strings = bytes




def to_ustr(obj, encoding='utf8', errors='replace'):
    
    
    if isinstance(obj, ustr):
        return obj
    
    elif isinstance(obj, byte_strings):
        return ustr(obj, encoding=encoding, errors=errors)
    
    
    else:
        return ustr(obj)






class TableStyle(object):
    
    
    header_top = True
    header_top_left = u'+'
    header_top_horiz = u'-'
    header_top_middle = u'+'
    header_top_right = u'+'

    header_vertical_left = u'|'
    header_vertical_middle = u'|'
    header_vertical_right = u'|'

    
    header_sep = True
    header_sep_left = u'+'
    header_sep_horiz = u'-'
    header_sep_middle = u'+'
    header_sep_right = u'+'

    
    noheader_top = True
    noheader_top_left = u'+'
    noheader_top_horiz = u'-'
    noheader_top_middle = u'+'
    noheader_top_right = u'+'

    
    vertical_left = u'|'
    vertical_middle = u'|'
    vertical_right = u'|'

    
    sep = False
    sep_left = u'+'
    sep_horiz = u'-'
    sep_middle = u'+'
    sep_right = u'+'

    
    bottom = True
    bottom_left = u'+'
    bottom_horiz = u'-'
    bottom_middle = u'+'
    bottom_right = u'+'


class TableStyleSlim(TableStyle):
    
    
    header_top = True
    header_top_left = u''
    header_top_horiz = u'-'
    header_top_middle = u'+'
    header_top_right = u''

    header_vertical_left = u''
    header_vertical_middle = u'|'
    header_vertical_right = u''

    
    header_sep = True
    header_sep_left = u''
    header_sep_horiz = u'-'
    header_sep_middle = u'+'
    header_sep_right = u''

    
    noheader_top = True
    noheader_top_left = u''
    noheader_top_horiz = u'-'
    noheader_top_middle = u'+'
    noheader_top_right = u''

    
    vertical_left = u''
    vertical_middle = u'|'
    vertical_right = u''

    
    sep = False
    sep_left = u''
    sep_horiz = u'-'
    sep_middle = u'+'
    sep_right = u''

    
    bottom = True
    bottom_left = u''
    bottom_horiz = u'-'
    bottom_middle = u'+'
    bottom_right = u''

class TableStyleSlimSep(TableStyleSlim):
    
    sep = True


class TableStream(object):
    

    def __init__(self, column_width, header_row=None, style=TableStyle,
                 outfile=sys.stdout, encoding_in='utf8', encoding_out='utf8'):
        
        self.column_width = column_width
        self.num_columns = len(column_width)
        self.header_row = header_row
        self.encoding_in = encoding_in
        self.encoding_out = encoding_out
        assert (header_row is None) or len(header_row) == self.num_columns
        self.style = style
        self.outfile = outfile
        if header_row is not None:
            self.write_header()
        elif self.style.noheader_top:
            self.write_noheader_top()


    def write(self, s):
        
        
        
        s = s.replace(u"\uFFFD", '')
        self.outfile.write(s)

    def write_row(self, row, last=False, colors=None):
        assert len(row) == self.num_columns
        columns = []
        max_lines = 0
        for i in xrange(self.num_columns):
            cell = row[i]
            
            cell = to_ustr(cell, encoding=self.encoding_in)
            
            
            
            
            column = []
            for line in cell.splitlines():
                column.extend(textwrap.wrap(line, width=self.column_width[i]))
            
            if colors is not None and self.outfile.isatty():
                color = colors[i]
                if color:
                    for j in xrange(len(column)):
                        
                        column[j] = colorclass.Color(u'{auto%s}%s{/%s}' % (color, column[j], color))
            columns.append(column)
            
            max_lines = max(len(columns[i]), max_lines)
        
        for j in xrange(max_lines):
            self.write(self.style.vertical_left)
            for i in xrange(self.num_columns):
                column = columns[i]
                if j<len(column):
                    
                    text_width = len(column[j])
                    self.write(column[j] + u' '*(self.column_width[i]-text_width))
                else:
                    
                    
                    self.write(u' '*(self.column_width[i]))
                if i < (self.num_columns - 1):
                    self.write(self.style.vertical_middle)
            self.write(self.style.vertical_right)
            self.write('\n')
        if self.style.sep and not last:
            self.write_sep()

    def make_line(self, left, horiz, middle, right):
        
        return left + middle.join([horiz * width for width in self.column_width]) + right + u'\n'

    def write_header_top(self):
        s = self.style
        line = self.make_line(left=s.header_top_left, horiz=s.header_top_horiz,
                              middle=s.header_top_middle, right=s.header_top_right)
        self.write(line)

    def write_header_sep(self):
        s = self.style
        line = self.make_line(left=s.header_sep_left, horiz=s.header_sep_horiz,
                              middle=s.header_sep_middle, right=s.header_sep_right)
        self.write(line)

    def write_header(self):
        if self.style.header_top:
            self.write_header_top()
        self.write_row(self.header_row, last=True)
        
        if self.style.header_sep:
            self.write_header_sep()

    def write_noheader_top(self):
        s = self.style
        line = self.make_line(left=s.noheader_top_left, horiz=s.noheader_top_horiz,
                              middle=s.noheader_top_middle, right=s.noheader_top_right)
        self.write(line)

    def write_sep(self):
        s = self.style
        line = self.make_line(left=s.sep_left, horiz=s.sep_horiz,
                              middle=s.sep_middle, right=s.sep_right)
        self.write(line)

    def write_bottom(self):
        s = self.style
        
        
        if not s.sep:
            line = self.make_line(left=s.bottom_left, horiz=s.bottom_horiz,
                                  middle=s.bottom_middle, right=s.bottom_right)
            self.write(line)

    def close(self):
        self.write_bottom()




if __name__ == '__main__':
    t = TableStream([10, 5, 20], header_row=['i', 'i*i', '2**i'], style=TableStyleSlim)
    t.write_row(['test', 'test', 'test'])
    cell = 'a very very long text'
    t.write_row([cell, cell, cell], colors=['blue', None, 'red'])
    for i in range(1, 11):
        t.write_row([i, i*i, 2**i])
    t.write_row([b'bytes', u'unicode', bytearray(b'bytearray')])
    t.close()


