





































__version__ = '0.60'

import sys
import struct
import os
from os.path import splitext, isfile
from tempfile import mkstemp
import zipfile

from olefile import OleFileIO

try:
    import msoffcrypto
except ImportError:
    msoffcrypto = None






_thismodule_dir = os.path.normpath(os.path.abspath(os.path.dirname(__file__)))
_parent_dir = os.path.normpath(os.path.join(_thismodule_dir, '..'))
if _parent_dir not in sys.path:
    sys.path.insert(0, _parent_dir)

from oletools.common.errors import CryptoErrorBase, WrongEncryptionPassword, \
    UnsupportedEncryptionError, MaxCryptoNestingReached, CryptoLibNotImported
from oletools.common.log_helper import log_helper




MAX_NESTING_DEPTH = 10




log = log_helper.get_or_create_silent_logger('crypto')


def enable_logging():
    
    log.setLevel(log_helper.NOTSET)


def is_encrypted(some_file):
    
    
    if check_msoffcrypto():
        log.debug('Checking for encryption using msoffcrypto')
        file_handle = None
        file_pos = None
        try:
            if isinstance(some_file, OleFileIO):
                
                file_handle = some_file.fp
                file_pos = file_handle.tell()
                file_handle.seek(0)
            else:
                file_handle = open(some_file, 'rb')

            return msoffcrypto.OfficeFile(file_handle).is_encrypted()

        except Exception as exc:
            
            log.info('msoffcrypto failed to parse file or determine '
                        'whether it is encrypted: {}'
                        .format(exc))
            
            

        finally:
            try:
                if file_pos is not None:   
                    file_handle.seek(file_pos)
                else:                      
                    file_handle.close()
            except Exception as exc:
                log.warning('Ignoring error during clean up: {}'.format(exc))

    
    try:
        if isinstance(some_file, OleFileIO):
            return _is_encrypted_ole(some_file)
        if zipfile.is_zipfile(some_file):
            return _is_encrypted_zip(some_file)
        
        with OleFileIO(some_file) as ole:
            return _is_encrypted_ole(ole)
    except Exception as exc:
        
        log.info('Failed to check {} for encryption ({}); assume it is not '
                    'encrypted.'.format(some_file, exc))

    return False


def _is_encrypted_zip(filename):
    
    log.debug('Checking for encryption in zip file')
    
    
    with zipfile.ZipFile(filename, 'r') as zipper:
        first_entry = zipper.infolist()[0]
        try:
            with zipper.open(first_entry, 'r') as reader:
                reader.read(min(16, first_entry.file_size))
            return False
        except RuntimeError as rt_err:
            return 'crypt' in str(rt_err)


def _is_encrypted_ole(ole):
    
    log.debug('Checking for encryption in OLE file')
    
    
    
    
    if ole.exists("\x05SummaryInformation"):
        suminfo_data = ole.getproperties("\x05SummaryInformation")
        if 0x13 in suminfo_data and (suminfo_data[0x13] & 1):
            return True

    
    
    
    if ole.exists('EncryptionInfo'):
        log.debug('found stream EncryptionInfo')
        return True
    
    if ole.exists('EncryptedSummary') and \
            not ole.exists('SummaryInformation'):
        return True

    
    if ole.exists('WordDocument'):
        
        stream = None
        try:
            stream = ole.openstream(["WordDocument"])
            
            stream.read(10)
            
            temp16 = struct.unpack("H", stream.read(2))[0]
            f_encrypted = (temp16 & 0x0100) >> 8
            if f_encrypted:
                return True
        finally:
            if stream is not None:
                stream.close()

    
    return False






EXCEL_TRANSPARENT_PASSWORD = 'VelvetSweatshop'




POWERPOINT_TRANSPARENT_PASSWORD = '/01Hannes Ruescher/01'


DEFAULT_PASSWORDS = [EXCEL_TRANSPARENT_PASSWORD, POWERPOINT_TRANSPARENT_PASSWORD,
                     '123', '1234', '12345', '123456', '4321']


def _check_msoffcrypto():
    
    if msoffcrypto is None:
        raise CryptoLibNotImported()


def check_msoffcrypto():
    
    return msoffcrypto is not None


def decrypt(filename, passwords=None, **temp_file_args):
    
    _check_msoffcrypto()

    
    if isinstance(passwords, str):
        passwords = (passwords, )
    elif not passwords:
        passwords = DEFAULT_PASSWORDS

    
    if 'prefix' not in temp_file_args:
        temp_file_args['prefix'] = 'oletools-decrypt-'
    if 'suffix' not in temp_file_args:
        temp_file_args['suffix'] = splitext(filename)[1]
    temp_file_args['text'] = False

    decrypt_file = None
    with open(filename, 'rb') as reader:
        try:
            crypto_file = msoffcrypto.OfficeFile(reader)
        except Exception as exc:   
            if 'Unrecognized file format' in str(exc):
                log.debug('Caught exception', exc_info=True)

                
                if sys.version_info.major == 2:
                    raise UnsupportedEncryptionError(filename)
                else:
                    
                    exec('raise UnsupportedEncryptionError(filename) from None')
            else:
                raise
        if not crypto_file.is_encrypted():
            raise ValueError('Given input file {} is not encrypted!'
                             .format(filename))

        for password in passwords:
            log.debug('Trying to decrypt with password {!r}'.format(password))
            write_descriptor = None
            write_handle = None
            decrypt_file = None
            try:
                crypto_file.load_key(password=password)

                
                write_descriptor, decrypt_file = mkstemp(**temp_file_args)
                write_handle = os.fdopen(write_descriptor, 'wb')
                write_descriptor = None      
                crypto_file.decrypt(write_handle)

                
                write_handle.close()
                write_handle = None
                break
            except Exception:
                log.debug('Failed to decrypt', exc_info=True)

                
                if write_handle:
                    write_handle.close()
                elif write_descriptor:
                    os.close(write_descriptor)
                if decrypt_file and isfile(decrypt_file):
                    os.unlink(decrypt_file)
                decrypt_file = None
    
    log.debug('All passwords failed')
    return decrypt_file
