














class MessageRule:
    

    def __init__(self, descriptor: type, wrapper: type):
        self._descriptor = descriptor
        self._wrapper = wrapper

    def to_python(self, value, *, absent: bool = None):
        if isinstance(value, self._descriptor):
            return self._wrapper.wrap(value)
        return value

    def to_proto(self, value):
        if isinstance(value, self._wrapper):
            return self._wrapper.pb(value)
        if isinstance(value, dict) and not self.is_map:
            
            
            try:
                
                return self._descriptor(**value)
            except (TypeError, ValueError, AttributeError) as ex:
                
                
                
                
                
                
                
                
                return self._wrapper(value)._pb
        return value

    @property
    def is_map(self):
        
        desc = self._descriptor.DESCRIPTOR
        return desc.has_options and desc.GetOptions().map_entry
