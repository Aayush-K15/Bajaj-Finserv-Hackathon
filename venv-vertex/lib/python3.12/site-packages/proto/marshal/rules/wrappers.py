













from google.protobuf import wrappers_pb2


class WrapperRule:
    

    def to_python(self, value, *, absent: bool = None):
        if isinstance(value, self._proto_type):
            if absent:
                return None
            return value.value
        return value

    def to_proto(self, value):
        if isinstance(value, self._python_type):
            return self._proto_type(value=value)
        return value


class DoubleValueRule(WrapperRule):
    _proto_type = wrappers_pb2.DoubleValue
    _python_type = float


class FloatValueRule(WrapperRule):
    _proto_type = wrappers_pb2.FloatValue
    _python_type = float


class Int64ValueRule(WrapperRule):
    _proto_type = wrappers_pb2.Int64Value
    _python_type = int


class UInt64ValueRule(WrapperRule):
    _proto_type = wrappers_pb2.UInt64Value
    _python_type = int


class Int32ValueRule(WrapperRule):
    _proto_type = wrappers_pb2.Int32Value
    _python_type = int


class UInt32ValueRule(WrapperRule):
    _proto_type = wrappers_pb2.UInt32Value
    _python_type = int


class BoolValueRule(WrapperRule):
    _proto_type = wrappers_pb2.BoolValue
    _python_type = bool


class StringValueRule(WrapperRule):
    _proto_type = wrappers_pb2.StringValue
    _python_type = str


class BytesValueRule(WrapperRule):
    _proto_type = wrappers_pb2.BytesValue
    _python_type = bytes
