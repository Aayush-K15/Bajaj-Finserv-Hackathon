













import collections
import copy
from typing import Iterable

from proto.utils import cached_property


class Repeated(collections.abc.MutableSequence):
    

    def __init__(self, sequence, *, marshal, proto_type=None):
        
        self._pb = sequence
        self._marshal = marshal
        self._proto_type = proto_type

    def __copy__(self):
        
        return type(self)(self.pb[:], marshal=self._marshal)

    def __delitem__(self, key):
        
        del self.pb[key]

    def __eq__(self, other):
        if hasattr(other, "pb"):
            return tuple(self.pb) == tuple(other.pb)
        return tuple(self.pb) == tuple(other) if isinstance(other, Iterable) else False

    def __getitem__(self, key):
        
        return self.pb[key]

    def __len__(self):
        
        return len(self.pb)

    def __ne__(self, other):
        return not self == other

    def __repr__(self):
        return repr([*self])

    def __setitem__(self, key, value):
        self.pb[key] = value

    def insert(self, index: int, value):
        
        self.pb.insert(index, value)

    def sort(self, *, key: str = None, reverse: bool = False):
        
        self.pb.sort(key=key, reverse=reverse)

    @property
    def pb(self):
        return self._pb


class RepeatedComposite(Repeated):
    

    @cached_property
    def _pb_type(self):
        
        
        
        if self._proto_type is not None:
            return self._proto_type

        
        
        
        
        
        
        if len(self.pb) > 0:
            return type(self.pb[0])

        
        if hasattr(self.pb, "_message_descriptor") and hasattr(
            self.pb._message_descriptor, "_concrete_class"
        ):
            return self.pb._message_descriptor._concrete_class

        
        
        
        canary = copy.deepcopy(self.pb).add()
        return type(canary)

    def __eq__(self, other):
        if super().__eq__(other):
            return True
        return (
            tuple([i for i in self]) == tuple(other)
            if isinstance(other, Iterable)
            else False
        )

    def __getitem__(self, key):
        return self._marshal.to_python(self._pb_type, self.pb[key])

    def __setitem__(self, key, value):
        
        

        
        if isinstance(key, int):
            if -len(self) <= key < len(self):
                self.pop(key)  
                self.insert(key, value)  
            else:
                raise IndexError("list assignment index out of range")

        
        elif isinstance(key, slice):
            start, stop, step = key.indices(len(self))

            if not isinstance(value, collections.abc.Iterable):
                raise TypeError("can only assign an iterable")

            if step == 1:  
                
                
                
                for index, item in enumerate(value):
                    if start + index < stop:
                        self.pop(start + index)
                    self.insert(start + index, item)

                
                
                
                for _ in range(stop - start - len(value)):
                    self.pop(start + len(value))

            else:  
                indices = range(start, stop, step)

                if len(value) != len(indices):  
                    raise ValueError(
                        f"attempt to assign sequence of size "
                        f"{len(value)} to extended slice of size "
                        f"{len(indices)}"
                    )

                
                
                for index, item in zip(indices, value):
                    self[index] = item

        else:
            raise TypeError(
                f"list indices must be integers or slices, not {type(key).__name__}"
            )

    def insert(self, index: int, value):
        
        pb_value = self._marshal.to_proto(self._pb_type, value)
        self.pb.insert(index, pb_value)
