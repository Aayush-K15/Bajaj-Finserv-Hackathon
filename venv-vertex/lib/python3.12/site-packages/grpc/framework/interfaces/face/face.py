














import abc
import collections
import enum



from grpc.framework.common import cardinality  
from grpc.framework.common import style  
from grpc.framework.foundation import future  
from grpc.framework.foundation import stream  




class NoSuchMethodError(Exception):
    

    def __init__(self, group, method):
        
        super(NoSuchMethodError, self).__init__()
        self.group = group
        self.method = method

    def __repr__(self):
        return "face.NoSuchMethodError(%s, %s)" % (
            self.group,
            self.method,
        )


class Abortion(
    collections.namedtuple(
        "Abortion",
        (
            "kind",
            "initial_metadata",
            "terminal_metadata",
            "code",
            "details",
        ),
    )
):
    

    @enum.unique
    class Kind(enum.Enum):
        

        CANCELLED = "cancelled"
        EXPIRED = "expired"
        LOCAL_SHUTDOWN = "local shutdown"
        REMOTE_SHUTDOWN = "remote shutdown"
        NETWORK_FAILURE = "network failure"
        LOCAL_FAILURE = "local failure"
        REMOTE_FAILURE = "remote failure"


class AbortionError(Exception, metaclass=abc.ABCMeta):
    

    def __init__(self, initial_metadata, terminal_metadata, code, details):
        super(AbortionError, self).__init__()
        self.initial_metadata = initial_metadata
        self.terminal_metadata = terminal_metadata
        self.code = code
        self.details = details

    def __str__(self):
        return '%s(code=%s, details="%s")' % (
            self.__class__.__name__,
            self.code,
            self.details,
        )


class CancellationError(AbortionError):
    


class ExpirationError(AbortionError):
    


class LocalShutdownError(AbortionError):
    


class RemoteShutdownError(AbortionError):
    


class NetworkError(AbortionError):
    


class LocalError(AbortionError):
    


class RemoteError(AbortionError):
    


class RpcContext(abc.ABC):
    

    @abc.abstractmethod
    def is_active(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def time_remaining(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def add_abortion_callback(self, abortion_callback):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def cancel(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def protocol_context(self):
        
        raise NotImplementedError()


class Call(RpcContext, metaclass=abc.ABCMeta):
    

    @abc.abstractmethod
    def initial_metadata(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def terminal_metadata(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def code(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def details(self):
        
        raise NotImplementedError()


class ServicerContext(RpcContext, metaclass=abc.ABCMeta):
    

    @abc.abstractmethod
    def invocation_metadata(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def initial_metadata(self, initial_metadata):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def terminal_metadata(self, terminal_metadata):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def code(self, code):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def details(self, details):
        
        raise NotImplementedError()


class ResponseReceiver(abc.ABC):
    

    @abc.abstractmethod
    def initial_metadata(self, initial_metadata):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def response(self, response):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def complete(self, terminal_metadata, code, details):
        
        raise NotImplementedError()


class UnaryUnaryMultiCallable(abc.ABC):
    

    @abc.abstractmethod
    def __call__(
        self,
        request,
        timeout,
        metadata=None,
        with_call=False,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def future(self, request, timeout, metadata=None, protocol_options=None):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def event(
        self,
        request,
        receiver,
        abortion_callback,
        timeout,
        metadata=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()


class UnaryStreamMultiCallable(abc.ABC):
    

    @abc.abstractmethod
    def __call__(self, request, timeout, metadata=None, protocol_options=None):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def event(
        self,
        request,
        receiver,
        abortion_callback,
        timeout,
        metadata=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()


class StreamUnaryMultiCallable(abc.ABC):
    

    @abc.abstractmethod
    def __call__(
        self,
        request_iterator,
        timeout,
        metadata=None,
        with_call=False,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def future(
        self, request_iterator, timeout, metadata=None, protocol_options=None
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def event(
        self,
        receiver,
        abortion_callback,
        timeout,
        metadata=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()


class StreamStreamMultiCallable(abc.ABC):
    

    @abc.abstractmethod
    def __call__(
        self, request_iterator, timeout, metadata=None, protocol_options=None
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def event(
        self,
        receiver,
        abortion_callback,
        timeout,
        metadata=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()


class MethodImplementation(abc.ABC):
    


class MultiMethodImplementation(abc.ABC):
    

    @abc.abstractmethod
    def service(self, group, method, response_consumer, context):
        
        raise NotImplementedError()


class GenericStub(abc.ABC):
    

    @abc.abstractmethod
    def blocking_unary_unary(
        self,
        group,
        method,
        request,
        timeout,
        metadata=None,
        with_call=False,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def future_unary_unary(
        self,
        group,
        method,
        request,
        timeout,
        metadata=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def inline_unary_stream(
        self,
        group,
        method,
        request,
        timeout,
        metadata=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def blocking_stream_unary(
        self,
        group,
        method,
        request_iterator,
        timeout,
        metadata=None,
        with_call=False,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def future_stream_unary(
        self,
        group,
        method,
        request_iterator,
        timeout,
        metadata=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def inline_stream_stream(
        self,
        group,
        method,
        request_iterator,
        timeout,
        metadata=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def event_unary_unary(
        self,
        group,
        method,
        request,
        receiver,
        abortion_callback,
        timeout,
        metadata=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def event_unary_stream(
        self,
        group,
        method,
        request,
        receiver,
        abortion_callback,
        timeout,
        metadata=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def event_stream_unary(
        self,
        group,
        method,
        receiver,
        abortion_callback,
        timeout,
        metadata=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def event_stream_stream(
        self,
        group,
        method,
        receiver,
        abortion_callback,
        timeout,
        metadata=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def unary_unary(self, group, method):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def unary_stream(self, group, method):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def stream_unary(self, group, method):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def stream_stream(self, group, method):
        
        raise NotImplementedError()


class DynamicStub(abc.ABC):
    
