















import abc
import enum
import threading  




class NoSuchMethodError(Exception):
    

    def __init__(self, code, details):
        
        super(NoSuchMethodError, self).__init__()
        self.code = code
        self.details = details


class Outcome(object):
    

    @enum.unique
    class Kind(enum.Enum):
        

        COMPLETED = "completed"
        CANCELLED = "cancelled"
        EXPIRED = "expired"
        LOCAL_SHUTDOWN = "local shutdown"
        REMOTE_SHUTDOWN = "remote shutdown"
        RECEPTION_FAILURE = "reception failure"
        TRANSMISSION_FAILURE = "transmission failure"
        LOCAL_FAILURE = "local failure"
        REMOTE_FAILURE = "remote failure"


class Completion(abc.ABC):
    


class OperationContext(abc.ABC):
    

    @abc.abstractmethod
    def outcome(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def add_termination_callback(self, callback):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def time_remaining(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def cancel(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def fail(self, exception):
        
        raise NotImplementedError()


class Operator(abc.ABC):
    

    @abc.abstractmethod
    def advance(
        self,
        initial_metadata=None,
        payload=None,
        completion=None,
        allowance=None,
    ):
        
        raise NotImplementedError()


class ProtocolReceiver(abc.ABC):
    

    @abc.abstractmethod
    def context(self, protocol_context):
        
        raise NotImplementedError()


class Subscription(abc.ABC):
    

    @enum.unique
    class Kind(enum.Enum):
        NONE = "none"
        TERMINATION_ONLY = "termination only"
        FULL = "full"


class Servicer(abc.ABC):
    

    @abc.abstractmethod
    def service(self, group, method, context, output_operator):
        
        raise NotImplementedError()


class End(abc.ABC):
    

    @abc.abstractmethod
    def start(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def stop(self, grace):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def operate(
        self,
        group,
        method,
        subscription,
        timeout,
        initial_metadata=None,
        payload=None,
        completion=None,
        protocol_options=None,
    ):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def operation_stats(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def add_idle_action(self, action):
        
        raise NotImplementedError()
