














from abc import ABC
import collections
import enum
import functools
import logging

_LOGGER = logging.getLogger(__name__)


class Outcome(ABC):
    

    @enum.unique
    class Kind(enum.Enum):
        

        RETURNED = object()
        RAISED = object()


class _EasyOutcome(
    collections.namedtuple(
        "_EasyOutcome", ["kind", "return_value", "exception"]
    ),
    Outcome,
):
    


def _call_logging_exceptions(behavior, message, *args, **kwargs):
    try:
        return _EasyOutcome(
            Outcome.Kind.RETURNED, behavior(*args, **kwargs), None
        )
    except Exception as e:  
        _LOGGER.exception(message)
        return _EasyOutcome(Outcome.Kind.RAISED, None, e)


def with_exceptions_logged(behavior, message):
    

    @functools.wraps(behavior)
    def wrapped_behavior(*args, **kwargs):
        return _call_logging_exceptions(behavior, message, *args, **kwargs)

    return wrapped_behavior


def call_logging_exceptions(behavior, message, *args, **kwargs):
    
    return _call_logging_exceptions(behavior, message, *args, **kwargs)
