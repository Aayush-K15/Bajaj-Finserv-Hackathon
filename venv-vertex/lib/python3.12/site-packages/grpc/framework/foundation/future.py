














import abc


class TimeoutError(Exception):
    


class CancelledError(Exception):
    


class Future(abc.ABC):
    

    
    
    
    
    
    
    
    
    
    
    @abc.abstractmethod
    def cancel(self):
        
        raise NotImplementedError()

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    @abc.abstractmethod
    def cancelled(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def running(self):
        
        raise NotImplementedError()

    
    
    
    
    @abc.abstractmethod
    def done(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def result(self, timeout=None):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def exception(self, timeout=None):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def traceback(self, timeout=None):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def add_done_callback(self, fn):
        
        raise NotImplementedError()
