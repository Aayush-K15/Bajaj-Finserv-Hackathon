













import sys
import types
from typing import Tuple, Union

_REQUIRED_SYMBOLS = ("_protos", "_services", "_protos_and_services")
_MINIMUM_VERSION = (3, 5, 0)

_UNINSTALLED_TEMPLATE = (
    "Install the grpcio-tools package (1.32.0+) to use the {} function."
)
_VERSION_ERROR_TEMPLATE = (
    "The {} function is only on available on Python 3.X interpreters."
)


def _has_runtime_proto_symbols(mod: types.ModuleType) -> bool:
    return all(hasattr(mod, sym) for sym in _REQUIRED_SYMBOLS)


def _is_grpc_tools_importable() -> bool:
    try:
        import grpc_tools  

        return True
    except ImportError as e:
        
        
        if "grpc_tools" not in e.args[0]:
            raise
        return False


def _call_with_lazy_import(
    fn_name: str, protobuf_path: str
) -> Union[types.ModuleType, Tuple[types.ModuleType, types.ModuleType]]:
    
    if sys.version_info < _MINIMUM_VERSION:
        raise NotImplementedError(_VERSION_ERROR_TEMPLATE.format(fn_name))
    else:
        if not _is_grpc_tools_importable():
            raise NotImplementedError(_UNINSTALLED_TEMPLATE.format(fn_name))
        import grpc_tools.protoc  

        if _has_runtime_proto_symbols(grpc_tools.protoc):
            fn = getattr(grpc_tools.protoc, "_" + fn_name)
            return fn(protobuf_path)
        else:
            raise NotImplementedError(_UNINSTALLED_TEMPLATE.format(fn_name))


def protos(protobuf_path):  
    
    return _call_with_lazy_import("protos", protobuf_path)


def services(protobuf_path):  
    
    return _call_with_lazy_import("services", protobuf_path)


def protos_and_services(protobuf_path):  
    
    return _call_with_lazy_import("protos_and_services", protobuf_path)
