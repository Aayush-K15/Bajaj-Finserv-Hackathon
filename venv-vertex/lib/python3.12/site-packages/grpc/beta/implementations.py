















import threading  



import grpc
from grpc import _auth
from grpc.beta import _client_adaptations
from grpc.beta import _metadata
from grpc.beta import _server_adaptations
from grpc.beta import interfaces  
from grpc.framework.common import cardinality  
from grpc.framework.interfaces.face import face  



ChannelCredentials = grpc.ChannelCredentials
ssl_channel_credentials = grpc.ssl_channel_credentials
CallCredentials = grpc.CallCredentials


def metadata_call_credentials(metadata_plugin, name=None):
    def plugin(context, callback):
        def wrapped_callback(beta_metadata, error):
            callback(_metadata.unbeta(beta_metadata), error)

        metadata_plugin(context, wrapped_callback)

    return grpc.metadata_call_credentials(plugin, name=name)


def google_call_credentials(credentials):
    
    return metadata_call_credentials(_auth.GoogleCallCredentials(credentials))


access_token_call_credentials = grpc.access_token_call_credentials
composite_call_credentials = grpc.composite_call_credentials
composite_channel_credentials = grpc.composite_channel_credentials


class Channel(object):
    

    def __init__(self, channel):
        self._channel = channel

    def subscribe(self, callback, try_to_connect=None):
        
        self._channel.subscribe(callback, try_to_connect=try_to_connect)

    def unsubscribe(self, callback):
        
        self._channel.unsubscribe(callback)


def insecure_channel(host, port):
    
    channel = grpc.insecure_channel(
        host if port is None else "%s:%d" % (host, port)
    )
    return Channel(channel)


def secure_channel(host, port, channel_credentials):
    
    channel = grpc.secure_channel(
        host if port is None else "%s:%d" % (host, port), channel_credentials
    )
    return Channel(channel)


class StubOptions(object):
    

    def __init__(
        self,
        host,
        request_serializers,
        response_deserializers,
        metadata_transformer,
        thread_pool,
        thread_pool_size,
    ):
        self.host = host
        self.request_serializers = request_serializers
        self.response_deserializers = response_deserializers
        self.metadata_transformer = metadata_transformer
        self.thread_pool = thread_pool
        self.thread_pool_size = thread_pool_size


_EMPTY_STUB_OPTIONS = StubOptions(None, None, None, None, None, None)


def stub_options(
    host=None,
    request_serializers=None,
    response_deserializers=None,
    metadata_transformer=None,
    thread_pool=None,
    thread_pool_size=None,
):
    
    return StubOptions(
        host,
        request_serializers,
        response_deserializers,
        metadata_transformer,
        thread_pool,
        thread_pool_size,
    )


def generic_stub(channel, options=None):
    
    effective_options = _EMPTY_STUB_OPTIONS if options is None else options
    return _client_adaptations.generic_stub(
        channel._channel,  
        effective_options.host,
        effective_options.metadata_transformer,
        effective_options.request_serializers,
        effective_options.response_deserializers,
    )


def dynamic_stub(channel, service, cardinalities, options=None):
    
    effective_options = _EMPTY_STUB_OPTIONS if options is None else options
    return _client_adaptations.dynamic_stub(
        channel._channel,  
        service,
        cardinalities,
        effective_options.host,
        effective_options.metadata_transformer,
        effective_options.request_serializers,
        effective_options.response_deserializers,
    )


ServerCredentials = grpc.ServerCredentials
ssl_server_credentials = grpc.ssl_server_credentials


class ServerOptions(object):
    

    def __init__(
        self,
        multi_method_implementation,
        request_deserializers,
        response_serializers,
        thread_pool,
        thread_pool_size,
        default_timeout,
        maximum_timeout,
    ):
        self.multi_method_implementation = multi_method_implementation
        self.request_deserializers = request_deserializers
        self.response_serializers = response_serializers
        self.thread_pool = thread_pool
        self.thread_pool_size = thread_pool_size
        self.default_timeout = default_timeout
        self.maximum_timeout = maximum_timeout


_EMPTY_SERVER_OPTIONS = ServerOptions(None, None, None, None, None, None, None)


def server_options(
    multi_method_implementation=None,
    request_deserializers=None,
    response_serializers=None,
    thread_pool=None,
    thread_pool_size=None,
    default_timeout=None,
    maximum_timeout=None,
):
    
    return ServerOptions(
        multi_method_implementation,
        request_deserializers,
        response_serializers,
        thread_pool,
        thread_pool_size,
        default_timeout,
        maximum_timeout,
    )


def server(service_implementations, options=None):
    
    effective_options = _EMPTY_SERVER_OPTIONS if options is None else options
    return _server_adaptations.server(
        service_implementations,
        effective_options.multi_method_implementation,
        effective_options.request_deserializers,
        effective_options.response_serializers,
        effective_options.thread_pool,
        effective_options.thread_pool_size,
    )
