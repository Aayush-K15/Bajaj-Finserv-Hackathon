














import abc

import grpc

ChannelConnectivity = grpc.ChannelConnectivity

ChannelConnectivity.FATAL_FAILURE = ChannelConnectivity.SHUTDOWN

StatusCode = grpc.StatusCode


class GRPCCallOptions(object):
    

    def __init__(self, disable_compression, subcall_of, credentials):
        self.disable_compression = disable_compression
        self.subcall_of = subcall_of
        self.credentials = credentials


def grpc_call_options(disable_compression=False, credentials=None):
    
    return GRPCCallOptions(disable_compression, None, credentials)


GRPCAuthMetadataContext = grpc.AuthMetadataContext
GRPCAuthMetadataPluginCallback = grpc.AuthMetadataPluginCallback
GRPCAuthMetadataPlugin = grpc.AuthMetadataPlugin


class GRPCServicerContext(abc.ABC):
    

    @abc.abstractmethod
    def peer(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def disable_next_response_compression(self):
        
        raise NotImplementedError()


class GRPCInvocationContext(abc.ABC):
    

    @abc.abstractmethod
    def disable_next_request_compression(self):
        
        raise NotImplementedError()


class Server(abc.ABC):
    

    @abc.abstractmethod
    def add_insecure_port(self, address):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def add_secure_port(self, address, server_credentials):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def start(self):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def stop(self, grace):
        
        raise NotImplementedError()
