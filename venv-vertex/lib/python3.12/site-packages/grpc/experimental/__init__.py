














import copy
import functools
import sys
import warnings

import grpc
from grpc._cython import cygrpc as _cygrpc

_EXPERIMENTAL_APIS_USED = set()


class ChannelOptions(object):
    

    SingleThreadedUnaryStream = "SingleThreadedUnaryStream"


class UsageError(Exception):
    




_insecure_channel_credentials = grpc.ChannelCredentials(
    _cygrpc.channel_credentials_insecure()
)


def insecure_channel_credentials():
    
    return _insecure_channel_credentials


class ExperimentalApiWarning(Warning):
    


def _warn_experimental(api_name, stack_offset):
    if api_name not in _EXPERIMENTAL_APIS_USED:
        _EXPERIMENTAL_APIS_USED.add(api_name)
        msg = (
            "'{}' is an experimental API. It is subject to change or ".format(
                api_name
            )
            + "removal between minor releases. Proceed with caution."
        )
        warnings.warn(msg, ExperimentalApiWarning, stacklevel=2 + stack_offset)


def experimental_api(f):
    @functools.wraps(f)
    def _wrapper(*args, **kwargs):
        _warn_experimental(f.__name__, 1)
        return f(*args, **kwargs)

    return _wrapper


def wrap_server_method_handler(wrapper, handler):
    
    if not handler:
        return None

    if not handler.request_streaming:
        if not handler.response_streaming:
            
            
            return handler._replace(unary_unary=wrapper(handler.unary_unary))
        else:
            return handler._replace(unary_stream=wrapper(handler.unary_stream))
    else:
        if not handler.response_streaming:
            return handler._replace(stream_unary=wrapper(handler.stream_unary))
        else:
            return handler._replace(
                stream_stream=wrapper(handler.stream_stream)
            )


__all__ = (
    "ChannelOptions",
    "ExperimentalApiWarning",
    "UsageError",
    "insecure_channel_credentials",
    "wrap_server_method_handler",
)

if sys.version_info > (3, 6):
    from grpc._simple_stubs import stream_stream
    from grpc._simple_stubs import stream_unary
    from grpc._simple_stubs import unary_stream
    from grpc._simple_stubs import unary_unary

    __all__ = __all__ + (unary_unary, unary_stream, stream_unary, stream_stream)
