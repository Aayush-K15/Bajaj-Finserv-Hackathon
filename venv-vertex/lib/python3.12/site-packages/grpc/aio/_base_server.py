














import abc
from typing import Generic, Iterable, Mapping, NoReturn, Optional, Sequence

import grpc

from ._metadata import Metadata  
from ._typing import DoneCallbackType
from ._typing import MetadataType
from ._typing import RequestType
from ._typing import ResponseType


class Server(abc.ABC):
    

    @abc.abstractmethod
    def add_generic_rpc_handlers(
        self, generic_rpc_handlers: Sequence[grpc.GenericRpcHandler]
    ) -> None:
        

    @abc.abstractmethod
    def add_insecure_port(self, address: str) -> int:
        

    @abc.abstractmethod
    def add_secure_port(
        self, address: str, server_credentials: grpc.ServerCredentials
    ) -> int:
        

    @abc.abstractmethod
    async def start(self) -> None:
        

    @abc.abstractmethod
    async def stop(self, grace: Optional[float]) -> None:
        

    @abc.abstractmethod
    async def wait_for_termination(
        self, timeout: Optional[float] = None
    ) -> bool:
        

    def add_registered_method_handlers(self, service_name, method_handlers):
        



class ServicerContext(Generic[RequestType, ResponseType], abc.ABC):
    

    @abc.abstractmethod
    async def read(self) -> RequestType:
        

    @abc.abstractmethod
    async def write(self, message: ResponseType) -> None:
        

    @abc.abstractmethod
    async def send_initial_metadata(
        self, initial_metadata: MetadataType
    ) -> None:
        

    @abc.abstractmethod
    async def abort(
        self,
        code: grpc.StatusCode,
        details: str = "",
        trailing_metadata: MetadataType = tuple(),
    ) -> NoReturn:
        

    @abc.abstractmethod
    def set_trailing_metadata(self, trailing_metadata: MetadataType) -> None:
        

    @abc.abstractmethod
    def invocation_metadata(self) -> Optional[MetadataType]:
        

    @abc.abstractmethod
    def set_code(self, code: grpc.StatusCode) -> None:
        

    @abc.abstractmethod
    def set_details(self, details: str) -> None:
        

    @abc.abstractmethod
    def set_compression(self, compression: grpc.Compression) -> None:
        

    @abc.abstractmethod
    def disable_next_message_compression(self) -> None:
        

    @abc.abstractmethod
    def peer(self) -> str:
        

    @abc.abstractmethod
    def peer_identities(self) -> Optional[Iterable[bytes]]:
        

    @abc.abstractmethod
    def peer_identity_key(self) -> Optional[str]:
        

    @abc.abstractmethod
    def auth_context(self) -> Mapping[str, Iterable[bytes]]:
        

    def time_remaining(self) -> float:
        

    def trailing_metadata(self):
        
        raise NotImplementedError()

    def code(self):
        
        raise NotImplementedError()

    def details(self):
        
        raise NotImplementedError()

    def add_done_callback(self, callback: DoneCallbackType) -> None:
        

    def cancelled(self) -> bool:
        

    def done(self) -> bool:
        
