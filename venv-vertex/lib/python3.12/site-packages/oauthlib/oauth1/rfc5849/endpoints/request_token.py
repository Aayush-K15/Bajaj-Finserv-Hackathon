

import logging

from oauthlib.common import urlencode

from .. import errors
from .base import BaseEndpoint

log = logging.getLogger(__name__)


class RequestTokenEndpoint(BaseEndpoint):

    

    def create_request_token(self, request, credentials):
        
        token = {
            'oauth_token': self.token_generator(),
            'oauth_token_secret': self.token_generator(),
            'oauth_callback_confirmed': 'true'
        }
        token.update(credentials)
        self.request_validator.save_request_token(token, request)
        return urlencode(token.items())

    def create_request_token_response(self, uri, http_method='GET', body=None,
                                      headers=None, credentials=None):
        
        resp_headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        try:
            request = self._create_request(uri, http_method, body, headers)
            valid, processed_request = self.validate_request_token_request(
                request)
            if valid:
                token = self.create_request_token(request, credentials or {})
                return resp_headers, token, 200
            else:
                return {}, None, 401
        except errors.OAuth1Error as e:
            return resp_headers, e.urlencoded, e.status_code

    def validate_request_token_request(self, request):
        
        self._check_transport_security(request)
        self._check_mandatory_parameters(request)

        if request.realm:
            request.realms = request.realm.split(' ')
        else:
            request.realms = self.request_validator.get_default_realms(
                request.client_key, request)
        if not self.request_validator.check_realms(request.realms):
            raise errors.InvalidRequestError(
                description='Invalid realm {}. Allowed are {!r}.'.format(
                    request.realms, self.request_validator.realms))

        if not request.redirect_uri:
            raise errors.InvalidRequestError(
                description='Missing callback URI.')

        if not self.request_validator.validate_timestamp_and_nonce(
                request.client_key, request.timestamp, request.nonce, request,
                request_token=request.resource_owner_key):
            return False, request

        
        
        
        
        
        
        
        valid_client = self.request_validator.validate_client_key(
            request.client_key, request)
        if not valid_client:
            request.client_key = self.request_validator.dummy_client

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        valid_realm = self.request_validator.validate_requested_realms(
            request.client_key, request.realms, request)

        
        
        
        valid_redirect = self.request_validator.validate_redirect_uri(
            request.client_key, request.redirect_uri, request)
        if not request.redirect_uri:
            raise NotImplementedError('Redirect URI must either be provided '
                                      'or set to a default during validation.')

        valid_signature = self._check_signature(request)

        
        
        request.validator_log['client'] = valid_client
        request.validator_log['realm'] = valid_realm
        request.validator_log['callback'] = valid_redirect
        request.validator_log['signature'] = valid_signature

        
        
        
        
        
        v = all((valid_client, valid_realm, valid_redirect, valid_signature))
        if not v:
            log.info("[Failure] request verification failed.")
            log.info("Valid client: %s.", valid_client)
            log.info("Valid realm: %s.", valid_realm)
            log.info("Valid callback: %s.", valid_redirect)
            log.info("Valid signature: %s.", valid_signature)
        return v, request
