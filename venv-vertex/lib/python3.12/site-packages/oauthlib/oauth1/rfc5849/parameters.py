
from urllib.parse import urlparse, urlunparse

from oauthlib.common import extract_params, urlencode

from . import utils




@utils.filter_params
def prepare_headers(oauth_params, headers=None, realm=None):
    
    headers = headers or {}

    
    
    authorization_header_parameters_parts = []
    for oauth_parameter_name, value in oauth_params:
        
        
        
        
        escaped_name = utils.escape(oauth_parameter_name)
        escaped_value = utils.escape(value)

        
        
        
        part = '{}="{}"'.format(escaped_name, escaped_value)

        authorization_header_parameters_parts.append(part)

    
    
    
    
    authorization_header_parameters = ', '.join(
        authorization_header_parameters_parts)

    
    
    
    
    if realm:
        
        authorization_header_parameters = ('realm="%s", ' % realm +
                                           authorization_header_parameters)

    
    authorization_header = 'OAuth %s' % authorization_header_parameters

    
    full_headers = {}
    full_headers.update(headers)
    full_headers['Authorization'] = authorization_header
    return full_headers


def _append_params(oauth_params, params):
    
    merged = list(params)
    merged.extend(oauth_params)
    
    
    
    
    merged.sort(key=lambda i: i[0].startswith('oauth_'))
    return merged


def prepare_form_encoded_body(oauth_params, body):
    
    
    return _append_params(oauth_params, body)


def prepare_request_uri_query(oauth_params, uri):
    
    
    sch, net, path, par, query, fra = urlparse(uri)
    query = urlencode(
        _append_params(oauth_params, extract_params(query) or []))
    return urlunparse((sch, net, path, par, query, fra))
