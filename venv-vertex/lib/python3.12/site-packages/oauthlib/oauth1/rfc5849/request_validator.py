
from . import SIGNATURE_METHODS, utils


class RequestValidator:

    

    def __init__(self):
        pass

    @property
    def allowed_signature_methods(self):
        return SIGNATURE_METHODS

    @property
    def safe_characters(self):
        return set(utils.UNICODE_ASCII_CHARACTER_SET)

    @property
    def client_key_length(self):
        return 20, 30

    @property
    def request_token_length(self):
        return 20, 30

    @property
    def access_token_length(self):
        return 20, 30

    @property
    def timestamp_lifetime(self):
        return 600

    @property
    def nonce_length(self):
        return 20, 30

    @property
    def verifier_length(self):
        return 20, 30

    @property
    def realms(self):
        return []

    @property
    def enforce_ssl(self):
        return True

    def check_client_key(self, client_key):
        
        lower, upper = self.client_key_length
        return (set(client_key) <= self.safe_characters and
                lower <= len(client_key) <= upper)

    def check_request_token(self, request_token):
        
        lower, upper = self.request_token_length
        return (set(request_token) <= self.safe_characters and
                lower <= len(request_token) <= upper)

    def check_access_token(self, request_token):
        
        lower, upper = self.access_token_length
        return (set(request_token) <= self.safe_characters and
                lower <= len(request_token) <= upper)

    def check_nonce(self, nonce):
        
        lower, upper = self.nonce_length
        return (set(nonce) <= self.safe_characters and
                lower <= len(nonce) <= upper)

    def check_verifier(self, verifier):
        
        lower, upper = self.verifier_length
        return (set(verifier) <= self.safe_characters and
                lower <= len(verifier) <= upper)

    def check_realms(self, realms):
        
        return all(r in self.realms for r in realms)

    def _subclass_must_implement(self, fn):
        
        m = "Missing function implementation in {}: {}".format(type(self), fn)
        return NotImplementedError(m)

    @property
    def dummy_client(self):
        
        raise self._subclass_must_implement("dummy_client")

    @property
    def dummy_request_token(self):
        
        raise self._subclass_must_implement("dummy_request_token")

    @property
    def dummy_access_token(self):
        
        raise self._subclass_must_implement("dummy_access_token")

    def get_client_secret(self, client_key, request):
        
        raise self._subclass_must_implement('get_client_secret')

    def get_request_token_secret(self, client_key, token, request):
        
        raise self._subclass_must_implement('get_request_token_secret')

    def get_access_token_secret(self, client_key, token, request):
        
        raise self._subclass_must_implement("get_access_token_secret")

    def get_default_realms(self, client_key, request):
        
        raise self._subclass_must_implement("get_default_realms")

    def get_realms(self, token, request):
        
        raise self._subclass_must_implement("get_realms")

    def get_redirect_uri(self, token, request):
        
        raise self._subclass_must_implement("get_redirect_uri")

    def get_rsa_key(self, client_key, request):
        
        raise self._subclass_must_implement("get_rsa_key")

    def invalidate_request_token(self, client_key, request_token, request):
        
        raise self._subclass_must_implement("invalidate_request_token")

    def validate_client_key(self, client_key, request):
        
        raise self._subclass_must_implement("validate_client_key")

    def validate_request_token(self, client_key, token, request):
        
        raise self._subclass_must_implement("validate_request_token")

    def validate_access_token(self, client_key, token, request):
        
        raise self._subclass_must_implement("validate_access_token")

    def validate_timestamp_and_nonce(self, client_key, timestamp, nonce,
                                     request, request_token=None, access_token=None):
        
        raise self._subclass_must_implement("validate_timestamp_and_nonce")

    def validate_redirect_uri(self, client_key, redirect_uri, request):
        
        raise self._subclass_must_implement("validate_redirect_uri")

    def validate_requested_realms(self, client_key, realms, request):
        
        raise self._subclass_must_implement("validate_requested_realms")

    def validate_realms(self, client_key, token, request, uri=None,
                        realms=None):
        
        raise self._subclass_must_implement("validate_realms")

    def validate_verifier(self, client_key, token, verifier, request):
        
        raise self._subclass_must_implement("validate_verifier")

    def verify_request_token(self, token, request):
        
        raise self._subclass_must_implement("verify_request_token")

    def verify_realms(self, token, realms, request):
        
        raise self._subclass_must_implement("verify_realms")

    def save_access_token(self, token, request):
        
        raise self._subclass_must_implement("save_access_token")

    def save_request_token(self, token, request):
        
        raise self._subclass_must_implement("save_request_token")

    def save_verifier(self, token, verifier, request):
        
        raise self._subclass_must_implement("save_verifier")
