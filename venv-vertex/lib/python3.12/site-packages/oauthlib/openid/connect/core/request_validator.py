
import logging

from oauthlib.oauth2.rfc6749.request_validator import (
    RequestValidator as OAuth2RequestValidator,
)

log = logging.getLogger(__name__)


class RequestValidator(OAuth2RequestValidator):

    def get_authorization_code_scopes(self, client_id, code, redirect_uri, request):
        
        raise NotImplementedError('Subclasses must implement this method.')

    def get_authorization_code_nonce(self, client_id, code, redirect_uri, request):
        
        raise NotImplementedError('Subclasses must implement this method.')

    def get_jwt_bearer_token(self, token, token_handler, request):
        
        raise NotImplementedError('Subclasses must implement this method.')

    def get_id_token(self, token, token_handler, request):
        
        return None

    def finalize_id_token(self, id_token, token, token_handler, request):
        
        raise NotImplementedError('Subclasses must implement this method.')

    def validate_jwt_bearer_token(self, token, scopes, request):
        
        raise NotImplementedError('Subclasses must implement this method.')

    def validate_id_token(self, token, scopes, request):
        
        raise NotImplementedError('Subclasses must implement this method.')

    def validate_silent_authorization(self, request):
        
        raise NotImplementedError('Subclasses must implement this method.')

    def validate_silent_login(self, request):
        
        raise NotImplementedError('Subclasses must implement this method.')

    def validate_user_match(self, id_token_hint, scopes, claims, request):
        
        raise NotImplementedError('Subclasses must implement this method.')

    def get_userinfo_claims(self, request):
        

    def refresh_id_token(self, request):
        
        return True
