import base64
import hashlib
import logging
import time
from json import loads

from oauthlib.oauth2.rfc6749.errors import (
    ConsentRequired, InvalidRequestError, LoginRequired,
)

log = logging.getLogger(__name__)


class GrantTypeBase:

    
    
    
    def __getattr__(self, attr):
        return getattr(self.proxy_target, attr)

    def __setattr__(self, attr, value):
        proxied_attrs = {'refresh_token', 'response_types'}
        if attr in proxied_attrs:
            setattr(self.proxy_target, attr, value)
        else:
            super(OpenIDConnectBase, self).__setattr__(attr, value)

    def validate_authorization_request(self, request):
        
        return self.proxy_target.validate_authorization_request(request)

    def _inflate_claims(self, request):
        
        if request.claims and not isinstance(request.claims, dict):
            
            
            
            try:
                request.claims = loads(request.claims)
            except Exception as ex:
                raise InvalidRequestError(description="Malformed claims parameter",
                                          uri="http://openid.net/specs/openid-connect-core-1_0.html

    def id_token_hash(self, value, hashfunc=hashlib.sha256):
        
        digest = hashfunc(value.encode()).digest()
        left_most = len(digest) // 2
        return base64.urlsafe_b64encode(digest[:left_most]).decode().rstrip("=")

    def add_id_token(self, token, token_handler, request, nonce=None):
        
        
        if not request.scopes or 'openid' not in request.scopes:
            return token

        
        if request.response_type and 'id_token' not in request.response_type:
            return token

        
        id_token = self.request_validator.get_id_token(token, token_handler, request)
        if id_token:
            token['id_token'] = id_token
            return token

        
        
        id_token = {}
        id_token['aud'] = request.client_id
        id_token['iat'] = int(time.time())

        
        
        
        
        
        
        
        
        
        if nonce is not None:
            id_token["nonce"] = nonce

        
        
        
        
        
        
        
        
        
        
        
        if "access_token" in token:
            id_token["at_hash"] = self.id_token_hash(token["access_token"])

        
        
        
        
        
        if "code" in token:
            id_token["c_hash"] = self.id_token_hash(token["code"])

        
        token['id_token'] = self.request_validator.finalize_id_token(id_token, token, token_handler, request)

        return token

    def openid_authorization_validator(self, request):
        

        
        if not request.scopes or 'openid' not in request.scopes:
            return {}

        prompt = request.prompt if request.prompt else []
        if hasattr(prompt, 'split'):
            prompt = prompt.strip().split()
        prompt = set(prompt)

        if 'none' in prompt:

            if len(prompt) > 1:
                msg = "Prompt none is mutually exclusive with other values."
                raise InvalidRequestError(request=request, description=msg)

            if not self.request_validator.validate_silent_login(request):
                raise LoginRequired(request=request)

            if not self.request_validator.validate_silent_authorization(request):
                raise ConsentRequired(request=request)

        self._inflate_claims(request)

        if not self.request_validator.validate_user_match(
                request.id_token_hint, request.scopes, request.claims, request):
            msg = "Session user does not match client supplied user."
            raise LoginRequired(request=request, description=msg)

        ui_locales = request.ui_locales if request.ui_locales else []
        if hasattr(ui_locales, 'split'):
            ui_locales = ui_locales.strip().split()

        request_info = {
            'display': request.display,
            'nonce': request.nonce,
            'prompt': prompt,
            'ui_locales': ui_locales,
            'id_token_hint': request.id_token_hint,
            'login_hint': request.login_hint,
            'claims': request.claims
        }

        return request_info


OpenIDConnectBase = GrantTypeBase
