
import inspect
import sys

from oauthlib.oauth2.rfc6749.errors import FatalClientError, OAuth2Error


class FatalOpenIDClientError(FatalClientError):
    pass


class OpenIDClientError(OAuth2Error):
    pass


class InteractionRequired(OpenIDClientError):
    
    error = 'interaction_required'
    status_code = 401


class LoginRequired(OpenIDClientError):
    
    error = 'login_required'
    status_code = 401


class AccountSelectionRequired(OpenIDClientError):
    
    error = 'account_selection_required'


class ConsentRequired(OpenIDClientError):
    
    error = 'consent_required'
    status_code = 401


class InvalidRequestURI(OpenIDClientError):
    
    error = 'invalid_request_uri'
    description = ('The request_uri in the Authorization Request returns an '
                  'error or contains invalid data.')


class InvalidRequestObject(OpenIDClientError):
    
    error = 'invalid_request_object'
    description = 'The request parameter contains an invalid Request Object.'


class RequestNotSupported(OpenIDClientError):
    
    error = 'request_not_supported'
    description = 'The request parameter is not supported.'


class RequestURINotSupported(OpenIDClientError):
    
    error = 'request_uri_not_supported'
    description = 'The request_uri parameter is not supported.'


class RegistrationNotSupported(OpenIDClientError):
    
    error = 'registration_not_supported'
    description = 'The registration parameter is not supported.'


class InvalidTokenError(OAuth2Error):
    
    error = 'invalid_token'
    status_code = 401
    description = ("The access token provided is expired, revoked, malformed, "
                   "or invalid for other reasons.")


class InsufficientScopeError(OAuth2Error):
    
    error = 'insufficient_scope'
    status_code = 403
    description = ("The request requires higher privileges than provided by "
                   "the access token.")


def raise_from_error(error, params=None):
    kwargs = {
        'description': params.get('error_description'),
        'uri': params.get('error_uri'),
        'state': params.get('state')
    }
    for _, cls in inspect.getmembers(sys.modules[__name__], inspect.isclass):
        if cls.error == error:
            raise cls(**kwargs)
