
import json
import os
import time
import urllib.parse as urlparse

from oauthlib.common import add_params_to_qs, add_params_to_uri
from oauthlib.signals import scope_changed

from .errors import (
    InsecureTransportError, MismatchingStateError, MissingCodeError,
    MissingTokenError, MissingTokenTypeError, raise_from_error,
)
from .tokens import OAuth2Token
from .utils import is_secure_transport, list_to_scope, scope_to_list


def prepare_grant_uri(uri, client_id, response_type, redirect_uri=None,
                      scope=None, state=None, code_challenge=None, code_challenge_method='plain', **kwargs):
    
    if not is_secure_transport(uri):
        raise InsecureTransportError()

    params = [(('response_type', response_type)),
              (('client_id', client_id))]

    if redirect_uri:
        params.append(('redirect_uri', redirect_uri))
    if scope:
        params.append(('scope', list_to_scope(scope)))
    if state:
        params.append(('state', state))
    if code_challenge is not None:
        params.append(('code_challenge', code_challenge))
        params.append(('code_challenge_method', code_challenge_method))

    for k in kwargs:
        if kwargs[k]:
            params.append((str(k), kwargs[k]))

    return add_params_to_uri(uri, params)


def prepare_token_request(grant_type, body='', include_client_id=True, code_verifier=None, **kwargs):
    
    params = [('grant_type', grant_type)]

    if 'scope' in kwargs:
        kwargs['scope'] = list_to_scope(kwargs['scope'])

    
    client_id = kwargs.pop('client_id', None)
    if include_client_id and client_id is not None:
        params.append(('client_id', client_id))

    
    if code_verifier is not None:
        params.append(('code_verifier', code_verifier))

    
    
    client_secret = kwargs.pop('client_secret', None)
    if client_secret is not None:
        params.append(('client_secret', client_secret))

    
    for k in kwargs:
        if kwargs[k]:
            params.append((str(k), kwargs[k]))

    return add_params_to_qs(body, params)


def prepare_token_revocation_request(url, token, token_type_hint="access_token",
        callback=None, body='', **kwargs):
    
    if not is_secure_transport(url):
        raise InsecureTransportError()

    params = [('token', token)]

    if token_type_hint:
        params.append(('token_type_hint', token_type_hint))

    for k in kwargs:
        if kwargs[k]:
            params.append((str(k), kwargs[k]))

    headers = {'Content-Type': 'application/x-www-form-urlencoded'}

    if callback:
        params.append(('callback', callback))
        return add_params_to_uri(url, params), headers, body
    else:
        return url, headers, add_params_to_qs(body, params)


def parse_authorization_code_response(uri, state=None):
    
    if not is_secure_transport(uri):
        raise InsecureTransportError()

    query = urlparse.urlparse(uri).query
    params = dict(urlparse.parse_qsl(query))

    if state and params.get('state') != state:
        raise MismatchingStateError()

    if 'error' in params:
        raise_from_error(params.get('error'), params)

    if 'code' not in params:
        raise MissingCodeError("Missing code parameter in response.")

    return params


def parse_implicit_response(uri, state=None, scope=None):
    
    if not is_secure_transport(uri):
        raise InsecureTransportError()

    fragment = urlparse.urlparse(uri).fragment
    params = dict(urlparse.parse_qsl(fragment, keep_blank_values=True))

    if 'scope' in params:
        params['scope'] = scope_to_list(params['scope'])

    vin, vat, v_at = parse_expires(params)
    if vin:
        params['expires_in'] = vin
    elif 'expires_in' in params:
        params.pop('expires_in')
    if vat:
        params['expires_at'] = vat
    elif 'expires_at' in params:
        params.pop('expires_at')

    if state and params.get('state') != state:
        raise ValueError("Mismatching or missing state in params.")

    params = OAuth2Token(params, old_scope=scope)
    validate_token_parameters(params)
    return params


def parse_token_response(body, scope=None):
    
    try:
        params = json.loads(body)
    except ValueError:

        
        
        

        params = dict(urlparse.parse_qsl(body))

    if 'scope' in params:
        params['scope'] = scope_to_list(params['scope'])

    vin, vat, v_at = parse_expires(params)
    if vin:
        params['expires_in'] = vin
    elif 'expires_in' in params:
        params.pop('expires_in')
    if vat:
        params['expires_at'] = vat
    elif 'expires_at' in params:
        params.pop('expires_at')

    params = OAuth2Token(params, old_scope=scope)
    validate_token_parameters(params)
    return params


def validate_token_parameters(params):
    
    if 'error' in params:
        raise_from_error(params.get('error'), params)

    if 'access_token' not in params:
        raise MissingTokenError(description="Missing access token parameter.")

    if 'token_type' not in params and os.environ.get('OAUTHLIB_STRICT_TOKEN_TYPE'):
        raise MissingTokenTypeError()

    
    
    
    
    if params.scope_changed:
        message = 'Scope has changed from "{old}" to "{new}".'.format(
            old=params.old_scope, new=params.scope,
        )
        scope_changed.send(message=message, old=params.old_scopes, new=params.scopes)
        if not os.environ.get('OAUTHLIB_RELAX_TOKEN_SCOPE', None):
            w = Warning(message)
            w.token = params
            w.old_scope = params.old_scopes
            w.new_scope = params.scopes
            raise w

def parse_expires(params):
    
    expires_in = None
    expires_at = None
    _expires_at = None

    if 'expires_in' in params:
        if isinstance(params.get('expires_in'), int):
            expires_in = params.get('expires_in')
        elif isinstance(params.get('expires_in'), float):
            expires_in = int(params.get('expires_in'))
        elif isinstance(params.get('expires_in'), str):
            try:
                
                expires_in = int(params.get('expires_in'))
            except ValueError:
                raise ValueError("expires_in must be an int")
        elif params.get('expires_in') is not None:
            raise ValueError("expires_in must be an int")

    if 'expires_at' in params:
        if isinstance(params.get('expires_at'), (float, int)):
            expires_at = params.get('expires_at')
            _expires_at = expires_at
        elif isinstance(params.get('expires_at'), str):
            try:
                
                expires_at = int(params.get('expires_at'))
                _expires_at = expires_at
            except ValueError:
                try:
                    expires_at = float(params.get('expires_at'))
                    _expires_at = expires_at
                except ValueError:
                    
                    expires_at = params.get('expires_at')
    if _expires_at is None and expires_in:
        expires_at = round(time.time()) + expires_in
        _expires_at = expires_at
    return expires_in, expires_at, _expires_at
