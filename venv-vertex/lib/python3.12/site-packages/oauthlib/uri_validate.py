
import re



DIGIT = r"[\x30-\x39]"

ALPHA = r"[\x41-\x5A\x61-\x7A]"

HEXDIG = r"[\x30-\x39A-Fa-f]"


pct_encoded = r" %% %(HEXDIG)s %(HEXDIG)s" % locals()


unreserved = r"(?: %(ALPHA)s | %(DIGIT)s | \- | \. | _ | ~ )" % locals()


gen_delims = r"(?: : | / | \? | \



sub_delims = r


pchar = r"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | : | @ )" % locals(
)


reserved = r"(?: %(gen_delims)s | %(sub_delims)s )" % locals()





scheme = r"%(ALPHA)s (?: %(ALPHA)s | %(DIGIT)s | \+ | \- | \. )*" % locals()









dec_octet = r % locals()


IPv4address = r"%(dec_octet)s \. %(dec_octet)s \. %(dec_octet)s \. %(dec_octet)s" % locals(
)


IPv6address = r"([A-Fa-f0-9:]+[:$])[A-Fa-f0-9]{1,4}"


IPvFuture = r"v %(HEXDIG)s+ \. (?: %(unreserved)s | %(sub_delims)s | : )+" % locals()


IP_literal = r"\[ (?: %(IPv6address)s | %(IPvFuture)s ) \]" % locals()


reg_name = r"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s )*" % locals()


userinfo = r"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | : )" % locals(
)


host = r"(?: %(IP_literal)s | %(IPv4address)s | %(reg_name)s )" % locals()


port = r"(?: %(DIGIT)s )*" % locals()


authority = r"(?: %(userinfo)s @)? %(host)s (?: : %(port)s)?" % locals()




segment = r"%(pchar)s*" % locals()


segment_nz = r"%(pchar)s+" % locals()



segment_nz_nc = r"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | @ )+" % locals()


path_abempty = r"(?: / %(segment)s )*" % locals()


path_absolute = r"/ (?: %(segment_nz)s (?: / %(segment)s )* )?" % locals()


path_noscheme = r"%(segment_nz_nc)s (?: / %(segment)s )*" % locals()


path_rootless = r"%(segment_nz)s (?: / %(segment)s )*" % locals()


path_empty = r""  






path = r % locals()




query = r"(?: %(pchar)s | / | \? )*" % locals()


fragment = r"(?: %(pchar)s | / | \? )*" % locals()







hier_part = r % locals()





relative_part = r % locals()


relative_ref = r"%(relative_part)s (?: \? %(query)s)? (?: \
)


URI = r"^(?: %(scheme)s : %(hier_part)s (?: \? %(query)s )? (?: \
)


URI_reference = r"^(?: %(URI)s | %(relative_ref)s )$" % locals()


absolute_URI = r"^(?: %(scheme)s : %(hier_part)s (?: \? %(query)s )? )$" % locals()  


def is_uri(uri):
    return re.match(URI, uri, re.VERBOSE)


def is_uri_reference(uri):
    return re.match(URI_reference, uri, re.VERBOSE)


def is_absolute_uri(uri):
    return re.match(absolute_URI, uri, re.VERBOSE)
