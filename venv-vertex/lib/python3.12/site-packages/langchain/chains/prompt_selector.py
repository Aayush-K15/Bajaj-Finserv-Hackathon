from abc import ABC, abstractmethod
from typing import Callable

from langchain_core.language_models import BaseLanguageModel
from langchain_core.language_models.chat_models import BaseChatModel
from langchain_core.language_models.llms import BaseLLM
from langchain_core.prompts import BasePromptTemplate
from pydantic import BaseModel, Field


class BasePromptSelector(BaseModel, ABC):
    

    @abstractmethod
    def get_prompt(self, llm: BaseLanguageModel) -> BasePromptTemplate:
        


class ConditionalPromptSelector(BasePromptSelector):
    

    default_prompt: BasePromptTemplate
    
    conditionals: list[
        tuple[Callable[[BaseLanguageModel], bool], BasePromptTemplate]
    ] = Field(default_factory=list)
    

    def get_prompt(self, llm: BaseLanguageModel) -> BasePromptTemplate:
        
        for condition, prompt in self.conditionals:
            if condition(llm):
                return prompt
        return self.default_prompt


def is_llm(llm: BaseLanguageModel) -> bool:
    
    return isinstance(llm, BaseLLM)


def is_chat_model(llm: BaseLanguageModel) -> bool:
    
    return isinstance(llm, BaseChatModel)
