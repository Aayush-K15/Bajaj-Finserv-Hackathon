

import numpy as np

import shapely
from shapely.errors import EmptyPartError
from shapely.geometry import point
from shapely.geometry.base import BaseMultipartGeometry

__all__ = ["MultiPoint"]


class MultiPoint(BaseMultipartGeometry):
    

    __slots__ = []

    def __new__(self, points=None):
        
        if points is None:
            
            
            return shapely.from_wkt("MULTIPOINT EMPTY")
        elif isinstance(points, MultiPoint):
            return points
        elif len(points) == 0:
            return shapely.from_wkt("MULTIPOINT EMPTY")

        if isinstance(points, np.ndarray) and np.issubdtype(points.dtype, np.number):
            subs = shapely.points(points)
            if not subs.ndim == 1:
                raise ValueError("Invalid values passed to MultiPoint constructor")
            if shapely.is_empty(subs).any():
                raise EmptyPartError("Can't create MultiPoint with empty component")
        else:
            subs = []
            for item in points:
                p = point.Point(item)
                if p.is_empty:
                    raise EmptyPartError("Can't create MultiPoint with empty component")
                subs.append(p)

        return shapely.multipoints(subs)

    @property
    def __geo_interface__(self):
        
        return {
            "type": "MultiPoint",
            "coordinates": tuple(g.coords[0] for g in self.geoms),
        }

    def svg(self, scale_factor=1.0, fill_color=None, opacity=None):
        
        if self.is_empty:
            return "<g />"
        if fill_color is None:
            fill_color = "
        return (
            "<g>"
            + "".join(p.svg(scale_factor, fill_color, opacity) for p in self.geoms)
            + "</g>"
        )


shapely.lib.registry[4] = MultiPoint
