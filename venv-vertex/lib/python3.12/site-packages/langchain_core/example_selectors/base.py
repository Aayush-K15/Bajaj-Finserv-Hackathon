

from abc import ABC, abstractmethod
from typing import Any

from langchain_core.runnables import run_in_executor


class BaseExampleSelector(ABC):
    

    @abstractmethod
    def add_example(self, example: dict[str, str]) -> Any:
        

    async def aadd_example(self, example: dict[str, str]) -> Any:
        
        return await run_in_executor(None, self.add_example, example)

    @abstractmethod
    def select_examples(self, input_variables: dict[str, str]) -> list[dict]:
        

    async def aselect_examples(self, input_variables: dict[str, str]) -> list[dict]:
        
        return await run_in_executor(None, self.select_examples, input_variables)
