

from __future__ import annotations

import json
import re
from typing import Any, Callable

from langchain_core.exceptions import OutputParserException


def _replace_new_line(match: re.Match[str]) -> str:
    value = match.group(2)
    value = re.sub(r"\n", r"\\n", value)
    value = re.sub(r"\r", r"\\r", value)
    value = re.sub(r"\t", r"\\t", value)
    value = re.sub(r'(?<!\\)"', r"\"", value)

    return match.group(1) + value + match.group(3)


def _custom_parser(multiline_string: str) -> str:
    r
    if isinstance(multiline_string, (bytes, bytearray)):
        multiline_string = multiline_string.decode()

    return re.sub(
        r'("action_input"\:\s*")(.*?)(")',
        _replace_new_line,
        multiline_string,
        flags=re.DOTALL,
    )






def parse_partial_json(s: str, *, strict: bool = False) -> Any:
    
    
    try:
        return json.loads(s, strict=strict)
    except json.JSONDecodeError:
        pass

    
    new_chars = []
    stack = []
    is_inside_string = False
    escaped = False

    
    for char in s:
        new_char = char
        if is_inside_string:
            if char == '"' and not escaped:
                is_inside_string = False
            elif char == "\n" and not escaped:
                new_char = (
                    "\\n"  
                )
            elif char == "\\":
                escaped = not escaped
            else:
                escaped = False
        elif char == '"':
            is_inside_string = True
            escaped = False
        elif char == "{":
            stack.append("}")
        elif char == "[":
            stack.append("]")
        elif char in {"}", "]"}:
            if stack and stack[-1] == char:
                stack.pop()
            else:
                
                return None

        
        new_chars.append(new_char)

    
    
    if is_inside_string:
        if escaped:  
            new_chars.pop()
        new_chars.append('"')

    
    stack.reverse()

    
    while new_chars:
        
        
        
        try:
            return json.loads("".join(new_chars + stack), strict=strict)
        except json.JSONDecodeError:
            
            
            new_chars.pop()

    
    
    
    return json.loads(s, strict=strict)


_json_markdown_re = re.compile(r"```(json)?(.*)", re.DOTALL)


def parse_json_markdown(
    json_string: str, *, parser: Callable[[str], Any] = parse_partial_json
) -> dict:
    
    try:
        return _parse_json(json_string, parser=parser)
    except json.JSONDecodeError:
        
        match = _json_markdown_re.search(json_string)

        
        
        json_str = json_string if match is None else match.group(2)
    return _parse_json(json_str, parser=parser)


_json_strip_chars = " \n\r\t`"


def _parse_json(
    json_str: str, *, parser: Callable[[str], Any] = parse_partial_json
) -> dict:
    
    json_str = json_str.strip(_json_strip_chars)

    
    json_str = _custom_parser(json_str)

    
    return parser(json_str)


def parse_and_check_json_markdown(text: str, expected_keys: list[str]) -> dict:
    
    try:
        json_obj = parse_json_markdown(text)
    except json.JSONDecodeError as e:
        msg = f"Got invalid JSON object. Error: {e}"
        raise OutputParserException(msg) from e
    for key in expected_keys:
        if key not in json_obj:
            msg = (
                f"Got invalid return object. Expected key `{key}` "
                f"to be present, but got {json_obj}"
            )
            raise OutputParserException(msg)
    return json_obj
