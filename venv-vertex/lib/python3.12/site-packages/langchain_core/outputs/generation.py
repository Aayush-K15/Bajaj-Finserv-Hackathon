

from __future__ import annotations

from typing import Any, Literal, Optional

from langchain_core.load import Serializable
from langchain_core.utils._merge import merge_dicts


class Generation(Serializable):
    

    text: str
    

    generation_info: Optional[dict[str, Any]] = None
    
    type: Literal["Generation"] = "Generation"
    

    @classmethod
    def is_lc_serializable(cls) -> bool:
        
        return True

    @classmethod
    def get_lc_namespace(cls) -> list[str]:
        
        return ["langchain", "schema", "output"]


class GenerationChunk(Generation):
    

    def __add__(self, other: GenerationChunk) -> GenerationChunk:
        
        if isinstance(other, GenerationChunk):
            generation_info = merge_dicts(
                self.generation_info or {},
                other.generation_info or {},
            )
            return GenerationChunk(
                text=self.text + other.text,
                generation_info=generation_info or None,
            )
        msg = f"unsupported operand type(s) for +: '{type(self)}' and '{type(other)}'"
        raise TypeError(msg)
