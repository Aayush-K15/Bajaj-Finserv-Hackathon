

from __future__ import annotations

from abc import ABC, abstractmethod
from collections.abc import Sequence
from typing import Literal, cast

from typing_extensions import TypedDict

from langchain_core.load.serializable import Serializable
from langchain_core.messages import (
    AnyMessage,
    BaseMessage,
    HumanMessage,
    get_buffer_string,
)


class PromptValue(Serializable, ABC):
    

    @classmethod
    def is_lc_serializable(cls) -> bool:
        
        return True

    @classmethod
    def get_lc_namespace(cls) -> list[str]:
        
        return ["langchain", "schema", "prompt"]

    @abstractmethod
    def to_string(self) -> str:
        

    @abstractmethod
    def to_messages(self) -> list[BaseMessage]:
        


class StringPromptValue(PromptValue):
    

    text: str
    
    type: Literal["StringPromptValue"] = "StringPromptValue"

    @classmethod
    def get_lc_namespace(cls) -> list[str]:
        
        return ["langchain", "prompts", "base"]

    def to_string(self) -> str:
        
        return self.text

    def to_messages(self) -> list[BaseMessage]:
        
        return [HumanMessage(content=self.text)]


class ChatPromptValue(PromptValue):
    

    messages: Sequence[BaseMessage]
    

    def to_string(self) -> str:
        
        return get_buffer_string(self.messages)

    def to_messages(self) -> list[BaseMessage]:
        
        return list(self.messages)

    @classmethod
    def get_lc_namespace(cls) -> list[str]:
        
        return ["langchain", "prompts", "chat"]


class ImageURL(TypedDict, total=False):
    

    detail: Literal["auto", "low", "high"]
    

    url: str
    


class ImagePromptValue(PromptValue):
    

    image_url: ImageURL
    
    type: Literal["ImagePromptValue"] = "ImagePromptValue"

    def to_string(self) -> str:
        
        return self.image_url["url"]

    def to_messages(self) -> list[BaseMessage]:
        
        return [HumanMessage(content=[cast("dict", self.image_url)])]


class ChatPromptValueConcrete(ChatPromptValue):
    

    messages: Sequence[AnyMessage]
    

    type: Literal["ChatPromptValueConcrete"] = "ChatPromptValueConcrete"
