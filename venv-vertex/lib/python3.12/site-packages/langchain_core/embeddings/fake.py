


import hashlib

from pydantic import BaseModel
from typing_extensions import override

from langchain_core.embeddings import Embeddings


class FakeEmbeddings(Embeddings, BaseModel):
    

    size: int
    

    def _get_embedding(self) -> list[float]:
        import numpy as np

        return list(np.random.default_rng().normal(size=self.size))

    @override
    def embed_documents(self, texts: list[str]) -> list[list[float]]:
        return [self._get_embedding() for _ in texts]

    @override
    def embed_query(self, text: str) -> list[float]:
        return self._get_embedding()


class DeterministicFakeEmbedding(Embeddings, BaseModel):
    

    size: int
    

    def _get_embedding(self, seed: int) -> list[float]:
        import numpy as np

        
        rng = np.random.default_rng(seed)
        return list(rng.normal(size=self.size))

    def _get_seed(self, text: str) -> int:
        
        return int(hashlib.sha256(text.encode("utf-8")).hexdigest(), 16) % 10**8

    @override
    def embed_documents(self, texts: list[str]) -> list[list[float]]:
        return [self._get_embedding(seed=self._get_seed(_)) for _ in texts]

    @override
    def embed_query(self, text: str) -> list[float]:
        return self._get_embedding(seed=self._get_seed(text))
