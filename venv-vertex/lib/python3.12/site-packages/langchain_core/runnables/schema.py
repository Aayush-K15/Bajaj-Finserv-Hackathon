

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Literal, Union

from typing_extensions import NotRequired, TypedDict

if TYPE_CHECKING:
    from collections.abc import Sequence


class EventData(TypedDict, total=False):
    

    input: Any
    
    output: Any
    
    chunk: Any
    


class BaseStreamEvent(TypedDict):
    

    event: str
    
    run_id: str
    
    tags: NotRequired[list[str]]
    
    metadata: NotRequired[dict[str, Any]]
    

    parent_ids: Sequence[str]
    


class StandardStreamEvent(BaseStreamEvent):
    

    data: EventData
    
    name: str
    


class CustomStreamEvent(BaseStreamEvent):
    

    
    event: Literal["on_custom_event"]  
    
    name: str
    
    data: Any
    


StreamEvent = Union[StandardStreamEvent, CustomStreamEvent]
