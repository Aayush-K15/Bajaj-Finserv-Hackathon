

















import os
import logging
import ray
from typing import Callable, Optional, Union, TYPE_CHECKING
import warnings
from google.cloud import aiplatform
from google.cloud.aiplatform import initializer
from google.cloud.aiplatform import utils
from google.cloud.aiplatform.vertex_ray.predict.util import constants
from google.cloud.aiplatform.vertex_ray.predict.util import (
    predict_utils,
)
from google.cloud.aiplatform.vertex_ray.util._validation_utils import (
    _V2_4_WARNING_MESSAGE,
    _V2_9_WARNING_MESSAGE,
)


try:
    from ray.train import tensorflow as ray_tensorflow

    if TYPE_CHECKING:
        import tensorflow as tf

except ModuleNotFoundError as mnfe:
    raise ModuleNotFoundError("Tensorflow isn't installed.") from mnfe


def register_tensorflow(
    checkpoint: ray_tensorflow.TensorflowCheckpoint,
    artifact_uri: Optional[str] = None,
    _model: Optional[Union["tf.keras.Model", Callable[[], "tf.keras.Model"]]] = None,
    display_name: Optional[str] = None,
    tensorflow_version: Optional[str] = None,
    **kwargs,
) -> aiplatform.Model:
    
    if ray.__version__ == "2.9.3":
        warnings.warn(_V2_9_WARNING_MESSAGE, DeprecationWarning, stacklevel=1)
    if tensorflow_version is None:
        tensorflow_version = constants._TENSORFLOW_VERSION
    artifact_uri = artifact_uri or initializer.global_config.staging_bucket
    predict_utils.validate_artifact_uri(artifact_uri)
    prefix = "ray-on-vertex-registered-tensorflow-model"
    display_model_name = (
        (f"{prefix}-{utils.timestamped_unique_name()}")
        if display_name is None
        else display_name
    )
    tf_model = _get_tensorflow_model_from(checkpoint, model=_model)
    model_dir = os.path.join(artifact_uri, prefix)
    try:
        import tensorflow as tf

        tf.saved_model.save(tf_model, model_dir)
    except ImportError:
        logging.warning("TensorFlow must be installed to save the trained model.")
    return aiplatform.Model.upload_tensorflow_saved_model(
        saved_model_dir=model_dir,
        display_name=display_model_name,
        tensorflow_version=tensorflow_version,
        **kwargs,
    )


def _get_tensorflow_model_from(
    checkpoint: ray_tensorflow.TensorflowCheckpoint,
    model: Optional[Union["tf.keras.Model", Callable[[], "tf.keras.Model"]]] = None,
) -> "tf.keras.Model":
    
    ray_version = ray.__version__
    if ray_version == "2.4.0":
        raise RuntimeError(_V2_4_WARNING_MESSAGE)

    try:
        import tensorflow as tf

        try:
            return tf.saved_model.load(checkpoint.path)
        except OSError:
            return tf.saved_model.load("gs://" + checkpoint.path)

    except ImportError:
        logging.warning("TensorFlow must be installed to load the trained model.")
