


















import os
import pickle
import warnings
import ray
import ray.cloudpickle as cpickle
import tempfile
from typing import Optional, TYPE_CHECKING

from google.cloud import aiplatform
from google.cloud.aiplatform import initializer
from google.cloud.aiplatform import utils
from google.cloud.aiplatform.utils import gcs_utils
from google.cloud.aiplatform.vertex_ray.predict.util import constants
from google.cloud.aiplatform.vertex_ray.predict.util import (
    predict_utils,
)
from google.cloud.aiplatform.vertex_ray.util._validation_utils import (
    _V2_4_WARNING_MESSAGE,
    _V2_9_WARNING_MESSAGE,
)


try:
    from ray.train import sklearn as ray_sklearn

    if TYPE_CHECKING:
        import sklearn

except ImportError as ie:
    if ray.__version__ < "2.42.0":
        raise ModuleNotFoundError("Sklearn isn't installed.") from ie
    else:
        sklearn = None


def register_sklearn(
    checkpoint: "ray_sklearn.SklearnCheckpoint",
    artifact_uri: Optional[str] = None,
    display_name: Optional[str] = None,
    **kwargs,
) -> aiplatform.Model:
    
    ray_version = ray.__version__
    if ray_version != "2.9.3":
        raise RuntimeError(
            f"Ray version {ray_version} is not supported to upload Sklearn"
            " model to Vertex Model Registry yet. Please use Ray 2.9.3."
        )
    if ray_version == "2.9.3":
        warnings.warn(_V2_9_WARNING_MESSAGE, DeprecationWarning, stacklevel=1)

    artifact_uri = artifact_uri or initializer.global_config.staging_bucket
    predict_utils.validate_artifact_uri(artifact_uri)
    display_model_name = (
        (f"ray-on-vertex-registered-sklearn-model-{utils.timestamped_unique_name()}")
        if display_name is None
        else display_name
    )
    estimator = _get_estimator_from(checkpoint)

    model_dir = os.path.join(artifact_uri, display_model_name)
    file_path = os.path.join(model_dir, constants._PICKLE_FILE_NAME)

    with tempfile.NamedTemporaryFile(suffix=constants._PICKLE_EXTENTION) as temp_file:
        pickle.dump(estimator, temp_file)
        gcs_utils.upload_to_gcs(temp_file.name, file_path)
        return aiplatform.Model.upload_scikit_learn_model_file(
            model_file_path=temp_file.name, display_name=display_model_name, **kwargs
        )


def _get_estimator_from(
    checkpoint: "ray_sklearn.SklearnCheckpoint",
) -> "sklearn.base.BaseEstimator":
    

    ray_version = ray.__version__
    if ray_version == "2.4.0":
        raise RuntimeError(_V2_4_WARNING_MESSAGE)
    if ray_version != "2.9.3":
        raise RuntimeError(
            f"Ray version {ray_version} is not supported to convert a Sklearn"
            " checkpoint to sklearn estimator on Vertex yet. Please use Ray 2.9.3."
        )

    try:
        return checkpoint.get_model()
    except AttributeError:
        model_file_name = ray.train.sklearn.SklearnCheckpoint.MODEL_FILENAME

    model_path = os.path.join(checkpoint.path, model_file_name)

    if os.path.exists(model_path):
        with open(model_path, mode="rb") as f:
            obj = pickle.load(f)
    else:
        try:
            
            with tempfile.TemporaryDirectory() as temp_dir:
                gcs_utils.download_from_gcs("gs://" + checkpoint.path, temp_dir)
                with open(f"{temp_dir}/{model_file_name}", mode="rb") as f:
                    obj = cpickle.load(f)
        except Exception as e:
            raise RuntimeError(
                f"{model_file_name} not found in this checkpoint due to: {e}."
            )
    return obj
