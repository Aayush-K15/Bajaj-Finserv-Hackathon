import contextlib
import os
import platform
import socket
import sys
import sysconfig
import textwrap
import typing
import unittest
import warnings

from tornado.testing import bind_unused_port

_TestCaseType = typing.TypeVar("_TestCaseType", bound=typing.Type[unittest.TestCase])

skipIfNonUnix = unittest.skipIf(
    os.name != "posix" or sys.platform == "cygwin", "non-unix platform"
)



skipIfNoNetwork = unittest.skipIf("NO_NETWORK" in os.environ, "network access disabled")

skipNotCPython = unittest.skipIf(
    
    
    platform.python_implementation() != "CPython"
    or sysconfig.get_config_var("Py_GIL_DISABLED"),
    "Not CPython implementation",
)


def _detect_ipv6():
    if not socket.has_ipv6:
        
        
        return False
    sock = None
    try:
        sock = socket.socket(socket.AF_INET6)
        sock.bind(("::1", 0))
    except OSError:
        return False
    finally:
        if sock is not None:
            sock.close()
    return True


skipIfNoIPv6 = unittest.skipIf(not _detect_ipv6(), "ipv6 support not present")


def refusing_port():
    
    
    
    
    
    server_socket, port = bind_unused_port()
    server_socket.setblocking(True)
    client_socket = socket.socket()
    client_socket.connect(("127.0.0.1", port))
    conn, client_addr = server_socket.accept()
    conn.close()
    server_socket.close()
    return (client_socket.close, client_addr[1])


def exec_test(caller_globals, caller_locals, s):
    
    
    
    
    global_namespace = dict(caller_globals, **caller_locals)  
    local_namespace = {}  
    exec(textwrap.dedent(s), global_namespace, local_namespace)
    return local_namespace


@contextlib.contextmanager
def ignore_deprecation():
    
    with warnings.catch_warnings():
        warnings.simplefilter("ignore", DeprecationWarning)
        yield


ABT_SKIP_MESSAGE = "abstract base class"


def abstract_base_test(cls: _TestCaseType) -> _TestCaseType:
    

    
    
    class AbstractBaseWrapper(cls):  
        @classmethod
        def setUpClass(cls):
            if cls is AbstractBaseWrapper:
                raise unittest.SkipTest(ABT_SKIP_MESSAGE)
            super(AbstractBaseWrapper, cls).setUpClass()

    return AbstractBaseWrapper  
