from __future__ import annotations

from dataclasses import dataclass
from typing import Any, NewType



Store = NewType("Store", list[dict[str, Any]])


@dataclass(frozen=True, eq=True)
class IndexSelection:
    

    name: str
    value: list[int]
    store: Store

    @staticmethod
    def from_vega(name: str, signal: dict[str, dict] | None, store: Store):
        
        if signal is None:
            indices = []
        else:
            points = signal.get("vlPoint", {}).get("or", [])
            indices = [p["_vgsid_"] - 1 for p in points]
        return IndexSelection(name=name, value=indices, store=store)


@dataclass(frozen=True, eq=True)
class PointSelection:
    

    name: str
    value: list[dict[str, Any]]
    store: Store

    @staticmethod
    def from_vega(name: str, signal: dict[str, dict] | None, store: Store):
        
        points = [] if signal is None else signal.get("vlPoint", {}).get("or", [])
        return PointSelection(name=name, value=points, store=store)


@dataclass(frozen=True, eq=True)
class IntervalSelection:
    

    name: str
    value: dict[str, list]
    store: Store

    @staticmethod
    def from_vega(name: str, signal: dict[str, list] | None, store: Store):
        
        if signal is None:
            signal = {}
        return IntervalSelection(name=name, value=signal, store=store)
