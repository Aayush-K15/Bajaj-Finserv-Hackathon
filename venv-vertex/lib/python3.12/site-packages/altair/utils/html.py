from __future__ import annotations

import json
from typing import Any, Literal

import jinja2

from altair.utils._importers import import_vl_convert, vl_version_for_vl_convert

TemplateName = Literal["standard", "universal", "inline", "olli"]
RenderMode = Literal["vega", "vega-lite"]

HTML_TEMPLATE = jinja2.Template(
    
)


HTML_TEMPLATE_UNIVERSAL = jinja2.Template(
    
)







INLINE_HTML_TEMPLATE = jinja2.Template(
    
)


HTML_TEMPLATE_OLLI = jinja2.Template(
    
)


TEMPLATES: dict[TemplateName, jinja2.Template] = {
    "standard": HTML_TEMPLATE,
    "universal": HTML_TEMPLATE_UNIVERSAL,
    "inline": INLINE_HTML_TEMPLATE,
    "olli": HTML_TEMPLATE_OLLI,
}


def spec_to_html(
    spec: dict[str, Any],
    mode: RenderMode,
    vega_version: str | None,
    vegaembed_version: str | None,
    vegalite_version: str | None = None,
    base_url: str = "https://cdn.jsdelivr.net/npm",
    output_div: str = "vis",
    embed_options: dict[str, Any] | None = None,
    json_kwds: dict[str, Any] | None = None,
    fullhtml: bool = True,
    requirejs: bool = False,
    template: jinja2.Template | TemplateName = "standard",
) -> str:
    
    embed_options = embed_options or {}
    json_kwds = json_kwds or {}

    mode = embed_options.setdefault("mode", mode)

    if mode not in {"vega", "vega-lite"}:
        msg = "mode must be either 'vega' or 'vega-lite'"
        raise ValueError(msg)

    if vega_version is None:
        msg = "must specify vega_version"
        raise ValueError(msg)

    if vegaembed_version is None:
        msg = "must specify vegaembed_version"
        raise ValueError(msg)

    if mode == "vega-lite" and vegalite_version is None:
        msg = "must specify vega-lite version for mode='vega-lite'"
        raise ValueError(msg)

    render_kwargs = {}
    if template == "inline":
        vlc = import_vl_convert()
        vl_version = vl_version_for_vl_convert()
        render_kwargs["vegaembed_script"] = vlc.javascript_bundle(vl_version=vl_version)
    elif template == "olli":
        OLLI_VERSION = "2"
        OLLI_ADAPTERS_VERSION = "2"
        render_kwargs["olli_version"] = OLLI_VERSION
        render_kwargs["olli_adapters_version"] = OLLI_ADAPTERS_VERSION

    jinja_template = TEMPLATES.get(template, template)  
    if not hasattr(jinja_template, "render"):
        msg = f"Invalid template: {jinja_template}"
        raise ValueError(msg)

    return jinja_template.render(
        spec=json.dumps(spec, **json_kwds),
        embed_options=json.dumps(embed_options),
        mode=mode,
        vega_version=vega_version,
        vegalite_version=vegalite_version,
        vegaembed_version=vegaembed_version,
        base_url=base_url,
        output_div=output_div,
        fullhtml=fullhtml,
        requirejs=requirejs,
        **render_kwargs,
    )
