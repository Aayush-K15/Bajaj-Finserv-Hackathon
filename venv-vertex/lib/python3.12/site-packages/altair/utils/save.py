from __future__ import annotations

import json
import pathlib
import warnings
from typing import IO, TYPE_CHECKING, Any, Literal

from altair.utils._vegafusion_data import using_vegafusion
from altair.utils.deprecation import deprecated_warn
from altair.vegalite.v5.data import data_transformers

from .mimebundle import spec_to_mimebundle

if TYPE_CHECKING:
    from pathlib import Path


def write_file_or_filename(
    fp: str | Path | IO,
    content: str | bytes,
    mode: str = "w",
    encoding: str | None = None,
) -> None:
    
    if isinstance(fp, (str, pathlib.Path)):
        with pathlib.Path(fp).open(mode=mode, encoding=encoding) as f:
            f.write(content)
    else:
        fp.write(content)


def set_inspect_format_argument(
    format: str | None, fp: str | Path | IO, inline: bool
) -> str:
    
    if format is None:
        if isinstance(fp, (str, pathlib.Path)):
            format = pathlib.Path(fp).suffix.lstrip(".")
        else:
            msg = (
                "must specify file format: "
                "['png', 'svg', 'pdf', 'html', 'json', 'vega']"
            )
            raise ValueError(msg)

    if format != "html" and inline:
        warnings.warn("inline argument ignored for non HTML formats.", stacklevel=1)

    return format


def set_inspect_mode_argument(
    mode: Literal["vega-lite"] | None,
    embed_options: dict[str, Any],
    spec: dict[str, Any],
    vegalite_version: str | None,
) -> Literal["vega-lite"]:
    
    if mode is None:
        if "mode" in embed_options:
            mode = embed_options["mode"]
        elif "$schema" in spec:
            mode = spec["$schema"].split("/")[-2]
        else:
            mode = "vega-lite"

    if mode != "vega-lite":
        msg = "mode must be 'vega-lite', " f"not '{mode}'"
        raise ValueError(msg)

    if mode == "vega-lite" and vegalite_version is None:
        msg = "must specify vega-lite version"
        raise ValueError(msg)

    return mode


def save(
    chart,
    fp: str | Path | IO,
    vega_version: str | None,
    vegaembed_version: str | None,
    format: Literal["json", "html", "png", "svg", "pdf"] | None = None,
    mode: Literal["vega-lite"] | None = None,
    vegalite_version: str | None = None,
    embed_options: dict | None = None,
    json_kwds: dict | None = None,
    scale_factor: float = 1,
    engine: Literal["vl-convert"] | None = None,
    inline: bool = False,
    **kwargs,
) -> None:
    
    if _ := kwargs.pop("webdriver", None):
        deprecated_warn(
            "The webdriver argument is not relevant for the new vl-convert engine which replaced altair_saver. "
            "The argument will be removed in a future release.",
            version="5.0.0",
        )

    json_kwds = json_kwds or {}
    encoding = kwargs.get("encoding", "utf-8")
    format = set_inspect_format_argument(format, fp, inline)  

    def perform_save() -> None:
        spec = chart.to_dict(context={"pre_transform": False})

        inner_mode = set_inspect_mode_argument(
            mode, embed_options or {}, spec, vegalite_version
        )

        if format == "json":
            json_spec = json.dumps(spec, **json_kwds)
            write_file_or_filename(fp, json_spec, mode="w", encoding=encoding)
        elif format == "html":
            if inline:
                kwargs["template"] = "inline"
            mb_html = spec_to_mimebundle(
                spec=spec,
                format=format,
                mode=inner_mode,
                vega_version=vega_version,
                vegalite_version=vegalite_version,
                vegaembed_version=vegaembed_version,
                embed_options=embed_options,
                json_kwds=json_kwds,
                **kwargs,
            )
            write_file_or_filename(
                fp, mb_html["text/html"], mode="w", encoding=encoding
            )
        elif format == "png":
            mb_png = spec_to_mimebundle(
                spec=spec,
                format=format,
                mode=inner_mode,
                vega_version=vega_version,
                vegalite_version=vegalite_version,
                vegaembed_version=vegaembed_version,
                embed_options=embed_options,
                scale_factor=scale_factor,
                engine=engine,
                **kwargs,
            )
            write_file_or_filename(fp, mb_png[0]["image/png"], mode="wb")
        elif format in {"svg", "pdf", "vega"}:
            mb_any = spec_to_mimebundle(
                spec=spec,
                format=format,
                mode=inner_mode,
                vega_version=vega_version,
                vegalite_version=vegalite_version,
                vegaembed_version=vegaembed_version,
                embed_options=embed_options,
                scale_factor=scale_factor,
                engine=engine,
                **kwargs,
            )
            if format == "pdf":
                write_file_or_filename(fp, mb_any["application/pdf"], mode="wb")
            else:
                write_file_or_filename(
                    fp, mb_any["image/svg+xml"], mode="w", encoding=encoding
                )
        else:
            msg = f"Unsupported format: '{format}'"
            raise ValueError(msg)

    if using_vegafusion():
        
        
        
        with data_transformers.disable_max_rows():
            perform_save()
    else:
        
        
        
        
        
        with data_transformers.enable("default"), data_transformers.disable_max_rows():
            perform_save()
