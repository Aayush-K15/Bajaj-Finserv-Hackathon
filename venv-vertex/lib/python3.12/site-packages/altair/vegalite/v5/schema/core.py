


from __future__ import annotations

import json
import pkgutil
from typing import TYPE_CHECKING, Any, Literal

from altair.utils.schemapi import (  
    SchemaBase,
    Undefined,
    UndefinedType,
    _subclasses,
)

if TYPE_CHECKING:
    
    from collections.abc import Iterator, Sequence

    from altair import Parameter
    from altair.typing import Optional

    from ._typing import *  


__all__ = [
    "URI",
    "Aggregate",
    "AggregateOp",
    "AggregateTransform",
    "AggregatedFieldDef",
    "Align",
    "AllSortString",
    "AnyMark",
    "AnyMarkConfig",
    "AreaConfig",
    "ArgmaxDef",
    "ArgminDef",
    "AutoSizeParams",
    "AutosizeType",
    "Axis",
    "AxisConfig",
    "AxisOrient",
    "AxisResolveMap",
    "BBox",
    "BarConfig",
    "BaseTitleNoValueRefs",
    "Baseline",
    "BinExtent",
    "BinParams",
    "BinTransform",
    "BindCheckbox",
    "BindDirect",
    "BindInput",
    "BindRadioSelect",
    "BindRange",
    "Binding",
    "BinnedTimeUnit",
    "Blend",
    "BoxPlot",
    "BoxPlotConfig",
    "BoxPlotDef",
    "BrushConfig",
    "CalculateTransform",
    "Categorical",
    "ColorDef",
    "ColorName",
    "ColorScheme",
    "CompositeMark",
    "CompositeMarkDef",
    "CompositionConfig",
    "ConcatSpecGenericSpec",
    "ConditionalAxisColor",
    "ConditionalAxisLabelAlign",
    "ConditionalAxisLabelBaseline",
    "ConditionalAxisLabelFontStyle",
    "ConditionalAxisLabelFontWeight",
    "ConditionalAxisNumber",
    "ConditionalAxisNumberArray",
    "ConditionalAxisPropertyAlignnull",
    "ConditionalAxisPropertyColornull",
    "ConditionalAxisPropertyFontStylenull",
    "ConditionalAxisPropertyFontWeightnull",
    "ConditionalAxisPropertyTextBaselinenull",
    "ConditionalAxisPropertynumberArraynull",
    "ConditionalAxisPropertynumbernull",
    "ConditionalAxisPropertystringnull",
    "ConditionalAxisString",
    "ConditionalMarkPropFieldOrDatumDef",
    "ConditionalMarkPropFieldOrDatumDefTypeForShape",
    "ConditionalParameterMarkPropFieldOrDatumDef",
    "ConditionalParameterMarkPropFieldOrDatumDefTypeForShape",
    "ConditionalParameterStringFieldDef",
    "ConditionalParameterValueDefGradientstringnullExprRef",
    "ConditionalParameterValueDefTextExprRef",
    "ConditionalParameterValueDefnumber",
    "ConditionalParameterValueDefnumberArrayExprRef",
    "ConditionalParameterValueDefnumberExprRef",
    "ConditionalParameterValueDefstringExprRef",
    "ConditionalParameterValueDefstringnullExprRef",
    "ConditionalPredicateMarkPropFieldOrDatumDef",
    "ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape",
    "ConditionalPredicateStringFieldDef",
    "ConditionalPredicateValueDefAlignnullExprRef",
    "ConditionalPredicateValueDefColornullExprRef",
    "ConditionalPredicateValueDefFontStylenullExprRef",
    "ConditionalPredicateValueDefFontWeightnullExprRef",
    "ConditionalPredicateValueDefGradientstringnullExprRef",
    "ConditionalPredicateValueDefTextBaselinenullExprRef",
    "ConditionalPredicateValueDefTextExprRef",
    "ConditionalPredicateValueDefnumber",
    "ConditionalPredicateValueDefnumberArrayExprRef",
    "ConditionalPredicateValueDefnumberArraynullExprRef",
    "ConditionalPredicateValueDefnumberExprRef",
    "ConditionalPredicateValueDefnumbernullExprRef",
    "ConditionalPredicateValueDefstringExprRef",
    "ConditionalPredicateValueDefstringnullExprRef",
    "ConditionalStringFieldDef",
    "ConditionalValueDefGradientstringnullExprRef",
    "ConditionalValueDefTextExprRef",
    "ConditionalValueDefnumber",
    "ConditionalValueDefnumberArrayExprRef",
    "ConditionalValueDefnumberExprRef",
    "ConditionalValueDefstringExprRef",
    "ConditionalValueDefstringnullExprRef",
    "Config",
    "CsvDataFormat",
    "Cursor",
    "Cyclical",
    "Data",
    "DataFormat",
    "DataSource",
    "Datasets",
    "DateTime",
    "DatumDef",
    "Day",
    "DensityTransform",
    "DerivedStream",
    "DictInlineDataset",
    "DictSelectionInit",
    "DictSelectionInitInterval",
    "Diverging",
    "DomainUnionWith",
    "DsvDataFormat",
    "Element",
    "Encoding",
    "EncodingSortField",
    "ErrorBand",
    "ErrorBandConfig",
    "ErrorBandDef",
    "ErrorBar",
    "ErrorBarConfig",
    "ErrorBarDef",
    "ErrorBarExtent",
    "EventStream",
    "EventType",
    "Expr",
    "ExprRef",
    "ExtentTransform",
    "FacetEncodingFieldDef",
    "FacetFieldDef",
    "FacetSpec",
    "FacetedEncoding",
    "FacetedUnitSpec",
    "Feature",
    "FeatureCollection",
    "FeatureGeometryGeoJsonProperties",
    "Field",
    "FieldDefWithoutScale",
    "FieldEqualPredicate",
    "FieldGTEPredicate",
    "FieldGTPredicate",
    "FieldLTEPredicate",
    "FieldLTPredicate",
    "FieldName",
    "FieldOneOfPredicate",
    "FieldOrDatumDefWithConditionDatumDefGradientstringnull",
    "FieldOrDatumDefWithConditionDatumDefnumber",
    "FieldOrDatumDefWithConditionDatumDefnumberArray",
    "FieldOrDatumDefWithConditionDatumDefstringnull",
    "FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull",
    "FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull",
    "FieldOrDatumDefWithConditionMarkPropFieldDefnumber",
    "FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray",
    "FieldOrDatumDefWithConditionStringDatumDefText",
    "FieldOrDatumDefWithConditionStringFieldDefText",
    "FieldOrDatumDefWithConditionStringFieldDefstring",
    "FieldRange",
    "FieldRangePredicate",
    "FieldValidPredicate",
    "FilterTransform",
    "Fit",
    "FlattenTransform",
    "FoldTransform",
    "FontStyle",
    "FontWeight",
    "FormatConfig",
    "Generator",
    "GenericUnitSpecEncodingAnyMark",
    "GeoJsonFeature",
    "GeoJsonFeatureCollection",
    "GeoJsonProperties",
    "Geometry",
    "GeometryCollection",
    "Gradient",
    "GradientStop",
    "GraticuleGenerator",
    "GraticuleParams",
    "HConcatSpecGenericSpec",
    "Header",
    "HeaderConfig",
    "HexColor",
    "ImputeMethod",
    "ImputeParams",
    "ImputeSequence",
    "ImputeTransform",
    "InlineData",
    "InlineDataset",
    "Interpolate",
    "IntervalSelectionConfig",
    "IntervalSelectionConfigWithoutType",
    "JoinAggregateFieldDef",
    "JoinAggregateTransform",
    "JsonDataFormat",
    "LabelOverlap",
    "LatLongDef",
    "LatLongFieldDef",
    "LayerRepeatMapping",
    "LayerRepeatSpec",
    "LayerSpec",
    "LayoutAlign",
    "Legend",
    "LegendBinding",
    "LegendConfig",
    "LegendOrient",
    "LegendResolveMap",
    "LegendStreamBinding",
    "LineConfig",
    "LineString",
    "LinearGradient",
    "LocalMultiTimeUnit",
    "LocalSingleTimeUnit",
    "Locale",
    "LoessTransform",
    "LogicalAndPredicate",
    "LogicalNotPredicate",
    "LogicalOrPredicate",
    "LookupSelection",
    "LookupTransform",
    "Mark",
    "MarkConfig",
    "MarkDef",
    "MarkInvalidDataMode",
    "MarkPropDefGradientstringnull",
    "MarkPropDefnumber",
    "MarkPropDefnumberArray",
    "MarkPropDefstringnullTypeForShape",
    "MarkType",
    "MergedStream",
    "Month",
    "MultiLineString",
    "MultiPoint",
    "MultiPolygon",
    "MultiTimeUnit",
    "NamedData",
    "NonArgAggregateOp",
    "NonLayerRepeatSpec",
    "NonNormalizedSpec",
    "NumberLocale",
    "NumericArrayMarkPropDef",
    "NumericMarkPropDef",
    "OffsetDef",
    "OrderFieldDef",
    "OrderOnlyDef",
    "OrderValueDef",
    "Orient",
    "Orientation",
    "OverlayMarkDef",
    "Padding",
    "ParameterExtent",
    "ParameterName",
    "ParameterPredicate",
    "Parse",
    "ParseValue",
    "PivotTransform",
    "Point",
    "PointSelectionConfig",
    "PointSelectionConfigWithoutType",
    "PolarDef",
    "Polygon",
    "Position",
    "Position2Def",
    "PositionDatumDef",
    "PositionDatumDefBase",
    "PositionDef",
    "PositionFieldDef",
    "PositionFieldDefBase",
    "PositionValueDef",
    "Predicate",
    "PredicateComposition",
    "PrimitiveValue",
    "Projection",
    "ProjectionConfig",
    "ProjectionType",
    "QuantileTransform",
    "RadialGradient",
    "RangeConfig",
    "RangeEnum",
    "RangeRaw",
    "RangeRawArray",
    "RangeScheme",
    "RectConfig",
    "RegressionTransform",
    "RelativeBandSize",
    "RepeatMapping",
    "RepeatRef",
    "RepeatSpec",
    "Resolve",
    "ResolveMode",
    "Root",
    "RowColLayoutAlign",
    "RowColboolean",
    "RowColnumber",
    "RowColumnEncodingFieldDef",
    "SampleTransform",
    "Scale",
    "ScaleBinParams",
    "ScaleBins",
    "ScaleConfig",
    "ScaleDatumDef",
    "ScaleFieldDef",
    "ScaleInterpolateEnum",
    "ScaleInterpolateParams",
    "ScaleInvalidDataConfig",
    "ScaleInvalidDataShowAsValueangle",
    "ScaleInvalidDataShowAsValuecolor",
    "ScaleInvalidDataShowAsValuefill",
    "ScaleInvalidDataShowAsValuefillOpacity",
    "ScaleInvalidDataShowAsValueopacity",
    "ScaleInvalidDataShowAsValueradius",
    "ScaleInvalidDataShowAsValueshape",
    "ScaleInvalidDataShowAsValuesize",
    "ScaleInvalidDataShowAsValuestroke",
    "ScaleInvalidDataShowAsValuestrokeDash",
    "ScaleInvalidDataShowAsValuestrokeOpacity",
    "ScaleInvalidDataShowAsValuestrokeWidth",
    "ScaleInvalidDataShowAsValuetheta",
    "ScaleInvalidDataShowAsValuex",
    "ScaleInvalidDataShowAsValuexOffset",
    "ScaleInvalidDataShowAsValuey",
    "ScaleInvalidDataShowAsValueyOffset",
    "ScaleInvalidDataShowAsangle",
    "ScaleInvalidDataShowAscolor",
    "ScaleInvalidDataShowAsfill",
    "ScaleInvalidDataShowAsfillOpacity",
    "ScaleInvalidDataShowAsopacity",
    "ScaleInvalidDataShowAsradius",
    "ScaleInvalidDataShowAsshape",
    "ScaleInvalidDataShowAssize",
    "ScaleInvalidDataShowAsstroke",
    "ScaleInvalidDataShowAsstrokeDash",
    "ScaleInvalidDataShowAsstrokeOpacity",
    "ScaleInvalidDataShowAsstrokeWidth",
    "ScaleInvalidDataShowAstheta",
    "ScaleInvalidDataShowAsx",
    "ScaleInvalidDataShowAsxOffset",
    "ScaleInvalidDataShowAsy",
    "ScaleInvalidDataShowAsyOffset",
    "ScaleResolveMap",
    "ScaleType",
    "SchemaBase",
    "SchemeParams",
    "SecondaryFieldDef",
    "SelectionConfig",
    "SelectionInit",
    "SelectionInitInterval",
    "SelectionInitIntervalMapping",
    "SelectionInitMapping",
    "SelectionParameter",
    "SelectionResolution",
    "SelectionType",
    "SequenceGenerator",
    "SequenceParams",
    "SequentialMultiHue",
    "SequentialSingleHue",
    "ShapeDef",
    "SharedEncoding",
    "SingleDefUnitChannel",
    "SingleTimeUnit",
    "Sort",
    "SortArray",
    "SortByChannel",
    "SortByChannelDesc",
    "SortByEncoding",
    "SortField",
    "SortOrder",
    "Spec",
    "SphereGenerator",
    "StackOffset",
    "StackTransform",
    "StandardType",
    "Step",
    "StepFor",
    "Stream",
    "StringFieldDef",
    "StringFieldDefWithCondition",
    "StringValueDefWithCondition",
    "StrokeCap",
    "StrokeJoin",
    "StyleConfigIndex",
    "SymbolShape",
    "TextBaseline",
    "TextDef",
    "TextDirection",
    "TickConfig",
    "TickCount",
    "TimeInterval",
    "TimeIntervalStep",
    "TimeLocale",
    "TimeUnit",
    "TimeUnitParams",
    "TimeUnitTransform",
    "TimeUnitTransformParams",
    "TitleAnchor",
    "TitleConfig",
    "TitleFrame",
    "TitleOrient",
    "TitleParams",
    "TooltipContent",
    "TopLevelConcatSpec",
    "TopLevelFacetSpec",
    "TopLevelHConcatSpec",
    "TopLevelLayerSpec",
    "TopLevelParameter",
    "TopLevelRepeatSpec",
    "TopLevelSelectionParameter",
    "TopLevelSpec",
    "TopLevelUnitSpec",
    "TopLevelVConcatSpec",
    "TopoDataFormat",
    "Transform",
    "Type",
    "TypeForShape",
    "TypedFieldDef",
    "UnitSpec",
    "UnitSpecWithFrame",
    "UrlData",
    "UtcMultiTimeUnit",
    "UtcSingleTimeUnit",
    "VConcatSpecGenericSpec",
    "ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull",
    "ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull",
    "ValueDefWithConditionMarkPropFieldOrDatumDefnumber",
    "ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray",
    "ValueDefWithConditionMarkPropFieldOrDatumDefstringnull",
    "ValueDefWithConditionStringFieldDefText",
    "ValueDefnumber",
    "ValueDefnumberwidthheightExprRef",
    "VariableParameter",
    "Vector2DateTime",
    "Vector2Vector2number",
    "Vector2boolean",
    "Vector2number",
    "Vector2string",
    "Vector3number",
    "Vector7string",
    "Vector10string",
    "Vector12string",
    "VegaLiteSchema",
    "ViewBackground",
    "ViewConfig",
    "WindowEventType",
    "WindowFieldDef",
    "WindowOnlyOp",
    "WindowTransform",
    "load_schema",
]


def load_schema() -> dict:
    
    schema_bytes = pkgutil.get_data(__name__, "vega-lite-schema.json")
    if schema_bytes is None:
        msg = "Unable to load vega-lite-schema.json"
        raise ValueError(msg)
    return json.loads(schema_bytes.decode("utf-8"))


class VegaLiteSchema(SchemaBase):
    _rootschema = load_schema()

    @classmethod
    def _default_wrapper_classes(cls) -> Iterator[type[Any]]:
        return _subclasses(VegaLiteSchema)


class Root(VegaLiteSchema):
    

    _schema = VegaLiteSchema._rootschema

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class Aggregate(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class AggregateOp(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class AggregatedFieldDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        op: Optional[SchemaBase | AggregateOp_T] = Undefined,
        field: Optional[str | SchemaBase] = Undefined,
        **kwds,
    ):
        super().__init__(op=op, field=field, **kwds)


class Align(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class AnyMark(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class AnyMarkConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class AreaConfig(AnyMarkConfig):
    

    _schema = {"$ref": "

    def __init__(
        self,
        align: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        angle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        ariaRole: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        ariaRoleDescription: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        aspect: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        baseline: Optional[Parameter | SchemaBase | Map | TextBaseline_T] = Undefined,
        blend: Optional[Parameter | SchemaBase | Map | Blend_T] = Undefined,
        color: Optional[str | Parameter | SchemaBase | Map | ColorName_T] = Undefined,
        cornerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusBottomLeft: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusBottomRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusTopLeft: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusTopRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cursor: Optional[Parameter | SchemaBase | Map | Cursor_T] = Undefined,
        description: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        dir: Optional[Parameter | SchemaBase | Map | TextDirection_T] = Undefined,
        dx: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        dy: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        ellipsis: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        endAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fill: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        fillOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        filled: Optional[bool] = Undefined,
        font: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontWeight: Optional[Parameter | SchemaBase | Map | FontWeight_T] = Undefined,
        height: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        href: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        innerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        interpolate: Optional[Parameter | SchemaBase | Map | Interpolate_T] = Undefined,
        invalid: Optional[SchemaBase | MarkInvalidDataMode_T | None] = Undefined,
        limit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        line: Optional[bool | SchemaBase | Map] = Undefined,
        lineBreak: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        lineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        opacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        order: Optional[bool | None] = Undefined,
        orient: Optional[SchemaBase | Orientation_T] = Undefined,
        outerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        padAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        point: Optional[bool | SchemaBase | Literal["transparent"] | Map] = Undefined,
        radius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        shape: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        size: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        smooth: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        startAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        stroke: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        strokeCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        strokeDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        strokeDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeJoin: Optional[Parameter | SchemaBase | Map | StrokeJoin_T] = Undefined,
        strokeMiterLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tension: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        text: Optional[str | Parameter | SchemaBase | Sequence[str] | Map] = Undefined,
        theta: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        theta2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        timeUnitBandPosition: Optional[float] = Undefined,
        timeUnitBandSize: Optional[float] = Undefined,
        tooltip: Optional[
            str | bool | float | Parameter | SchemaBase | Map | None
        ] = Undefined,
        url: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        width: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        x: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        x2: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        y: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        y2: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        **kwds,
    ):
        super().__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            baseline=baseline,
            blend=blend,
            color=color,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            line=line,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            point=point,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            y=y,
            y2=y2,
            **kwds,
        )


class ArgmaxDef(Aggregate):
    

    _schema = {"$ref": "

    def __init__(self, argmax: Optional[str | SchemaBase] = Undefined, **kwds):
        super().__init__(argmax=argmax, **kwds)


class ArgminDef(Aggregate):
    

    _schema = {"$ref": "

    def __init__(self, argmin: Optional[str | SchemaBase] = Undefined, **kwds):
        super().__init__(argmin=argmin, **kwds)


class AutoSizeParams(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        contains: Optional[Literal["content", "padding"]] = Undefined,
        resize: Optional[bool] = Undefined,
        type: Optional[SchemaBase | AutosizeType_T] = Undefined,
        **kwds,
    ):
        super().__init__(contains=contains, resize=resize, type=type, **kwds)


class AutosizeType(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Axis(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        bandPosition: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        description: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        domain: Optional[bool] = Undefined,
        domainCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        domainColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        domainDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        domainDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        domainOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        domainWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        format: Optional[str | SchemaBase | Map] = Undefined,
        formatType: Optional[str] = Undefined,
        grid: Optional[bool] = Undefined,
        gridCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        gridColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        gridDash: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        gridDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gridOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gridWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelAlign: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        labelAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelBaseline: Optional[
            Parameter | SchemaBase | Map | TextBaseline_T
        ] = Undefined,
        labelBound: Optional[bool | float | Parameter | SchemaBase | Map] = Undefined,
        labelColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        labelExpr: Optional[str] = Undefined,
        labelFlush: Optional[bool | float] = Undefined,
        labelFlushOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        labelFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        labelFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        labelLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOverlap: Optional[
            bool | Parameter | SchemaBase | Literal["greedy", "parity"] | Map
        ] = Undefined,
        labelPadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelSeparation: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labels: Optional[bool] = Undefined,
        maxExtent: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        minExtent: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        orient: Optional[Parameter | SchemaBase | Map | AxisOrient_T] = Undefined,
        position: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        style: Optional[str | Sequence[str]] = Undefined,
        tickBand: Optional[
            Parameter | SchemaBase | Literal["center", "extent"] | Map
        ] = Undefined,
        tickCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        tickColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        tickCount: Optional[
            float | Parameter | SchemaBase | Map | TimeInterval_T
        ] = Undefined,
        tickDash: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        tickDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tickExtra: Optional[bool] = Undefined,
        tickMinStep: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tickOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tickOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tickRound: Optional[bool] = Undefined,
        tickSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tickWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        ticks: Optional[bool] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        titleAlign: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        titleAnchor: Optional[Parameter | SchemaBase | Map | TitleAnchor_T] = Undefined,
        titleAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleBaseline: Optional[
            Parameter | SchemaBase | Map | TextBaseline_T
        ] = Undefined,
        titleColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        titleFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        titleFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        titleFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        titleLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titlePadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleX: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleY: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        translate: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        values: Optional[
            Parameter
            | SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
        ] = Undefined,
        zindex: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            aria=aria,
            bandPosition=bandPosition,
            description=description,
            domain=domain,
            domainCap=domainCap,
            domainColor=domainColor,
            domainDash=domainDash,
            domainDashOffset=domainDashOffset,
            domainOpacity=domainOpacity,
            domainWidth=domainWidth,
            format=format,
            formatType=formatType,
            grid=grid,
            gridCap=gridCap,
            gridColor=gridColor,
            gridDash=gridDash,
            gridDashOffset=gridDashOffset,
            gridOpacity=gridOpacity,
            gridWidth=gridWidth,
            labelAlign=labelAlign,
            labelAngle=labelAngle,
            labelBaseline=labelBaseline,
            labelBound=labelBound,
            labelColor=labelColor,
            labelExpr=labelExpr,
            labelFlush=labelFlush,
            labelFlushOffset=labelFlushOffset,
            labelFont=labelFont,
            labelFontSize=labelFontSize,
            labelFontStyle=labelFontStyle,
            labelFontWeight=labelFontWeight,
            labelLimit=labelLimit,
            labelLineHeight=labelLineHeight,
            labelOffset=labelOffset,
            labelOpacity=labelOpacity,
            labelOverlap=labelOverlap,
            labelPadding=labelPadding,
            labelSeparation=labelSeparation,
            labels=labels,
            maxExtent=maxExtent,
            minExtent=minExtent,
            offset=offset,
            orient=orient,
            position=position,
            style=style,
            tickBand=tickBand,
            tickCap=tickCap,
            tickColor=tickColor,
            tickCount=tickCount,
            tickDash=tickDash,
            tickDashOffset=tickDashOffset,
            tickExtra=tickExtra,
            tickMinStep=tickMinStep,
            tickOffset=tickOffset,
            tickOpacity=tickOpacity,
            tickRound=tickRound,
            tickSize=tickSize,
            tickWidth=tickWidth,
            ticks=ticks,
            title=title,
            titleAlign=titleAlign,
            titleAnchor=titleAnchor,
            titleAngle=titleAngle,
            titleBaseline=titleBaseline,
            titleColor=titleColor,
            titleFont=titleFont,
            titleFontSize=titleFontSize,
            titleFontStyle=titleFontStyle,
            titleFontWeight=titleFontWeight,
            titleLimit=titleLimit,
            titleLineHeight=titleLineHeight,
            titleOpacity=titleOpacity,
            titlePadding=titlePadding,
            titleX=titleX,
            titleY=titleY,
            translate=translate,
            values=values,
            zindex=zindex,
            **kwds,
        )


class AxisConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        bandPosition: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        description: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        disable: Optional[bool] = Undefined,
        domain: Optional[bool] = Undefined,
        domainCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        domainColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        domainDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        domainDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        domainOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        domainWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        format: Optional[str | SchemaBase | Map] = Undefined,
        formatType: Optional[str] = Undefined,
        grid: Optional[bool] = Undefined,
        gridCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        gridColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        gridDash: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        gridDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gridOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gridWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelAlign: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        labelAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelBaseline: Optional[
            Parameter | SchemaBase | Map | TextBaseline_T
        ] = Undefined,
        labelBound: Optional[bool | float | Parameter | SchemaBase | Map] = Undefined,
        labelColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        labelExpr: Optional[str] = Undefined,
        labelFlush: Optional[bool | float] = Undefined,
        labelFlushOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        labelFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        labelFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        labelLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOverlap: Optional[
            bool | Parameter | SchemaBase | Literal["greedy", "parity"] | Map
        ] = Undefined,
        labelPadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelSeparation: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labels: Optional[bool] = Undefined,
        maxExtent: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        minExtent: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        orient: Optional[Parameter | SchemaBase | Map | AxisOrient_T] = Undefined,
        position: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        style: Optional[str | Sequence[str]] = Undefined,
        tickBand: Optional[
            Parameter | SchemaBase | Literal["center", "extent"] | Map
        ] = Undefined,
        tickCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        tickColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        tickCount: Optional[
            float | Parameter | SchemaBase | Map | TimeInterval_T
        ] = Undefined,
        tickDash: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        tickDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tickExtra: Optional[bool] = Undefined,
        tickMinStep: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tickOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tickOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tickRound: Optional[bool] = Undefined,
        tickSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tickWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        ticks: Optional[bool] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        titleAlign: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        titleAnchor: Optional[Parameter | SchemaBase | Map | TitleAnchor_T] = Undefined,
        titleAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleBaseline: Optional[
            Parameter | SchemaBase | Map | TextBaseline_T
        ] = Undefined,
        titleColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        titleFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        titleFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        titleFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        titleLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titlePadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleX: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleY: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        translate: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        values: Optional[
            Parameter
            | SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
        ] = Undefined,
        zindex: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            aria=aria,
            bandPosition=bandPosition,
            description=description,
            disable=disable,
            domain=domain,
            domainCap=domainCap,
            domainColor=domainColor,
            domainDash=domainDash,
            domainDashOffset=domainDashOffset,
            domainOpacity=domainOpacity,
            domainWidth=domainWidth,
            format=format,
            formatType=formatType,
            grid=grid,
            gridCap=gridCap,
            gridColor=gridColor,
            gridDash=gridDash,
            gridDashOffset=gridDashOffset,
            gridOpacity=gridOpacity,
            gridWidth=gridWidth,
            labelAlign=labelAlign,
            labelAngle=labelAngle,
            labelBaseline=labelBaseline,
            labelBound=labelBound,
            labelColor=labelColor,
            labelExpr=labelExpr,
            labelFlush=labelFlush,
            labelFlushOffset=labelFlushOffset,
            labelFont=labelFont,
            labelFontSize=labelFontSize,
            labelFontStyle=labelFontStyle,
            labelFontWeight=labelFontWeight,
            labelLimit=labelLimit,
            labelLineHeight=labelLineHeight,
            labelOffset=labelOffset,
            labelOpacity=labelOpacity,
            labelOverlap=labelOverlap,
            labelPadding=labelPadding,
            labelSeparation=labelSeparation,
            labels=labels,
            maxExtent=maxExtent,
            minExtent=minExtent,
            offset=offset,
            orient=orient,
            position=position,
            style=style,
            tickBand=tickBand,
            tickCap=tickCap,
            tickColor=tickColor,
            tickCount=tickCount,
            tickDash=tickDash,
            tickDashOffset=tickDashOffset,
            tickExtra=tickExtra,
            tickMinStep=tickMinStep,
            tickOffset=tickOffset,
            tickOpacity=tickOpacity,
            tickRound=tickRound,
            tickSize=tickSize,
            tickWidth=tickWidth,
            ticks=ticks,
            title=title,
            titleAlign=titleAlign,
            titleAnchor=titleAnchor,
            titleAngle=titleAngle,
            titleBaseline=titleBaseline,
            titleColor=titleColor,
            titleFont=titleFont,
            titleFontSize=titleFontSize,
            titleFontStyle=titleFontStyle,
            titleFontWeight=titleFontWeight,
            titleLimit=titleLimit,
            titleLineHeight=titleLineHeight,
            titleOpacity=titleOpacity,
            titlePadding=titlePadding,
            titleX=titleX,
            titleY=titleY,
            translate=translate,
            values=values,
            zindex=zindex,
            **kwds,
        )


class AxisOrient(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class AxisResolveMap(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        x: Optional[SchemaBase | ResolveMode_T] = Undefined,
        y: Optional[SchemaBase | ResolveMode_T] = Undefined,
        **kwds,
    ):
        super().__init__(x=x, y=y, **kwds)


class BBox(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class BarConfig(AnyMarkConfig):
    

    _schema = {"$ref": "

    def __init__(
        self,
        align: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        angle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        ariaRole: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        ariaRoleDescription: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        aspect: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        baseline: Optional[Parameter | SchemaBase | Map | TextBaseline_T] = Undefined,
        binSpacing: Optional[float] = Undefined,
        blend: Optional[Parameter | SchemaBase | Map | Blend_T] = Undefined,
        color: Optional[str | Parameter | SchemaBase | Map | ColorName_T] = Undefined,
        continuousBandSize: Optional[float] = Undefined,
        cornerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusBottomLeft: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusBottomRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusEnd: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusTopLeft: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusTopRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cursor: Optional[Parameter | SchemaBase | Map | Cursor_T] = Undefined,
        description: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        dir: Optional[Parameter | SchemaBase | Map | TextDirection_T] = Undefined,
        discreteBandSize: Optional[float | SchemaBase | Map] = Undefined,
        dx: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        dy: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        ellipsis: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        endAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fill: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        fillOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        filled: Optional[bool] = Undefined,
        font: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontWeight: Optional[Parameter | SchemaBase | Map | FontWeight_T] = Undefined,
        height: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        href: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        innerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        interpolate: Optional[Parameter | SchemaBase | Map | Interpolate_T] = Undefined,
        invalid: Optional[SchemaBase | MarkInvalidDataMode_T | None] = Undefined,
        limit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        lineBreak: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        lineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        minBandSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        opacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        order: Optional[bool | None] = Undefined,
        orient: Optional[SchemaBase | Orientation_T] = Undefined,
        outerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        padAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        shape: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        size: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        smooth: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        startAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        stroke: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        strokeCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        strokeDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        strokeDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeJoin: Optional[Parameter | SchemaBase | Map | StrokeJoin_T] = Undefined,
        strokeMiterLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tension: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        text: Optional[str | Parameter | SchemaBase | Sequence[str] | Map] = Undefined,
        theta: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        theta2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        timeUnitBandPosition: Optional[float] = Undefined,
        timeUnitBandSize: Optional[float] = Undefined,
        tooltip: Optional[
            str | bool | float | Parameter | SchemaBase | Map | None
        ] = Undefined,
        url: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        width: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        x: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        x2: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        y: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        y2: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        **kwds,
    ):
        super().__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            baseline=baseline,
            binSpacing=binSpacing,
            blend=blend,
            color=color,
            continuousBandSize=continuousBandSize,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusEnd=cornerRadiusEnd,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            discreteBandSize=discreteBandSize,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            minBandSize=minBandSize,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            y=y,
            y2=y2,
            **kwds,
        )


class BaseTitleNoValueRefs(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        align: Optional[SchemaBase | Align_T] = Undefined,
        anchor: Optional[Parameter | SchemaBase | Map | TitleAnchor_T] = Undefined,
        angle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        baseline: Optional[SchemaBase | TextBaseline_T] = Undefined,
        color: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        dx: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        dy: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        font: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontWeight: Optional[Parameter | SchemaBase | Map | FontWeight_T] = Undefined,
        frame: Optional[str | Parameter | SchemaBase | Map | TitleFrame_T] = Undefined,
        limit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        lineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        orient: Optional[Parameter | SchemaBase | Map | TitleOrient_T] = Undefined,
        subtitleColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        subtitleFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        subtitleFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        subtitleFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        subtitleFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        subtitleLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        subtitlePadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        zindex: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            align=align,
            anchor=anchor,
            angle=angle,
            aria=aria,
            baseline=baseline,
            color=color,
            dx=dx,
            dy=dy,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            frame=frame,
            limit=limit,
            lineHeight=lineHeight,
            offset=offset,
            orient=orient,
            subtitleColor=subtitleColor,
            subtitleFont=subtitleFont,
            subtitleFontSize=subtitleFontSize,
            subtitleFontStyle=subtitleFontStyle,
            subtitleFontWeight=subtitleFontWeight,
            subtitleLineHeight=subtitleLineHeight,
            subtitlePadding=subtitlePadding,
            zindex=zindex,
            **kwds,
        )


class BinExtent(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class BinParams(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        anchor: Optional[float] = Undefined,
        base: Optional[float] = Undefined,
        binned: Optional[bool] = Undefined,
        divide: Optional[Sequence[float]] = Undefined,
        extent: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        maxbins: Optional[float] = Undefined,
        minstep: Optional[float] = Undefined,
        nice: Optional[bool] = Undefined,
        step: Optional[float] = Undefined,
        steps: Optional[Sequence[float]] = Undefined,
        **kwds,
    ):
        super().__init__(
            anchor=anchor,
            base=base,
            binned=binned,
            divide=divide,
            extent=extent,
            maxbins=maxbins,
            minstep=minstep,
            nice=nice,
            step=step,
            steps=steps,
            **kwds,
        )


class Binding(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class BindCheckbox(Binding):
    

    _schema = {"$ref": "

    def __init__(
        self,
        input: Optional[Literal["checkbox"]] = Undefined,
        debounce: Optional[float] = Undefined,
        element: Optional[str | SchemaBase] = Undefined,
        name: Optional[str] = Undefined,
        **kwds,
    ):
        super().__init__(
            input=input, debounce=debounce, element=element, name=name, **kwds
        )


class BindDirect(Binding):
    

    _schema = {"$ref": "

    def __init__(
        self,
        element: Optional[str | SchemaBase | Map] = Undefined,
        debounce: Optional[float] = Undefined,
        event: Optional[str] = Undefined,
        **kwds,
    ):
        super().__init__(element=element, debounce=debounce, event=event, **kwds)


class BindInput(Binding):
    

    _schema = {"$ref": "

    def __init__(
        self,
        autocomplete: Optional[str] = Undefined,
        debounce: Optional[float] = Undefined,
        element: Optional[str | SchemaBase] = Undefined,
        input: Optional[str] = Undefined,
        name: Optional[str] = Undefined,
        placeholder: Optional[str] = Undefined,
        **kwds,
    ):
        super().__init__(
            autocomplete=autocomplete,
            debounce=debounce,
            element=element,
            input=input,
            name=name,
            placeholder=placeholder,
            **kwds,
        )


class BindRadioSelect(Binding):
    

    _schema = {"$ref": "

    def __init__(
        self,
        input: Optional[Literal["radio", "select"]] = Undefined,
        options: Optional[Sequence[Any]] = Undefined,
        debounce: Optional[float] = Undefined,
        element: Optional[str | SchemaBase] = Undefined,
        labels: Optional[Sequence[str]] = Undefined,
        name: Optional[str] = Undefined,
        **kwds,
    ):
        super().__init__(
            input=input,
            options=options,
            debounce=debounce,
            element=element,
            labels=labels,
            name=name,
            **kwds,
        )


class BindRange(Binding):
    

    _schema = {"$ref": "

    def __init__(
        self,
        input: Optional[Literal["range"]] = Undefined,
        debounce: Optional[float] = Undefined,
        element: Optional[str | SchemaBase] = Undefined,
        max: Optional[float] = Undefined,
        min: Optional[float] = Undefined,
        name: Optional[str] = Undefined,
        step: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            input=input,
            debounce=debounce,
            element=element,
            max=max,
            min=min,
            name=name,
            step=step,
            **kwds,
        )


class BinnedTimeUnit(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class Blend(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class BoxPlotConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        box: Optional[bool | SchemaBase | Map] = Undefined,
        extent: Optional[float | Literal["min-max"]] = Undefined,
        median: Optional[bool | SchemaBase | Map] = Undefined,
        outliers: Optional[bool | SchemaBase | Map] = Undefined,
        rule: Optional[bool | SchemaBase | Map] = Undefined,
        size: Optional[float] = Undefined,
        ticks: Optional[bool | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            box=box,
            extent=extent,
            median=median,
            outliers=outliers,
            rule=rule,
            size=size,
            ticks=ticks,
            **kwds,
        )


class BrushConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        cursor: Optional[SchemaBase | Cursor_T] = Undefined,
        fill: Optional[str | SchemaBase | ColorName_T] = Undefined,
        fillOpacity: Optional[float] = Undefined,
        stroke: Optional[str | SchemaBase | ColorName_T] = Undefined,
        strokeDash: Optional[Sequence[float]] = Undefined,
        strokeDashOffset: Optional[float] = Undefined,
        strokeOpacity: Optional[float] = Undefined,
        strokeWidth: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            cursor=cursor,
            fill=fill,
            fillOpacity=fillOpacity,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            **kwds,
        )


class Color(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ColorDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ColorName(Color):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class ColorScheme(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class Categorical(ColorScheme):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class CompositeMark(AnyMark):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class BoxPlot(CompositeMark):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class CompositeMarkDef(AnyMark):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class BoxPlotDef(CompositeMarkDef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        type: Optional[SchemaBase | BoxPlot_T] = Undefined,
        box: Optional[bool | SchemaBase | Map] = Undefined,
        clip: Optional[bool] = Undefined,
        color: Optional[str | Parameter | SchemaBase | Map | ColorName_T] = Undefined,
        extent: Optional[float | Literal["min-max"]] = Undefined,
        invalid: Optional[SchemaBase | MarkInvalidDataMode_T | None] = Undefined,
        median: Optional[bool | SchemaBase | Map] = Undefined,
        opacity: Optional[float] = Undefined,
        orient: Optional[SchemaBase | Orientation_T] = Undefined,
        outliers: Optional[bool | SchemaBase | Map] = Undefined,
        rule: Optional[bool | SchemaBase | Map] = Undefined,
        size: Optional[float] = Undefined,
        ticks: Optional[bool | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            type=type,
            box=box,
            clip=clip,
            color=color,
            extent=extent,
            invalid=invalid,
            median=median,
            opacity=opacity,
            orient=orient,
            outliers=outliers,
            rule=rule,
            size=size,
            ticks=ticks,
            **kwds,
        )


class CompositionConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        columns: Optional[float] = Undefined,
        spacing: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(columns=columns, spacing=spacing, **kwds)


class ConditionalAxisColor(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisLabelAlign(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisLabelBaseline(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisLabelFontStyle(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisLabelFontWeight(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisNumber(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisNumberArray(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisPropertyAlignnull(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisPropertyColornull(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisPropertyFontStylenull(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisPropertyFontWeightnull(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisPropertyTextBaselinenull(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisPropertynumberArraynull(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisPropertynumbernull(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisPropertystringnull(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalAxisString(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalMarkPropFieldOrDatumDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalMarkPropFieldOrDatumDefTypeForShape(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalParameterMarkPropFieldOrDatumDef(ConditionalMarkPropFieldOrDatumDef):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalParameterMarkPropFieldOrDatumDefTypeForShape(
    ConditionalMarkPropFieldOrDatumDefTypeForShape
):
    

    _schema = {
        "$ref": "
    }

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalPredicateMarkPropFieldOrDatumDef(ConditionalMarkPropFieldOrDatumDef):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape(
    ConditionalMarkPropFieldOrDatumDefTypeForShape
):
    

    _schema = {
        "$ref": "
    }

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalPredicateValueDefAlignnullExprRef(VegaLiteSchema):
    

    _schema = {
        "$ref": "
    }

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalPredicateValueDefColornullExprRef(VegaLiteSchema):
    

    _schema = {
        "$ref": "
    }

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalPredicateValueDefFontStylenullExprRef(VegaLiteSchema):
    

    _schema = {
        "$ref": "
    }

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalPredicateValueDefFontWeightnullExprRef(VegaLiteSchema):
    

    _schema = {
        "$ref": "
    }

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalPredicateValueDefTextBaselinenullExprRef(VegaLiteSchema):
    

    _schema = {
        "$ref": "
    }

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalPredicateValueDefnumberArraynullExprRef(VegaLiteSchema):
    

    _schema = {
        "$ref": "
    }

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalPredicateValueDefnumbernullExprRef(VegaLiteSchema):
    

    _schema = {
        "$ref": "
    }

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalStringFieldDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalParameterStringFieldDef(ConditionalStringFieldDef):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        param: Optional[str | SchemaBase] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Literal["binned"] | Map | None] = Undefined,
        empty: Optional[bool] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        format: Optional[str | SchemaBase | Map] = Undefined,
        formatType: Optional[str] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            param=param,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            empty=empty,
            field=field,
            format=format,
            formatType=formatType,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class ConditionalPredicateStringFieldDef(ConditionalStringFieldDef):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        test: Optional[str | SchemaBase | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Literal["binned"] | Map | None] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        format: Optional[str | SchemaBase | Map] = Undefined,
        formatType: Optional[str] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            test=test,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            format=format,
            formatType=formatType,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class ConditionalValueDefGradientstringnullExprRef(VegaLiteSchema):
    

    _schema = {
        "$ref": "
    }

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalParameterValueDefGradientstringnullExprRef(
    ConditionalValueDefGradientstringnullExprRef
):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        param: Optional[str | SchemaBase] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Map | None] = Undefined,
        empty: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(param=param, value=value, empty=empty, **kwds)


class ConditionalPredicateValueDefGradientstringnullExprRef(
    ConditionalValueDefGradientstringnullExprRef
):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        test: Optional[str | SchemaBase | Map] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Map | None] = Undefined,
        **kwds,
    ):
        super().__init__(test=test, value=value, **kwds)


class ConditionalValueDefTextExprRef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalParameterValueDefTextExprRef(ConditionalValueDefTextExprRef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        param: Optional[str | SchemaBase] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Sequence[str] | Map] = Undefined,
        empty: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(param=param, value=value, empty=empty, **kwds)


class ConditionalPredicateValueDefTextExprRef(ConditionalValueDefTextExprRef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        test: Optional[str | SchemaBase | Map] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Sequence[str] | Map] = Undefined,
        **kwds,
    ):
        super().__init__(test=test, value=value, **kwds)


class ConditionalValueDefnumber(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalParameterValueDefnumber(ConditionalValueDefnumber):
    

    _schema = {"$ref": "

    def __init__(
        self,
        param: Optional[str | SchemaBase] = Undefined,
        value: Optional[float] = Undefined,
        empty: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(param=param, value=value, empty=empty, **kwds)


class ConditionalPredicateValueDefnumber(ConditionalValueDefnumber):
    

    _schema = {"$ref": "

    def __init__(
        self,
        test: Optional[str | SchemaBase | Map] = Undefined,
        value: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(test=test, value=value, **kwds)


class ConditionalValueDefnumberArrayExprRef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalParameterValueDefnumberArrayExprRef(
    ConditionalValueDefnumberArrayExprRef
):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        param: Optional[str | SchemaBase] = Undefined,
        value: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        empty: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(param=param, value=value, empty=empty, **kwds)


class ConditionalPredicateValueDefnumberArrayExprRef(
    ConditionalValueDefnumberArrayExprRef
):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        test: Optional[str | SchemaBase | Map] = Undefined,
        value: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        **kwds,
    ):
        super().__init__(test=test, value=value, **kwds)


class ConditionalValueDefnumberExprRef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalParameterValueDefnumberExprRef(ConditionalValueDefnumberExprRef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        param: Optional[str | SchemaBase] = Undefined,
        value: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        empty: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(param=param, value=value, empty=empty, **kwds)


class ConditionalPredicateValueDefnumberExprRef(ConditionalValueDefnumberExprRef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        test: Optional[str | SchemaBase | Map] = Undefined,
        value: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(test=test, value=value, **kwds)


class ConditionalValueDefstringExprRef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalParameterValueDefstringExprRef(ConditionalValueDefstringExprRef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        param: Optional[str | SchemaBase] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        empty: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(param=param, value=value, empty=empty, **kwds)


class ConditionalPredicateValueDefstringExprRef(ConditionalValueDefstringExprRef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        test: Optional[str | SchemaBase | Map] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(test=test, value=value, **kwds)


class ConditionalValueDefstringnullExprRef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConditionalParameterValueDefstringnullExprRef(
    ConditionalValueDefstringnullExprRef
):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        param: Optional[str | SchemaBase] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Map | None] = Undefined,
        empty: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(param=param, value=value, empty=empty, **kwds)


class ConditionalPredicateValueDefstringnullExprRef(
    ConditionalValueDefstringnullExprRef
):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        test: Optional[str | SchemaBase | Map] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Map | None] = Undefined,
        **kwds,
    ):
        super().__init__(test=test, value=value, **kwds)


class Config(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        arc: Optional[SchemaBase | Map] = Undefined,
        area: Optional[SchemaBase | Map] = Undefined,
        aria: Optional[bool] = Undefined,
        autosize: Optional[SchemaBase | Map | AutosizeType_T] = Undefined,
        axis: Optional[SchemaBase | Map] = Undefined,
        axisBand: Optional[SchemaBase | Map] = Undefined,
        axisBottom: Optional[SchemaBase | Map] = Undefined,
        axisDiscrete: Optional[SchemaBase | Map] = Undefined,
        axisLeft: Optional[SchemaBase | Map] = Undefined,
        axisPoint: Optional[SchemaBase | Map] = Undefined,
        axisQuantitative: Optional[SchemaBase | Map] = Undefined,
        axisRight: Optional[SchemaBase | Map] = Undefined,
        axisTemporal: Optional[SchemaBase | Map] = Undefined,
        axisTop: Optional[SchemaBase | Map] = Undefined,
        axisX: Optional[SchemaBase | Map] = Undefined,
        axisXBand: Optional[SchemaBase | Map] = Undefined,
        axisXDiscrete: Optional[SchemaBase | Map] = Undefined,
        axisXPoint: Optional[SchemaBase | Map] = Undefined,
        axisXQuantitative: Optional[SchemaBase | Map] = Undefined,
        axisXTemporal: Optional[SchemaBase | Map] = Undefined,
        axisY: Optional[SchemaBase | Map] = Undefined,
        axisYBand: Optional[SchemaBase | Map] = Undefined,
        axisYDiscrete: Optional[SchemaBase | Map] = Undefined,
        axisYPoint: Optional[SchemaBase | Map] = Undefined,
        axisYQuantitative: Optional[SchemaBase | Map] = Undefined,
        axisYTemporal: Optional[SchemaBase | Map] = Undefined,
        background: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T
        ] = Undefined,
        bar: Optional[SchemaBase | Map] = Undefined,
        boxplot: Optional[SchemaBase | Map] = Undefined,
        circle: Optional[SchemaBase | Map] = Undefined,
        concat: Optional[SchemaBase | Map] = Undefined,
        countTitle: Optional[str] = Undefined,
        customFormatTypes: Optional[bool] = Undefined,
        errorband: Optional[SchemaBase | Map] = Undefined,
        errorbar: Optional[SchemaBase | Map] = Undefined,
        facet: Optional[SchemaBase | Map] = Undefined,
        fieldTitle: Optional[Literal["verbal", "functional", "plain"]] = Undefined,
        font: Optional[str] = Undefined,
        geoshape: Optional[SchemaBase | Map] = Undefined,
        header: Optional[SchemaBase | Map] = Undefined,
        headerColumn: Optional[SchemaBase | Map] = Undefined,
        headerFacet: Optional[SchemaBase | Map] = Undefined,
        headerRow: Optional[SchemaBase | Map] = Undefined,
        image: Optional[SchemaBase | Map] = Undefined,
        legend: Optional[SchemaBase | Map] = Undefined,
        line: Optional[SchemaBase | Map] = Undefined,
        lineBreak: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        locale: Optional[SchemaBase | Map] = Undefined,
        mark: Optional[SchemaBase | Map] = Undefined,
        normalizedNumberFormat: Optional[str] = Undefined,
        normalizedNumberFormatType: Optional[str] = Undefined,
        numberFormat: Optional[str] = Undefined,
        numberFormatType: Optional[str] = Undefined,
        padding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        params: Optional[Sequence[SchemaBase | Map]] = Undefined,
        point: Optional[SchemaBase | Map] = Undefined,
        projection: Optional[SchemaBase | Map] = Undefined,
        range: Optional[SchemaBase | Map] = Undefined,
        rect: Optional[SchemaBase | Map] = Undefined,
        rule: Optional[SchemaBase | Map] = Undefined,
        scale: Optional[SchemaBase | Map] = Undefined,
        selection: Optional[SchemaBase | Map] = Undefined,
        square: Optional[SchemaBase | Map] = Undefined,
        style: Optional[SchemaBase | Map] = Undefined,
        text: Optional[SchemaBase | Map] = Undefined,
        tick: Optional[SchemaBase | Map] = Undefined,
        timeFormat: Optional[str] = Undefined,
        timeFormatType: Optional[str] = Undefined,
        title: Optional[SchemaBase | Map] = Undefined,
        tooltipFormat: Optional[SchemaBase | Map] = Undefined,
        trail: Optional[SchemaBase | Map] = Undefined,
        view: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            arc=arc,
            area=area,
            aria=aria,
            autosize=autosize,
            axis=axis,
            axisBand=axisBand,
            axisBottom=axisBottom,
            axisDiscrete=axisDiscrete,
            axisLeft=axisLeft,
            axisPoint=axisPoint,
            axisQuantitative=axisQuantitative,
            axisRight=axisRight,
            axisTemporal=axisTemporal,
            axisTop=axisTop,
            axisX=axisX,
            axisXBand=axisXBand,
            axisXDiscrete=axisXDiscrete,
            axisXPoint=axisXPoint,
            axisXQuantitative=axisXQuantitative,
            axisXTemporal=axisXTemporal,
            axisY=axisY,
            axisYBand=axisYBand,
            axisYDiscrete=axisYDiscrete,
            axisYPoint=axisYPoint,
            axisYQuantitative=axisYQuantitative,
            axisYTemporal=axisYTemporal,
            background=background,
            bar=bar,
            boxplot=boxplot,
            circle=circle,
            concat=concat,
            countTitle=countTitle,
            customFormatTypes=customFormatTypes,
            errorband=errorband,
            errorbar=errorbar,
            facet=facet,
            fieldTitle=fieldTitle,
            font=font,
            geoshape=geoshape,
            header=header,
            headerColumn=headerColumn,
            headerFacet=headerFacet,
            headerRow=headerRow,
            image=image,
            legend=legend,
            line=line,
            lineBreak=lineBreak,
            locale=locale,
            mark=mark,
            normalizedNumberFormat=normalizedNumberFormat,
            normalizedNumberFormatType=normalizedNumberFormatType,
            numberFormat=numberFormat,
            numberFormatType=numberFormatType,
            padding=padding,
            params=params,
            point=point,
            projection=projection,
            range=range,
            rect=rect,
            rule=rule,
            scale=scale,
            selection=selection,
            square=square,
            style=style,
            text=text,
            tick=tick,
            timeFormat=timeFormat,
            timeFormatType=timeFormatType,
            title=title,
            tooltipFormat=tooltipFormat,
            trail=trail,
            view=view,
            **kwds,
        )


class Cursor(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Cyclical(ColorScheme):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Data(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class DataFormat(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class CsvDataFormat(DataFormat):
    

    _schema = {"$ref": "

    def __init__(
        self,
        parse: Optional[SchemaBase | Map | None] = Undefined,
        type: Optional[Literal["csv", "tsv"]] = Undefined,
        **kwds,
    ):
        super().__init__(parse=parse, type=type, **kwds)


class DataSource(Data):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class Datasets(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, **kwds):
        super().__init__(**kwds)


class Day(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Dict(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, **kwds):
        super().__init__(**kwds)


class DictInlineDataset(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, **kwds):
        super().__init__(**kwds)


class DictSelectionInit(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, **kwds):
        super().__init__(**kwds)


class DictSelectionInitInterval(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, **kwds):
        super().__init__(**kwds)


class Diverging(ColorScheme):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class DomainUnionWith(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        unionWith: Optional[
            Sequence[str | bool | float | Temporal | SchemaBase | Map]
        ] = Undefined,
        **kwds,
    ):
        super().__init__(unionWith=unionWith, **kwds)


class DsvDataFormat(DataFormat):
    

    _schema = {"$ref": "

    def __init__(
        self,
        delimiter: Optional[str] = Undefined,
        parse: Optional[SchemaBase | Map | None] = Undefined,
        type: Optional[Literal["dsv"]] = Undefined,
        **kwds,
    ):
        super().__init__(delimiter=delimiter, parse=parse, type=type, **kwds)


class Element(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Encoding(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        angle: Optional[SchemaBase | Map] = Undefined,
        color: Optional[SchemaBase | Map] = Undefined,
        description: Optional[SchemaBase | Map] = Undefined,
        detail: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        fill: Optional[SchemaBase | Map] = Undefined,
        fillOpacity: Optional[SchemaBase | Map] = Undefined,
        href: Optional[SchemaBase | Map] = Undefined,
        key: Optional[SchemaBase | Map] = Undefined,
        latitude: Optional[SchemaBase | Map] = Undefined,
        latitude2: Optional[SchemaBase | Map] = Undefined,
        longitude: Optional[SchemaBase | Map] = Undefined,
        longitude2: Optional[SchemaBase | Map] = Undefined,
        opacity: Optional[SchemaBase | Map] = Undefined,
        order: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        radius: Optional[SchemaBase | Map] = Undefined,
        radius2: Optional[SchemaBase | Map] = Undefined,
        shape: Optional[SchemaBase | Map] = Undefined,
        size: Optional[SchemaBase | Map] = Undefined,
        stroke: Optional[SchemaBase | Map] = Undefined,
        strokeDash: Optional[SchemaBase | Map] = Undefined,
        strokeOpacity: Optional[SchemaBase | Map] = Undefined,
        strokeWidth: Optional[SchemaBase | Map] = Undefined,
        text: Optional[SchemaBase | Map] = Undefined,
        theta: Optional[SchemaBase | Map] = Undefined,
        theta2: Optional[SchemaBase | Map] = Undefined,
        tooltip: Optional[
            SchemaBase | Sequence[SchemaBase | Map] | Map | None
        ] = Undefined,
        url: Optional[SchemaBase | Map] = Undefined,
        x: Optional[SchemaBase | Map] = Undefined,
        x2: Optional[SchemaBase | Map] = Undefined,
        xError: Optional[SchemaBase | Map] = Undefined,
        xError2: Optional[SchemaBase | Map] = Undefined,
        xOffset: Optional[SchemaBase | Map] = Undefined,
        y: Optional[SchemaBase | Map] = Undefined,
        y2: Optional[SchemaBase | Map] = Undefined,
        yError: Optional[SchemaBase | Map] = Undefined,
        yError2: Optional[SchemaBase | Map] = Undefined,
        yOffset: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            angle=angle,
            color=color,
            description=description,
            detail=detail,
            fill=fill,
            fillOpacity=fillOpacity,
            href=href,
            key=key,
            latitude=latitude,
            latitude2=latitude2,
            longitude=longitude,
            longitude2=longitude2,
            opacity=opacity,
            order=order,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            text=text,
            theta=theta,
            theta2=theta2,
            tooltip=tooltip,
            url=url,
            x=x,
            x2=x2,
            xError=xError,
            xError2=xError2,
            xOffset=xOffset,
            y=y,
            y2=y2,
            yError=yError,
            yError2=yError2,
            yOffset=yOffset,
            **kwds,
        )


class ErrorBand(CompositeMark):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class ErrorBandConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        band: Optional[bool | SchemaBase | Map] = Undefined,
        borders: Optional[bool | SchemaBase | Map] = Undefined,
        extent: Optional[SchemaBase | ErrorBarExtent_T] = Undefined,
        interpolate: Optional[SchemaBase | Interpolate_T] = Undefined,
        tension: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            band=band,
            borders=borders,
            extent=extent,
            interpolate=interpolate,
            tension=tension,
            **kwds,
        )


class ErrorBandDef(CompositeMarkDef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        type: Optional[SchemaBase | ErrorBand_T] = Undefined,
        band: Optional[bool | SchemaBase | Map] = Undefined,
        borders: Optional[bool | SchemaBase | Map] = Undefined,
        clip: Optional[bool] = Undefined,
        color: Optional[str | Parameter | SchemaBase | Map | ColorName_T] = Undefined,
        extent: Optional[SchemaBase | ErrorBarExtent_T] = Undefined,
        interpolate: Optional[SchemaBase | Interpolate_T] = Undefined,
        opacity: Optional[float] = Undefined,
        orient: Optional[SchemaBase | Orientation_T] = Undefined,
        tension: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            type=type,
            band=band,
            borders=borders,
            clip=clip,
            color=color,
            extent=extent,
            interpolate=interpolate,
            opacity=opacity,
            orient=orient,
            tension=tension,
            **kwds,
        )


class ErrorBar(CompositeMark):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class ErrorBarConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        extent: Optional[SchemaBase | ErrorBarExtent_T] = Undefined,
        rule: Optional[bool | SchemaBase | Map] = Undefined,
        size: Optional[float] = Undefined,
        thickness: Optional[float] = Undefined,
        ticks: Optional[bool | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            extent=extent,
            rule=rule,
            size=size,
            thickness=thickness,
            ticks=ticks,
            **kwds,
        )


class ErrorBarDef(CompositeMarkDef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        type: Optional[SchemaBase | ErrorBar_T] = Undefined,
        clip: Optional[bool] = Undefined,
        color: Optional[str | Parameter | SchemaBase | Map | ColorName_T] = Undefined,
        extent: Optional[SchemaBase | ErrorBarExtent_T] = Undefined,
        opacity: Optional[float] = Undefined,
        orient: Optional[SchemaBase | Orientation_T] = Undefined,
        rule: Optional[bool | SchemaBase | Map] = Undefined,
        size: Optional[float] = Undefined,
        thickness: Optional[float] = Undefined,
        ticks: Optional[bool | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            type=type,
            clip=clip,
            color=color,
            extent=extent,
            opacity=opacity,
            orient=orient,
            rule=rule,
            size=size,
            thickness=thickness,
            ticks=ticks,
            **kwds,
        )


class ErrorBarExtent(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Expr(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class ExprRef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, expr: Optional[str] = Undefined, **kwds):
        super().__init__(expr=expr, **kwds)


class FacetEncodingFieldDef(VegaLiteSchema):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        align: Optional[SchemaBase | Map | LayoutAlign_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Map | None] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool | SchemaBase | Map] = Undefined,
        columns: Optional[float] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        header: Optional[SchemaBase | Map | None] = Undefined,
        sort: Optional[
            SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
            | SortOrder_T
            | None
        ] = Undefined,
        spacing: Optional[float | SchemaBase | Map] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            align=align,
            bandPosition=bandPosition,
            bin=bin,
            bounds=bounds,
            center=center,
            columns=columns,
            field=field,
            header=header,
            sort=sort,
            spacing=spacing,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class FacetFieldDef(VegaLiteSchema):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Map | None] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        header: Optional[SchemaBase | Map | None] = Undefined,
        sort: Optional[
            SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
            | SortOrder_T
            | None
        ] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            header=header,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class FacetMapping(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        column: Optional[SchemaBase | Map] = Undefined,
        row: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(column=column, row=row, **kwds)


class FacetedEncoding(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        angle: Optional[SchemaBase | Map] = Undefined,
        color: Optional[SchemaBase | Map] = Undefined,
        column: Optional[SchemaBase | Map] = Undefined,
        description: Optional[SchemaBase | Map] = Undefined,
        detail: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        facet: Optional[SchemaBase | Map] = Undefined,
        fill: Optional[SchemaBase | Map] = Undefined,
        fillOpacity: Optional[SchemaBase | Map] = Undefined,
        href: Optional[SchemaBase | Map] = Undefined,
        key: Optional[SchemaBase | Map] = Undefined,
        latitude: Optional[SchemaBase | Map] = Undefined,
        latitude2: Optional[SchemaBase | Map] = Undefined,
        longitude: Optional[SchemaBase | Map] = Undefined,
        longitude2: Optional[SchemaBase | Map] = Undefined,
        opacity: Optional[SchemaBase | Map] = Undefined,
        order: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        radius: Optional[SchemaBase | Map] = Undefined,
        radius2: Optional[SchemaBase | Map] = Undefined,
        row: Optional[SchemaBase | Map] = Undefined,
        shape: Optional[SchemaBase | Map] = Undefined,
        size: Optional[SchemaBase | Map] = Undefined,
        stroke: Optional[SchemaBase | Map] = Undefined,
        strokeDash: Optional[SchemaBase | Map] = Undefined,
        strokeOpacity: Optional[SchemaBase | Map] = Undefined,
        strokeWidth: Optional[SchemaBase | Map] = Undefined,
        text: Optional[SchemaBase | Map] = Undefined,
        theta: Optional[SchemaBase | Map] = Undefined,
        theta2: Optional[SchemaBase | Map] = Undefined,
        tooltip: Optional[
            SchemaBase | Sequence[SchemaBase | Map] | Map | None
        ] = Undefined,
        url: Optional[SchemaBase | Map] = Undefined,
        x: Optional[SchemaBase | Map] = Undefined,
        x2: Optional[SchemaBase | Map] = Undefined,
        xError: Optional[SchemaBase | Map] = Undefined,
        xError2: Optional[SchemaBase | Map] = Undefined,
        xOffset: Optional[SchemaBase | Map] = Undefined,
        y: Optional[SchemaBase | Map] = Undefined,
        y2: Optional[SchemaBase | Map] = Undefined,
        yError: Optional[SchemaBase | Map] = Undefined,
        yError2: Optional[SchemaBase | Map] = Undefined,
        yOffset: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            angle=angle,
            color=color,
            column=column,
            description=description,
            detail=detail,
            facet=facet,
            fill=fill,
            fillOpacity=fillOpacity,
            href=href,
            key=key,
            latitude=latitude,
            latitude2=latitude2,
            longitude=longitude,
            longitude2=longitude2,
            opacity=opacity,
            order=order,
            radius=radius,
            radius2=radius2,
            row=row,
            shape=shape,
            size=size,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            text=text,
            theta=theta,
            theta2=theta2,
            tooltip=tooltip,
            url=url,
            x=x,
            x2=x2,
            xError=xError,
            xError2=xError2,
            xOffset=xOffset,
            y=y,
            y2=y2,
            yError=yError,
            yError2=yError2,
            yOffset=yOffset,
            **kwds,
        )


class Feature(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        geometry: Optional[SchemaBase | Map] = Undefined,
        properties: Optional[SchemaBase | Map | None] = Undefined,
        type: Optional[Literal["Feature"]] = Undefined,
        bbox: Optional[SchemaBase | Sequence[float]] = Undefined,
        id: Optional[str | float] = Undefined,
        **kwds,
    ):
        super().__init__(
            geometry=geometry,
            properties=properties,
            type=type,
            bbox=bbox,
            id=id,
            **kwds,
        )


class FeatureCollection(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        features: Optional[Sequence[SchemaBase | Map]] = Undefined,
        type: Optional[Literal["FeatureCollection"]] = Undefined,
        bbox: Optional[SchemaBase | Sequence[float]] = Undefined,
        **kwds,
    ):
        super().__init__(features=features, type=type, bbox=bbox, **kwds)


class FeatureGeometryGeoJsonProperties(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        geometry: Optional[SchemaBase | Map] = Undefined,
        properties: Optional[SchemaBase | Map | None] = Undefined,
        type: Optional[Literal["Feature"]] = Undefined,
        bbox: Optional[SchemaBase | Sequence[float]] = Undefined,
        id: Optional[str | float] = Undefined,
        **kwds,
    ):
        super().__init__(
            geometry=geometry,
            properties=properties,
            type=type,
            bbox=bbox,
            id=id,
            **kwds,
        )


class Field(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class FieldDefWithoutScale(VegaLiteSchema):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Literal["binned"] | Map | None] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class FieldName(Field):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class FieldOrDatumDefWithConditionStringFieldDefstring(VegaLiteSchema):
    r

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Literal["binned"] | Map | None] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        format: Optional[str | SchemaBase | Map] = Undefined,
        formatType: Optional[str] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            format=format,
            formatType=formatType,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class FieldRange(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, field: Optional[str] = Undefined, **kwds):
        super().__init__(field=field, **kwds)


class Fit(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class FontStyle(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class FontWeight(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class FormatConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        normalizedNumberFormat: Optional[str] = Undefined,
        normalizedNumberFormatType: Optional[str] = Undefined,
        numberFormat: Optional[str] = Undefined,
        numberFormatType: Optional[str] = Undefined,
        timeFormat: Optional[str] = Undefined,
        timeFormatType: Optional[str] = Undefined,
        **kwds,
    ):
        super().__init__(
            normalizedNumberFormat=normalizedNumberFormat,
            normalizedNumberFormatType=normalizedNumberFormatType,
            numberFormat=numberFormat,
            numberFormatType=numberFormatType,
            timeFormat=timeFormat,
            timeFormatType=timeFormatType,
            **kwds,
        )


class Generator(Data):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class GenericUnitSpecEncodingAnyMark(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        mark: Optional[SchemaBase | Map | Mark_T | CompositeMark_T] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        description: Optional[str] = Undefined,
        encoding: Optional[SchemaBase | Map] = Undefined,
        name: Optional[str] = Undefined,
        params: Optional[Sequence[SchemaBase | Map]] = Undefined,
        projection: Optional[SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        **kwds,
    ):
        super().__init__(
            mark=mark,
            data=data,
            description=description,
            encoding=encoding,
            name=name,
            params=params,
            projection=projection,
            title=title,
            transform=transform,
            **kwds,
        )


class GeoJsonFeature(Fit):
    

    _schema = {"$ref": "

    def __init__(
        self,
        geometry: Optional[SchemaBase | Map] = Undefined,
        properties: Optional[SchemaBase | Map | None] = Undefined,
        type: Optional[Literal["Feature"]] = Undefined,
        bbox: Optional[SchemaBase | Sequence[float]] = Undefined,
        id: Optional[str | float] = Undefined,
        **kwds,
    ):
        super().__init__(
            geometry=geometry,
            properties=properties,
            type=type,
            bbox=bbox,
            id=id,
            **kwds,
        )


class GeoJsonFeatureCollection(Fit):
    

    _schema = {"$ref": "

    def __init__(
        self,
        features: Optional[Sequence[SchemaBase | Map]] = Undefined,
        type: Optional[Literal["FeatureCollection"]] = Undefined,
        bbox: Optional[SchemaBase | Sequence[float]] = Undefined,
        **kwds,
    ):
        super().__init__(features=features, type=type, bbox=bbox, **kwds)


class GeoJsonProperties(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class Geometry(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class GeometryCollection(Geometry):
    

    _schema = {"$ref": "

    def __init__(
        self,
        geometries: Optional[Sequence[SchemaBase | Map]] = Undefined,
        type: Optional[Literal["GeometryCollection"]] = Undefined,
        bbox: Optional[SchemaBase | Sequence[float]] = Undefined,
        **kwds,
    ):
        super().__init__(geometries=geometries, type=type, bbox=bbox, **kwds)


class Gradient(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class GradientStop(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        color: Optional[str | SchemaBase | ColorName_T] = Undefined,
        offset: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(color=color, offset=offset, **kwds)


class GraticuleGenerator(Generator):
    

    _schema = {"$ref": "

    def __init__(
        self,
        graticule: Optional[SchemaBase | Literal[True] | Map] = Undefined,
        name: Optional[str] = Undefined,
        **kwds,
    ):
        super().__init__(graticule=graticule, name=name, **kwds)


class GraticuleParams(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        extent: Optional[
            SchemaBase | Sequence[SchemaBase | Sequence[float]]
        ] = Undefined,
        extentMajor: Optional[
            SchemaBase | Sequence[SchemaBase | Sequence[float]]
        ] = Undefined,
        extentMinor: Optional[
            SchemaBase | Sequence[SchemaBase | Sequence[float]]
        ] = Undefined,
        precision: Optional[float] = Undefined,
        step: Optional[SchemaBase | Sequence[float]] = Undefined,
        stepMajor: Optional[SchemaBase | Sequence[float]] = Undefined,
        stepMinor: Optional[SchemaBase | Sequence[float]] = Undefined,
        **kwds,
    ):
        super().__init__(
            extent=extent,
            extentMajor=extentMajor,
            extentMinor=extentMinor,
            precision=precision,
            step=step,
            stepMajor=stepMajor,
            stepMinor=stepMinor,
            **kwds,
        )


class Header(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        format: Optional[str | SchemaBase | Map] = Undefined,
        formatType: Optional[str] = Undefined,
        labelAlign: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        labelAnchor: Optional[SchemaBase | TitleAnchor_T] = Undefined,
        labelAngle: Optional[float] = Undefined,
        labelBaseline: Optional[
            Parameter | SchemaBase | Map | TextBaseline_T
        ] = Undefined,
        labelColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T
        ] = Undefined,
        labelExpr: Optional[str] = Undefined,
        labelFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        labelFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        labelFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        labelLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOrient: Optional[SchemaBase | Orient_T] = Undefined,
        labelPadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labels: Optional[bool] = Undefined,
        orient: Optional[SchemaBase | Orient_T] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        titleAlign: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        titleAnchor: Optional[SchemaBase | TitleAnchor_T] = Undefined,
        titleAngle: Optional[float] = Undefined,
        titleBaseline: Optional[
            Parameter | SchemaBase | Map | TextBaseline_T
        ] = Undefined,
        titleColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T
        ] = Undefined,
        titleFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        titleFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        titleFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        titleLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleOrient: Optional[SchemaBase | Orient_T] = Undefined,
        titlePadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            format=format,
            formatType=formatType,
            labelAlign=labelAlign,
            labelAnchor=labelAnchor,
            labelAngle=labelAngle,
            labelBaseline=labelBaseline,
            labelColor=labelColor,
            labelExpr=labelExpr,
            labelFont=labelFont,
            labelFontSize=labelFontSize,
            labelFontStyle=labelFontStyle,
            labelFontWeight=labelFontWeight,
            labelLimit=labelLimit,
            labelLineHeight=labelLineHeight,
            labelOrient=labelOrient,
            labelPadding=labelPadding,
            labels=labels,
            orient=orient,
            title=title,
            titleAlign=titleAlign,
            titleAnchor=titleAnchor,
            titleAngle=titleAngle,
            titleBaseline=titleBaseline,
            titleColor=titleColor,
            titleFont=titleFont,
            titleFontSize=titleFontSize,
            titleFontStyle=titleFontStyle,
            titleFontWeight=titleFontWeight,
            titleLimit=titleLimit,
            titleLineHeight=titleLineHeight,
            titleOrient=titleOrient,
            titlePadding=titlePadding,
            **kwds,
        )


class HeaderConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        format: Optional[str | SchemaBase | Map] = Undefined,
        formatType: Optional[str] = Undefined,
        labelAlign: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        labelAnchor: Optional[SchemaBase | TitleAnchor_T] = Undefined,
        labelAngle: Optional[float] = Undefined,
        labelBaseline: Optional[
            Parameter | SchemaBase | Map | TextBaseline_T
        ] = Undefined,
        labelColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T
        ] = Undefined,
        labelExpr: Optional[str] = Undefined,
        labelFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        labelFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        labelFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        labelLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOrient: Optional[SchemaBase | Orient_T] = Undefined,
        labelPadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labels: Optional[bool] = Undefined,
        orient: Optional[SchemaBase | Orient_T] = Undefined,
        title: Optional[None] = Undefined,
        titleAlign: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        titleAnchor: Optional[SchemaBase | TitleAnchor_T] = Undefined,
        titleAngle: Optional[float] = Undefined,
        titleBaseline: Optional[
            Parameter | SchemaBase | Map | TextBaseline_T
        ] = Undefined,
        titleColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T
        ] = Undefined,
        titleFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        titleFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        titleFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        titleLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleOrient: Optional[SchemaBase | Orient_T] = Undefined,
        titlePadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            format=format,
            formatType=formatType,
            labelAlign=labelAlign,
            labelAnchor=labelAnchor,
            labelAngle=labelAngle,
            labelBaseline=labelBaseline,
            labelColor=labelColor,
            labelExpr=labelExpr,
            labelFont=labelFont,
            labelFontSize=labelFontSize,
            labelFontStyle=labelFontStyle,
            labelFontWeight=labelFontWeight,
            labelLimit=labelLimit,
            labelLineHeight=labelLineHeight,
            labelOrient=labelOrient,
            labelPadding=labelPadding,
            labels=labels,
            orient=orient,
            title=title,
            titleAlign=titleAlign,
            titleAnchor=titleAnchor,
            titleAngle=titleAngle,
            titleBaseline=titleBaseline,
            titleColor=titleColor,
            titleFont=titleFont,
            titleFontSize=titleFontSize,
            titleFontStyle=titleFontStyle,
            titleFontWeight=titleFontWeight,
            titleLimit=titleLimit,
            titleLineHeight=titleLineHeight,
            titleOrient=titleOrient,
            titlePadding=titlePadding,
            **kwds,
        )


class HexColor(Color):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class ImputeMethod(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class ImputeParams(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        frame: Optional[Sequence[float | None]] = Undefined,
        keyvals: Optional[SchemaBase | Sequence[Any] | Map] = Undefined,
        method: Optional[SchemaBase | ImputeMethod_T] = Undefined,
        value: Optional[Any] = Undefined,
        **kwds,
    ):
        super().__init__(
            frame=frame, keyvals=keyvals, method=method, value=value, **kwds
        )


class ImputeSequence(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        stop: Optional[float] = Undefined,
        start: Optional[float] = Undefined,
        step: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(stop=stop, start=start, step=step, **kwds)


class InlineData(DataSource):
    

    _schema = {"$ref": "

    def __init__(
        self,
        values: Optional[
            str
            | SchemaBase
            | Sequence[Map]
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Map
        ] = Undefined,
        format: Optional[SchemaBase | Map] = Undefined,
        name: Optional[str] = Undefined,
        **kwds,
    ):
        super().__init__(values=values, format=format, name=name, **kwds)


class InlineDataset(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class Interpolate(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class IntervalSelectionConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        type: Optional[Literal["interval"]] = Undefined,
        clear: Optional[str | bool | SchemaBase | Map] = Undefined,
        encodings: Optional[Sequence[SchemaBase | SingleDefUnitChannel_T]] = Undefined,
        fields: Optional[Sequence[str | SchemaBase]] = Undefined,
        mark: Optional[SchemaBase | Map] = Undefined,
        on: Optional[str | SchemaBase | Map] = Undefined,
        resolve: Optional[SchemaBase | SelectionResolution_T] = Undefined,
        translate: Optional[str | bool] = Undefined,
        zoom: Optional[str | bool] = Undefined,
        **kwds,
    ):
        super().__init__(
            type=type,
            clear=clear,
            encodings=encodings,
            fields=fields,
            mark=mark,
            on=on,
            resolve=resolve,
            translate=translate,
            zoom=zoom,
            **kwds,
        )


class IntervalSelectionConfigWithoutType(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        clear: Optional[str | bool | SchemaBase | Map] = Undefined,
        encodings: Optional[Sequence[SchemaBase | SingleDefUnitChannel_T]] = Undefined,
        fields: Optional[Sequence[str | SchemaBase]] = Undefined,
        mark: Optional[SchemaBase | Map] = Undefined,
        on: Optional[str | SchemaBase | Map] = Undefined,
        resolve: Optional[SchemaBase | SelectionResolution_T] = Undefined,
        translate: Optional[str | bool] = Undefined,
        zoom: Optional[str | bool] = Undefined,
        **kwds,
    ):
        super().__init__(
            clear=clear,
            encodings=encodings,
            fields=fields,
            mark=mark,
            on=on,
            resolve=resolve,
            translate=translate,
            zoom=zoom,
            **kwds,
        )


class JoinAggregateFieldDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        op: Optional[SchemaBase | AggregateOp_T] = Undefined,
        field: Optional[str | SchemaBase] = Undefined,
        **kwds,
    ):
        super().__init__(op=op, field=field, **kwds)


class JsonDataFormat(DataFormat):
    

    _schema = {"$ref": "

    def __init__(
        self,
        parse: Optional[SchemaBase | Map | None] = Undefined,
        property: Optional[str] = Undefined,
        type: Optional[Literal["json"]] = Undefined,
        **kwds,
    ):
        super().__init__(parse=parse, property=property, type=type, **kwds)


class LabelOverlap(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class LatLongDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class LatLongFieldDef(LatLongDef):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[None] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[Literal["quantitative"]] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class LayerRepeatMapping(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        layer: Optional[Sequence[str]] = Undefined,
        column: Optional[Sequence[str]] = Undefined,
        row: Optional[Sequence[str]] = Undefined,
        **kwds,
    ):
        super().__init__(layer=layer, column=column, row=row, **kwds)


class LayoutAlign(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Legend(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        clipHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        columnPadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        columns: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        description: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        direction: Optional[SchemaBase | Orientation_T] = Undefined,
        fillColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        format: Optional[str | SchemaBase | Map] = Undefined,
        formatType: Optional[str] = Undefined,
        gradientLength: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gradientOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gradientStrokeColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        gradientStrokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gradientThickness: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gridAlign: Optional[Parameter | SchemaBase | Map | LayoutAlign_T] = Undefined,
        labelAlign: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        labelBaseline: Optional[
            Parameter | SchemaBase | Map | TextBaseline_T
        ] = Undefined,
        labelColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        labelExpr: Optional[str] = Undefined,
        labelFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        labelFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        labelFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        labelLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOverlap: Optional[
            bool | Parameter | SchemaBase | Literal["greedy", "parity"] | Map
        ] = Undefined,
        labelPadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelSeparation: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        legendX: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        legendY: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        orient: Optional[SchemaBase | LegendOrient_T] = Undefined,
        padding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        rowPadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        symbolDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        symbolDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolFillColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        symbolLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolStrokeColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        symbolStrokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolType: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        tickCount: Optional[
            float | Parameter | SchemaBase | Map | TimeInterval_T
        ] = Undefined,
        tickMinStep: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        titleAlign: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        titleAnchor: Optional[Parameter | SchemaBase | Map | TitleAnchor_T] = Undefined,
        titleBaseline: Optional[
            Parameter | SchemaBase | Map | TextBaseline_T
        ] = Undefined,
        titleColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        titleFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        titleFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        titleFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        titleLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleOrient: Optional[Parameter | SchemaBase | Map | Orient_T] = Undefined,
        titlePadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        type: Optional[Literal["symbol", "gradient"]] = Undefined,
        values: Optional[
            Parameter
            | SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
        ] = Undefined,
        zindex: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            aria=aria,
            clipHeight=clipHeight,
            columnPadding=columnPadding,
            columns=columns,
            cornerRadius=cornerRadius,
            description=description,
            direction=direction,
            fillColor=fillColor,
            format=format,
            formatType=formatType,
            gradientLength=gradientLength,
            gradientOpacity=gradientOpacity,
            gradientStrokeColor=gradientStrokeColor,
            gradientStrokeWidth=gradientStrokeWidth,
            gradientThickness=gradientThickness,
            gridAlign=gridAlign,
            labelAlign=labelAlign,
            labelBaseline=labelBaseline,
            labelColor=labelColor,
            labelExpr=labelExpr,
            labelFont=labelFont,
            labelFontSize=labelFontSize,
            labelFontStyle=labelFontStyle,
            labelFontWeight=labelFontWeight,
            labelLimit=labelLimit,
            labelOffset=labelOffset,
            labelOpacity=labelOpacity,
            labelOverlap=labelOverlap,
            labelPadding=labelPadding,
            labelSeparation=labelSeparation,
            legendX=legendX,
            legendY=legendY,
            offset=offset,
            orient=orient,
            padding=padding,
            rowPadding=rowPadding,
            strokeColor=strokeColor,
            symbolDash=symbolDash,
            symbolDashOffset=symbolDashOffset,
            symbolFillColor=symbolFillColor,
            symbolLimit=symbolLimit,
            symbolOffset=symbolOffset,
            symbolOpacity=symbolOpacity,
            symbolSize=symbolSize,
            symbolStrokeColor=symbolStrokeColor,
            symbolStrokeWidth=symbolStrokeWidth,
            symbolType=symbolType,
            tickCount=tickCount,
            tickMinStep=tickMinStep,
            title=title,
            titleAlign=titleAlign,
            titleAnchor=titleAnchor,
            titleBaseline=titleBaseline,
            titleColor=titleColor,
            titleFont=titleFont,
            titleFontSize=titleFontSize,
            titleFontStyle=titleFontStyle,
            titleFontWeight=titleFontWeight,
            titleLimit=titleLimit,
            titleLineHeight=titleLineHeight,
            titleOpacity=titleOpacity,
            titleOrient=titleOrient,
            titlePadding=titlePadding,
            type=type,
            values=values,
            zindex=zindex,
            **kwds,
        )


class LegendBinding(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class LegendConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        clipHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        columnPadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        columns: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        description: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        direction: Optional[SchemaBase | Orientation_T] = Undefined,
        disable: Optional[bool] = Undefined,
        fillColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        gradientDirection: Optional[
            Parameter | SchemaBase | Map | Orientation_T
        ] = Undefined,
        gradientHorizontalMaxLength: Optional[float] = Undefined,
        gradientHorizontalMinLength: Optional[float] = Undefined,
        gradientLabelLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gradientLabelOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gradientLength: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gradientOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gradientStrokeColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        gradientStrokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gradientThickness: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        gradientVerticalMaxLength: Optional[float] = Undefined,
        gradientVerticalMinLength: Optional[float] = Undefined,
        gridAlign: Optional[Parameter | SchemaBase | Map | LayoutAlign_T] = Undefined,
        labelAlign: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        labelBaseline: Optional[
            Parameter | SchemaBase | Map | TextBaseline_T
        ] = Undefined,
        labelColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        labelFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        labelFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        labelFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        labelLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelOverlap: Optional[
            bool | Parameter | SchemaBase | Literal["greedy", "parity"] | Map
        ] = Undefined,
        labelPadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        labelSeparation: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        layout: Optional[Parameter | SchemaBase | Map] = Undefined,
        legendX: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        legendY: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        orient: Optional[SchemaBase | LegendOrient_T] = Undefined,
        padding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        rowPadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        strokeDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        strokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolBaseFillColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        symbolBaseStrokeColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        symbolDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        symbolDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolDirection: Optional[
            Parameter | SchemaBase | Map | Orientation_T
        ] = Undefined,
        symbolFillColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        symbolLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolStrokeColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        symbolStrokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        symbolType: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        tickCount: Optional[
            float | Parameter | SchemaBase | Map | TimeInterval_T
        ] = Undefined,
        title: Optional[None] = Undefined,
        titleAlign: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        titleAnchor: Optional[Parameter | SchemaBase | Map | TitleAnchor_T] = Undefined,
        titleBaseline: Optional[
            Parameter | SchemaBase | Map | TextBaseline_T
        ] = Undefined,
        titleColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        titleFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        titleFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        titleFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        titleLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        titleOrient: Optional[Parameter | SchemaBase | Map | Orient_T] = Undefined,
        titlePadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        unselectedOpacity: Optional[float] = Undefined,
        zindex: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            aria=aria,
            clipHeight=clipHeight,
            columnPadding=columnPadding,
            columns=columns,
            cornerRadius=cornerRadius,
            description=description,
            direction=direction,
            disable=disable,
            fillColor=fillColor,
            gradientDirection=gradientDirection,
            gradientHorizontalMaxLength=gradientHorizontalMaxLength,
            gradientHorizontalMinLength=gradientHorizontalMinLength,
            gradientLabelLimit=gradientLabelLimit,
            gradientLabelOffset=gradientLabelOffset,
            gradientLength=gradientLength,
            gradientOpacity=gradientOpacity,
            gradientStrokeColor=gradientStrokeColor,
            gradientStrokeWidth=gradientStrokeWidth,
            gradientThickness=gradientThickness,
            gradientVerticalMaxLength=gradientVerticalMaxLength,
            gradientVerticalMinLength=gradientVerticalMinLength,
            gridAlign=gridAlign,
            labelAlign=labelAlign,
            labelBaseline=labelBaseline,
            labelColor=labelColor,
            labelFont=labelFont,
            labelFontSize=labelFontSize,
            labelFontStyle=labelFontStyle,
            labelFontWeight=labelFontWeight,
            labelLimit=labelLimit,
            labelOffset=labelOffset,
            labelOpacity=labelOpacity,
            labelOverlap=labelOverlap,
            labelPadding=labelPadding,
            labelSeparation=labelSeparation,
            layout=layout,
            legendX=legendX,
            legendY=legendY,
            offset=offset,
            orient=orient,
            padding=padding,
            rowPadding=rowPadding,
            strokeColor=strokeColor,
            strokeDash=strokeDash,
            strokeWidth=strokeWidth,
            symbolBaseFillColor=symbolBaseFillColor,
            symbolBaseStrokeColor=symbolBaseStrokeColor,
            symbolDash=symbolDash,
            symbolDashOffset=symbolDashOffset,
            symbolDirection=symbolDirection,
            symbolFillColor=symbolFillColor,
            symbolLimit=symbolLimit,
            symbolOffset=symbolOffset,
            symbolOpacity=symbolOpacity,
            symbolSize=symbolSize,
            symbolStrokeColor=symbolStrokeColor,
            symbolStrokeWidth=symbolStrokeWidth,
            symbolType=symbolType,
            tickCount=tickCount,
            title=title,
            titleAlign=titleAlign,
            titleAnchor=titleAnchor,
            titleBaseline=titleBaseline,
            titleColor=titleColor,
            titleFont=titleFont,
            titleFontSize=titleFontSize,
            titleFontStyle=titleFontStyle,
            titleFontWeight=titleFontWeight,
            titleLimit=titleLimit,
            titleLineHeight=titleLineHeight,
            titleOpacity=titleOpacity,
            titleOrient=titleOrient,
            titlePadding=titlePadding,
            unselectedOpacity=unselectedOpacity,
            zindex=zindex,
            **kwds,
        )


class LegendOrient(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class LegendResolveMap(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        angle: Optional[SchemaBase | ResolveMode_T] = Undefined,
        color: Optional[SchemaBase | ResolveMode_T] = Undefined,
        fill: Optional[SchemaBase | ResolveMode_T] = Undefined,
        fillOpacity: Optional[SchemaBase | ResolveMode_T] = Undefined,
        opacity: Optional[SchemaBase | ResolveMode_T] = Undefined,
        shape: Optional[SchemaBase | ResolveMode_T] = Undefined,
        size: Optional[SchemaBase | ResolveMode_T] = Undefined,
        stroke: Optional[SchemaBase | ResolveMode_T] = Undefined,
        strokeDash: Optional[SchemaBase | ResolveMode_T] = Undefined,
        strokeOpacity: Optional[SchemaBase | ResolveMode_T] = Undefined,
        strokeWidth: Optional[SchemaBase | ResolveMode_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            angle=angle,
            color=color,
            fill=fill,
            fillOpacity=fillOpacity,
            opacity=opacity,
            shape=shape,
            size=size,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            **kwds,
        )


class LegendStreamBinding(LegendBinding):
    

    _schema = {"$ref": "

    def __init__(self, legend: Optional[str | SchemaBase | Map] = Undefined, **kwds):
        super().__init__(legend=legend, **kwds)


class LineConfig(AnyMarkConfig):
    

    _schema = {"$ref": "

    def __init__(
        self,
        align: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        angle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        ariaRole: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        ariaRoleDescription: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        aspect: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        baseline: Optional[Parameter | SchemaBase | Map | TextBaseline_T] = Undefined,
        blend: Optional[Parameter | SchemaBase | Map | Blend_T] = Undefined,
        color: Optional[str | Parameter | SchemaBase | Map | ColorName_T] = Undefined,
        cornerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusBottomLeft: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusBottomRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusTopLeft: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusTopRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cursor: Optional[Parameter | SchemaBase | Map | Cursor_T] = Undefined,
        description: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        dir: Optional[Parameter | SchemaBase | Map | TextDirection_T] = Undefined,
        dx: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        dy: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        ellipsis: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        endAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fill: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        fillOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        filled: Optional[bool] = Undefined,
        font: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontWeight: Optional[Parameter | SchemaBase | Map | FontWeight_T] = Undefined,
        height: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        href: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        innerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        interpolate: Optional[Parameter | SchemaBase | Map | Interpolate_T] = Undefined,
        invalid: Optional[SchemaBase | MarkInvalidDataMode_T | None] = Undefined,
        limit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        lineBreak: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        lineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        opacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        order: Optional[bool | None] = Undefined,
        orient: Optional[SchemaBase | Orientation_T] = Undefined,
        outerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        padAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        point: Optional[bool | SchemaBase | Literal["transparent"] | Map] = Undefined,
        radius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        shape: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        size: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        smooth: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        startAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        stroke: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        strokeCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        strokeDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        strokeDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeJoin: Optional[Parameter | SchemaBase | Map | StrokeJoin_T] = Undefined,
        strokeMiterLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tension: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        text: Optional[str | Parameter | SchemaBase | Sequence[str] | Map] = Undefined,
        theta: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        theta2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        timeUnitBandPosition: Optional[float] = Undefined,
        timeUnitBandSize: Optional[float] = Undefined,
        tooltip: Optional[
            str | bool | float | Parameter | SchemaBase | Map | None
        ] = Undefined,
        url: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        width: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        x: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        x2: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        y: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        y2: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        **kwds,
    ):
        super().__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            baseline=baseline,
            blend=blend,
            color=color,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            point=point,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            y=y,
            y2=y2,
            **kwds,
        )


class LineString(Geometry):
    

    _schema = {"$ref": "

    def __init__(
        self,
        coordinates: Optional[Sequence[SchemaBase | Sequence[float]]] = Undefined,
        type: Optional[Literal["LineString"]] = Undefined,
        bbox: Optional[SchemaBase | Sequence[float]] = Undefined,
        **kwds,
    ):
        super().__init__(coordinates=coordinates, type=type, bbox=bbox, **kwds)


class LinearGradient(Gradient):
    

    _schema = {"$ref": "

    def __init__(
        self,
        gradient: Optional[Literal["linear"]] = Undefined,
        stops: Optional[Sequence[SchemaBase | Map]] = Undefined,
        id: Optional[str] = Undefined,
        x1: Optional[float] = Undefined,
        x2: Optional[float] = Undefined,
        y1: Optional[float] = Undefined,
        y2: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            gradient=gradient, stops=stops, id=id, x1=x1, x2=x2, y1=y1, y2=y2, **kwds
        )


class Locale(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        number: Optional[SchemaBase | Map] = Undefined,
        time: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(number=number, time=time, **kwds)


class LookupData(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        data: Optional[SchemaBase | Map] = Undefined,
        key: Optional[str | SchemaBase] = Undefined,
        fields: Optional[Sequence[str | SchemaBase]] = Undefined,
        **kwds,
    ):
        super().__init__(data=data, key=key, fields=fields, **kwds)


class LookupSelection(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        key: Optional[str | SchemaBase] = Undefined,
        param: Optional[str | SchemaBase] = Undefined,
        fields: Optional[Sequence[str | SchemaBase]] = Undefined,
        **kwds,
    ):
        super().__init__(key=key, param=param, fields=fields, **kwds)


class Mark(AnyMark):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class MarkConfig(AnyMarkConfig):
    

    _schema = {"$ref": "

    def __init__(
        self,
        align: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        angle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        ariaRole: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        ariaRoleDescription: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        aspect: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        baseline: Optional[Parameter | SchemaBase | Map | TextBaseline_T] = Undefined,
        blend: Optional[Parameter | SchemaBase | Map | Blend_T] = Undefined,
        color: Optional[str | Parameter | SchemaBase | Map | ColorName_T] = Undefined,
        cornerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusBottomLeft: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusBottomRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusTopLeft: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusTopRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cursor: Optional[Parameter | SchemaBase | Map | Cursor_T] = Undefined,
        description: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        dir: Optional[Parameter | SchemaBase | Map | TextDirection_T] = Undefined,
        dx: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        dy: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        ellipsis: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        endAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fill: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        fillOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        filled: Optional[bool] = Undefined,
        font: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontWeight: Optional[Parameter | SchemaBase | Map | FontWeight_T] = Undefined,
        height: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        href: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        innerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        interpolate: Optional[Parameter | SchemaBase | Map | Interpolate_T] = Undefined,
        invalid: Optional[SchemaBase | MarkInvalidDataMode_T | None] = Undefined,
        limit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        lineBreak: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        lineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        opacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        order: Optional[bool | None] = Undefined,
        orient: Optional[SchemaBase | Orientation_T] = Undefined,
        outerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        padAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        shape: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        size: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        smooth: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        startAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        stroke: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        strokeCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        strokeDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        strokeDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeJoin: Optional[Parameter | SchemaBase | Map | StrokeJoin_T] = Undefined,
        strokeMiterLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tension: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        text: Optional[str | Parameter | SchemaBase | Sequence[str] | Map] = Undefined,
        theta: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        theta2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        timeUnitBandPosition: Optional[float] = Undefined,
        timeUnitBandSize: Optional[float] = Undefined,
        tooltip: Optional[
            str | bool | float | Parameter | SchemaBase | Map | None
        ] = Undefined,
        url: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        width: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        x: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        x2: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        y: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        y2: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        **kwds,
    ):
        super().__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            baseline=baseline,
            blend=blend,
            color=color,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            y=y,
            y2=y2,
            **kwds,
        )


class MarkDef(AnyMark):
    

    _schema = {"$ref": "

    def __init__(
        self,
        type: Optional[SchemaBase | Mark_T] = Undefined,
        align: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        angle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        ariaRole: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        ariaRoleDescription: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        aspect: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        bandSize: Optional[float] = Undefined,
        baseline: Optional[Parameter | SchemaBase | Map | TextBaseline_T] = Undefined,
        binSpacing: Optional[float] = Undefined,
        blend: Optional[Parameter | SchemaBase | Map | Blend_T] = Undefined,
        clip: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        color: Optional[str | Parameter | SchemaBase | Map | ColorName_T] = Undefined,
        continuousBandSize: Optional[float] = Undefined,
        cornerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusBottomLeft: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusBottomRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusEnd: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusTopLeft: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusTopRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cursor: Optional[Parameter | SchemaBase | Map | Cursor_T] = Undefined,
        description: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        dir: Optional[Parameter | SchemaBase | Map | TextDirection_T] = Undefined,
        discreteBandSize: Optional[float | SchemaBase | Map] = Undefined,
        dx: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        dy: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        ellipsis: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fill: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        fillOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        filled: Optional[bool] = Undefined,
        font: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontWeight: Optional[Parameter | SchemaBase | Map | FontWeight_T] = Undefined,
        height: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        href: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        innerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        interpolate: Optional[Parameter | SchemaBase | Map | Interpolate_T] = Undefined,
        invalid: Optional[SchemaBase | MarkInvalidDataMode_T | None] = Undefined,
        limit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        line: Optional[bool | SchemaBase | Map] = Undefined,
        lineBreak: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        lineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        minBandSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        opacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        order: Optional[bool | None] = Undefined,
        orient: Optional[SchemaBase | Orientation_T] = Undefined,
        outerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        padAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        point: Optional[bool | SchemaBase | Literal["transparent"] | Map] = Undefined,
        radius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius2Offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radiusOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        shape: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        size: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        smooth: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        stroke: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        strokeCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        strokeDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        strokeDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeJoin: Optional[Parameter | SchemaBase | Map | StrokeJoin_T] = Undefined,
        strokeMiterLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        style: Optional[str | Sequence[str]] = Undefined,
        tension: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        text: Optional[str | Parameter | SchemaBase | Sequence[str] | Map] = Undefined,
        theta: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        theta2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        theta2Offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        thetaOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        thickness: Optional[float] = Undefined,
        timeUnitBandPosition: Optional[float] = Undefined,
        timeUnitBandSize: Optional[float] = Undefined,
        tooltip: Optional[
            str | bool | float | Parameter | SchemaBase | Map | None
        ] = Undefined,
        url: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        width: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        x: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        x2: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        x2Offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        xOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        y: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        y2: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        y2Offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        yOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            type=type,
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            bandSize=bandSize,
            baseline=baseline,
            binSpacing=binSpacing,
            blend=blend,
            clip=clip,
            color=color,
            continuousBandSize=continuousBandSize,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusEnd=cornerRadiusEnd,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            discreteBandSize=discreteBandSize,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            line=line,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            minBandSize=minBandSize,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            point=point,
            radius=radius,
            radius2=radius2,
            radius2Offset=radius2Offset,
            radiusOffset=radiusOffset,
            shape=shape,
            size=size,
            smooth=smooth,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            style=style,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            theta2Offset=theta2Offset,
            thetaOffset=thetaOffset,
            thickness=thickness,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            x2Offset=x2Offset,
            xOffset=xOffset,
            y=y,
            y2=y2,
            y2Offset=y2Offset,
            yOffset=yOffset,
            **kwds,
        )


class MarkInvalidDataMode(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class MarkPropDefGradientstringnull(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class FieldOrDatumDefWithConditionDatumDefGradientstringnull(
    ColorDef, MarkPropDefGradientstringnull
):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        bandPosition: Optional[float] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        datum: Optional[
            Temporal | Parameter | SchemaBase | Map | PrimitiveValue_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | Type_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            bandPosition=bandPosition,
            condition=condition,
            datum=datum,
            title=title,
            type=type,
            **kwds,
        )


class FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull(
    ColorDef, MarkPropDefGradientstringnull
):
    r

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Map | None] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        legend: Optional[SchemaBase | Map | None] = Undefined,
        scale: Optional[SchemaBase | Map | None] = Undefined,
        sort: Optional[
            SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
            | AllSortString_T
            | None
        ] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            legend=legend,
            scale=scale,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class MarkPropDefnumber(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class MarkPropDefnumberArray(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class MarkPropDefstringnullTypeForShape(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class MarkType(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Month(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class MultiLineString(Geometry):
    

    _schema = {"$ref": "

    def __init__(
        self,
        coordinates: Optional[
            Sequence[Sequence[SchemaBase | Sequence[float]]]
        ] = Undefined,
        type: Optional[Literal["MultiLineString"]] = Undefined,
        bbox: Optional[SchemaBase | Sequence[float]] = Undefined,
        **kwds,
    ):
        super().__init__(coordinates=coordinates, type=type, bbox=bbox, **kwds)


class MultiPoint(Geometry):
    

    _schema = {"$ref": "

    def __init__(
        self,
        coordinates: Optional[Sequence[SchemaBase | Sequence[float]]] = Undefined,
        type: Optional[Literal["MultiPoint"]] = Undefined,
        bbox: Optional[SchemaBase | Sequence[float]] = Undefined,
        **kwds,
    ):
        super().__init__(coordinates=coordinates, type=type, bbox=bbox, **kwds)


class MultiPolygon(Geometry):
    

    _schema = {"$ref": "

    def __init__(
        self,
        coordinates: Optional[
            Sequence[Sequence[Sequence[SchemaBase | Sequence[float]]]]
        ] = Undefined,
        type: Optional[Literal["MultiPolygon"]] = Undefined,
        bbox: Optional[SchemaBase | Sequence[float]] = Undefined,
        **kwds,
    ):
        super().__init__(coordinates=coordinates, type=type, bbox=bbox, **kwds)


class NamedData(DataSource):
    

    _schema = {"$ref": "

    def __init__(
        self,
        name: Optional[str] = Undefined,
        format: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(name=name, format=format, **kwds)


class NonArgAggregateOp(Aggregate):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class NonNormalizedSpec(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class NumberLocale(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        currency: Optional[SchemaBase | Sequence[str]] = Undefined,
        decimal: Optional[str] = Undefined,
        grouping: Optional[Sequence[float]] = Undefined,
        thousands: Optional[str] = Undefined,
        minus: Optional[str] = Undefined,
        nan: Optional[str] = Undefined,
        numerals: Optional[SchemaBase | Sequence[str]] = Undefined,
        percent: Optional[str] = Undefined,
        **kwds,
    ):
        super().__init__(
            currency=currency,
            decimal=decimal,
            grouping=grouping,
            thousands=thousands,
            minus=minus,
            nan=nan,
            numerals=numerals,
            percent=percent,
            **kwds,
        )


class NumericArrayMarkPropDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class FieldOrDatumDefWithConditionDatumDefnumberArray(
    MarkPropDefnumberArray, NumericArrayMarkPropDef
):
    

    _schema = {"$ref": "

    def __init__(
        self,
        bandPosition: Optional[float] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        datum: Optional[
            Temporal | Parameter | SchemaBase | Map | PrimitiveValue_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | Type_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            bandPosition=bandPosition,
            condition=condition,
            datum=datum,
            title=title,
            type=type,
            **kwds,
        )


class FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray(
    MarkPropDefnumberArray, NumericArrayMarkPropDef
):
    r

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Map | None] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        legend: Optional[SchemaBase | Map | None] = Undefined,
        scale: Optional[SchemaBase | Map | None] = Undefined,
        sort: Optional[
            SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
            | AllSortString_T
            | None
        ] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            legend=legend,
            scale=scale,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class NumericMarkPropDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class FieldOrDatumDefWithConditionDatumDefnumber(MarkPropDefnumber, NumericMarkPropDef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        bandPosition: Optional[float] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        datum: Optional[
            Temporal | Parameter | SchemaBase | Map | PrimitiveValue_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | Type_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            bandPosition=bandPosition,
            condition=condition,
            datum=datum,
            title=title,
            type=type,
            **kwds,
        )


class FieldOrDatumDefWithConditionMarkPropFieldDefnumber(
    MarkPropDefnumber, NumericMarkPropDef
):
    r

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Map | None] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        legend: Optional[SchemaBase | Map | None] = Undefined,
        scale: Optional[SchemaBase | Map | None] = Undefined,
        sort: Optional[
            SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
            | AllSortString_T
            | None
        ] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            legend=legend,
            scale=scale,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class OffsetDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class OrderFieldDef(VegaLiteSchema):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Literal["binned"] | Map | None] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        sort: Optional[SchemaBase | SortOrder_T] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class OrderOnlyDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, sort: Optional[SchemaBase | SortOrder_T] = Undefined, **kwds):
        super().__init__(sort=sort, **kwds)


class OrderValueDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        value: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        **kwds,
    ):
        super().__init__(value=value, condition=condition, **kwds)


class Orient(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Orientation(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class OverlayMarkDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        align: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        angle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        ariaRole: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        ariaRoleDescription: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        aspect: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        baseline: Optional[Parameter | SchemaBase | Map | TextBaseline_T] = Undefined,
        blend: Optional[Parameter | SchemaBase | Map | Blend_T] = Undefined,
        clip: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        color: Optional[str | Parameter | SchemaBase | Map | ColorName_T] = Undefined,
        cornerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusBottomLeft: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusBottomRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusTopLeft: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusTopRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cursor: Optional[Parameter | SchemaBase | Map | Cursor_T] = Undefined,
        description: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        dir: Optional[Parameter | SchemaBase | Map | TextDirection_T] = Undefined,
        dx: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        dy: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        ellipsis: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        endAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fill: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        fillOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        filled: Optional[bool] = Undefined,
        font: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontWeight: Optional[Parameter | SchemaBase | Map | FontWeight_T] = Undefined,
        height: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        href: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        innerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        interpolate: Optional[Parameter | SchemaBase | Map | Interpolate_T] = Undefined,
        invalid: Optional[SchemaBase | MarkInvalidDataMode_T | None] = Undefined,
        limit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        lineBreak: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        lineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        opacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        order: Optional[bool | None] = Undefined,
        orient: Optional[SchemaBase | Orientation_T] = Undefined,
        outerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        padAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius2Offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radiusOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        shape: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        size: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        smooth: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        startAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        stroke: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        strokeCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        strokeDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        strokeDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeJoin: Optional[Parameter | SchemaBase | Map | StrokeJoin_T] = Undefined,
        strokeMiterLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        style: Optional[str | Sequence[str]] = Undefined,
        tension: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        text: Optional[str | Parameter | SchemaBase | Sequence[str] | Map] = Undefined,
        theta: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        theta2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        theta2Offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        thetaOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        timeUnitBandPosition: Optional[float] = Undefined,
        timeUnitBandSize: Optional[float] = Undefined,
        tooltip: Optional[
            str | bool | float | Parameter | SchemaBase | Map | None
        ] = Undefined,
        url: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        width: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        x: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        x2: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        x2Offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        xOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        y: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        y2: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        y2Offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        yOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            baseline=baseline,
            blend=blend,
            clip=clip,
            color=color,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            radius=radius,
            radius2=radius2,
            radius2Offset=radius2Offset,
            radiusOffset=radiusOffset,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            style=style,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            theta2Offset=theta2Offset,
            thetaOffset=thetaOffset,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            x2Offset=x2Offset,
            xOffset=xOffset,
            y=y,
            y2=y2,
            y2Offset=y2Offset,
            yOffset=yOffset,
            **kwds,
        )


class Padding(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ParameterExtent(BinExtent):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ParameterName(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Parse(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, **kwds):
        super().__init__(**kwds)


class ParseValue(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class Point(Geometry):
    

    _schema = {"$ref": "

    def __init__(
        self,
        coordinates: Optional[SchemaBase | Sequence[float]] = Undefined,
        type: Optional[Literal["Point"]] = Undefined,
        bbox: Optional[SchemaBase | Sequence[float]] = Undefined,
        **kwds,
    ):
        super().__init__(coordinates=coordinates, type=type, bbox=bbox, **kwds)


class PointSelectionConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        type: Optional[Literal["point"]] = Undefined,
        clear: Optional[str | bool | SchemaBase | Map] = Undefined,
        encodings: Optional[Sequence[SchemaBase | SingleDefUnitChannel_T]] = Undefined,
        fields: Optional[Sequence[str | SchemaBase]] = Undefined,
        nearest: Optional[bool] = Undefined,
        on: Optional[str | SchemaBase | Map] = Undefined,
        resolve: Optional[SchemaBase | SelectionResolution_T] = Undefined,
        toggle: Optional[str | bool] = Undefined,
        **kwds,
    ):
        super().__init__(
            type=type,
            clear=clear,
            encodings=encodings,
            fields=fields,
            nearest=nearest,
            on=on,
            resolve=resolve,
            toggle=toggle,
            **kwds,
        )


class PointSelectionConfigWithoutType(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        clear: Optional[str | bool | SchemaBase | Map] = Undefined,
        encodings: Optional[Sequence[SchemaBase | SingleDefUnitChannel_T]] = Undefined,
        fields: Optional[Sequence[str | SchemaBase]] = Undefined,
        nearest: Optional[bool] = Undefined,
        on: Optional[str | SchemaBase | Map] = Undefined,
        resolve: Optional[SchemaBase | SelectionResolution_T] = Undefined,
        toggle: Optional[str | bool] = Undefined,
        **kwds,
    ):
        super().__init__(
            clear=clear,
            encodings=encodings,
            fields=fields,
            nearest=nearest,
            on=on,
            resolve=resolve,
            toggle=toggle,
            **kwds,
        )


class PolarDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class Polygon(Geometry):
    

    _schema = {"$ref": "

    def __init__(
        self,
        coordinates: Optional[
            Sequence[Sequence[SchemaBase | Sequence[float]]]
        ] = Undefined,
        type: Optional[Literal["Polygon"]] = Undefined,
        bbox: Optional[SchemaBase | Sequence[float]] = Undefined,
        **kwds,
    ):
        super().__init__(coordinates=coordinates, type=type, bbox=bbox, **kwds)


class Position(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Position2Def(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class DatumDef(LatLongDef, Position2Def):
    

    _schema = {"$ref": "

    def __init__(
        self,
        bandPosition: Optional[float] = Undefined,
        datum: Optional[
            Temporal | Parameter | SchemaBase | Map | PrimitiveValue_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | Type_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            bandPosition=bandPosition, datum=datum, title=title, type=type, **kwds
        )


class PositionDatumDefBase(PolarDef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        bandPosition: Optional[float] = Undefined,
        datum: Optional[
            Temporal | Parameter | SchemaBase | Map | PrimitiveValue_T
        ] = Undefined,
        scale: Optional[SchemaBase | Map | None] = Undefined,
        stack: Optional[bool | SchemaBase | StackOffset_T | None] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | Type_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            bandPosition=bandPosition,
            datum=datum,
            scale=scale,
            stack=stack,
            title=title,
            type=type,
            **kwds,
        )


class PositionDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class PositionDatumDef(PositionDef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        axis: Optional[SchemaBase | Map | None] = Undefined,
        bandPosition: Optional[float] = Undefined,
        datum: Optional[
            Temporal | Parameter | SchemaBase | Map | PrimitiveValue_T
        ] = Undefined,
        impute: Optional[SchemaBase | Map | None] = Undefined,
        scale: Optional[SchemaBase | Map | None] = Undefined,
        stack: Optional[bool | SchemaBase | StackOffset_T | None] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | Type_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            axis=axis,
            bandPosition=bandPosition,
            datum=datum,
            impute=impute,
            scale=scale,
            stack=stack,
            title=title,
            type=type,
            **kwds,
        )


class PositionFieldDef(PositionDef):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        axis: Optional[SchemaBase | Map | None] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Literal["binned"] | Map | None] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        impute: Optional[SchemaBase | Map | None] = Undefined,
        scale: Optional[SchemaBase | Map | None] = Undefined,
        sort: Optional[
            SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
            | AllSortString_T
            | None
        ] = Undefined,
        stack: Optional[bool | SchemaBase | StackOffset_T | None] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            axis=axis,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            impute=impute,
            scale=scale,
            sort=sort,
            stack=stack,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class PositionFieldDefBase(PolarDef):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Literal["binned"] | Map | None] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        scale: Optional[SchemaBase | Map | None] = Undefined,
        sort: Optional[
            SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
            | AllSortString_T
            | None
        ] = Undefined,
        stack: Optional[bool | SchemaBase | StackOffset_T | None] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            scale=scale,
            sort=sort,
            stack=stack,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class PositionValueDef(PolarDef, Position2Def, PositionDef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        value: Optional[
            float | Parameter | SchemaBase | Literal["height", "width"] | Map
        ] = Undefined,
        **kwds,
    ):
        super().__init__(value=value, **kwds)


class PredicateComposition(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)

    def __invert__(self) -> PredicateComposition:
        return PredicateComposition({"not": self.to_dict()})

    def __and__(self, other: SchemaBase) -> PredicateComposition:
        return PredicateComposition({"and": [self.to_dict(), other.to_dict()]})

    def __or__(self, other: SchemaBase) -> PredicateComposition:
        return PredicateComposition({"or": [self.to_dict(), other.to_dict()]})


class LogicalAndPredicate(PredicateComposition):
    

    _schema = {"$ref": "

    def __init__(self, **kwds):
        super().__init__(**kwds)


class LogicalNotPredicate(PredicateComposition):
    

    _schema = {"$ref": "

    def __init__(self, **kwds):
        super().__init__(**kwds)


class LogicalOrPredicate(PredicateComposition):
    

    _schema = {"$ref": "

    def __init__(self, **kwds):
        super().__init__(**kwds)


class Predicate(PredicateComposition):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class FieldEqualPredicate(Predicate):
    

    _schema = {"$ref": "

    def __init__(
        self,
        equal: Optional[
            str | bool | float | Temporal | Parameter | SchemaBase | Map
        ] = Undefined,
        field: Optional[str | SchemaBase] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        **kwds,
    ):
        super().__init__(equal=equal, field=field, timeUnit=timeUnit, **kwds)


class FieldGTEPredicate(Predicate):
    

    _schema = {"$ref": "

    def __init__(
        self,
        field: Optional[str | SchemaBase] = Undefined,
        gte: Optional[
            str | float | Temporal | Parameter | SchemaBase | Map
        ] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        **kwds,
    ):
        super().__init__(field=field, gte=gte, timeUnit=timeUnit, **kwds)


class FieldGTPredicate(Predicate):
    

    _schema = {"$ref": "

    def __init__(
        self,
        field: Optional[str | SchemaBase] = Undefined,
        gt: Optional[str | float | Temporal | Parameter | SchemaBase | Map] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        **kwds,
    ):
        super().__init__(field=field, gt=gt, timeUnit=timeUnit, **kwds)


class FieldLTEPredicate(Predicate):
    

    _schema = {"$ref": "

    def __init__(
        self,
        field: Optional[str | SchemaBase] = Undefined,
        lte: Optional[
            str | float | Temporal | Parameter | SchemaBase | Map
        ] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        **kwds,
    ):
        super().__init__(field=field, lte=lte, timeUnit=timeUnit, **kwds)


class FieldLTPredicate(Predicate):
    

    _schema = {"$ref": "

    def __init__(
        self,
        field: Optional[str | SchemaBase] = Undefined,
        lt: Optional[str | float | Temporal | Parameter | SchemaBase | Map] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        **kwds,
    ):
        super().__init__(field=field, lt=lt, timeUnit=timeUnit, **kwds)


class FieldOneOfPredicate(Predicate):
    

    _schema = {"$ref": "

    def __init__(
        self,
        field: Optional[str | SchemaBase] = Undefined,
        oneOf: Optional[
            Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
        ] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        **kwds,
    ):
        super().__init__(field=field, oneOf=oneOf, timeUnit=timeUnit, **kwds)


class FieldRangePredicate(Predicate):
    

    _schema = {"$ref": "

    def __init__(
        self,
        field: Optional[str | SchemaBase] = Undefined,
        range: Optional[
            Parameter
            | SchemaBase
            | Sequence[float | Temporal | Parameter | SchemaBase | Map | None]
            | Map
        ] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        **kwds,
    ):
        super().__init__(field=field, range=range, timeUnit=timeUnit, **kwds)


class FieldValidPredicate(Predicate):
    

    _schema = {"$ref": "

    def __init__(
        self,
        field: Optional[str | SchemaBase] = Undefined,
        valid: Optional[bool] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        **kwds,
    ):
        super().__init__(field=field, valid=valid, timeUnit=timeUnit, **kwds)


class ParameterPredicate(Predicate):
    

    _schema = {"$ref": "

    def __init__(
        self,
        param: Optional[str | SchemaBase] = Undefined,
        empty: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(param=param, empty=empty, **kwds)


class Projection(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        center: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        clipAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        clipExtent: Optional[
            Parameter | SchemaBase | Sequence[SchemaBase | Sequence[float]] | Map
        ] = Undefined,
        coefficient: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        distance: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        extent: Optional[
            Parameter | SchemaBase | Sequence[SchemaBase | Sequence[float]] | Map
        ] = Undefined,
        fit: Optional[
            Parameter
            | SchemaBase
            | Sequence[SchemaBase | Map]
            | Sequence[SchemaBase | Sequence[SchemaBase | Map] | Map]
            | Map
        ] = Undefined,
        fraction: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        lobes: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        parallel: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        parallels: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        pointRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        precision: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        ratio: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        reflectX: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        reflectY: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        rotate: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        scale: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        size: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        spacing: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tilt: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        translate: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        type: Optional[Parameter | SchemaBase | Map | ProjectionType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            center=center,
            clipAngle=clipAngle,
            clipExtent=clipExtent,
            coefficient=coefficient,
            distance=distance,
            extent=extent,
            fit=fit,
            fraction=fraction,
            lobes=lobes,
            parallel=parallel,
            parallels=parallels,
            pointRadius=pointRadius,
            precision=precision,
            radius=radius,
            ratio=ratio,
            reflectX=reflectX,
            reflectY=reflectY,
            rotate=rotate,
            scale=scale,
            size=size,
            spacing=spacing,
            tilt=tilt,
            translate=translate,
            type=type,
            **kwds,
        )


class ProjectionConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        center: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        clipAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        clipExtent: Optional[
            Parameter | SchemaBase | Sequence[SchemaBase | Sequence[float]] | Map
        ] = Undefined,
        coefficient: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        distance: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        extent: Optional[
            Parameter | SchemaBase | Sequence[SchemaBase | Sequence[float]] | Map
        ] = Undefined,
        fit: Optional[
            Parameter
            | SchemaBase
            | Sequence[SchemaBase | Map]
            | Sequence[SchemaBase | Sequence[SchemaBase | Map] | Map]
            | Map
        ] = Undefined,
        fraction: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        lobes: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        parallel: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        parallels: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        pointRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        precision: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        ratio: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        reflectX: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        reflectY: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        rotate: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        scale: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        size: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        spacing: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tilt: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        translate: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        type: Optional[Parameter | SchemaBase | Map | ProjectionType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            center=center,
            clipAngle=clipAngle,
            clipExtent=clipExtent,
            coefficient=coefficient,
            distance=distance,
            extent=extent,
            fit=fit,
            fraction=fraction,
            lobes=lobes,
            parallel=parallel,
            parallels=parallels,
            pointRadius=pointRadius,
            precision=precision,
            radius=radius,
            ratio=ratio,
            reflectX=reflectX,
            reflectY=reflectY,
            rotate=rotate,
            scale=scale,
            size=size,
            spacing=spacing,
            tilt=tilt,
            translate=translate,
            type=type,
            **kwds,
        )


class ProjectionType(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class RadialGradient(Gradient):
    

    _schema = {"$ref": "

    def __init__(
        self,
        gradient: Optional[Literal["radial"]] = Undefined,
        stops: Optional[Sequence[SchemaBase | Map]] = Undefined,
        id: Optional[str] = Undefined,
        r1: Optional[float] = Undefined,
        r2: Optional[float] = Undefined,
        x1: Optional[float] = Undefined,
        x2: Optional[float] = Undefined,
        y1: Optional[float] = Undefined,
        y2: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            gradient=gradient,
            stops=stops,
            id=id,
            r1=r1,
            r2=r2,
            x1=x1,
            x2=x2,
            y1=y1,
            y2=y2,
            **kwds,
        )


class RangeConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        category: Optional[
            SchemaBase
            | Sequence[str | SchemaBase | ColorName_T]
            | Sequence[str | bool | float | SchemaBase | Sequence[float] | None]
            | Map
            | RangeEnum_T
        ] = Undefined,
        diverging: Optional[
            SchemaBase
            | Sequence[str | SchemaBase | ColorName_T]
            | Sequence[str | bool | float | SchemaBase | Sequence[float] | None]
            | Map
            | RangeEnum_T
        ] = Undefined,
        heatmap: Optional[
            SchemaBase
            | Sequence[str | SchemaBase | ColorName_T]
            | Sequence[str | bool | float | SchemaBase | Sequence[float] | None]
            | Map
            | RangeEnum_T
        ] = Undefined,
        ordinal: Optional[
            SchemaBase
            | Sequence[str | SchemaBase | ColorName_T]
            | Sequence[str | bool | float | SchemaBase | Sequence[float] | None]
            | Map
            | RangeEnum_T
        ] = Undefined,
        ramp: Optional[
            SchemaBase
            | Sequence[str | SchemaBase | ColorName_T]
            | Sequence[str | bool | float | SchemaBase | Sequence[float] | None]
            | Map
            | RangeEnum_T
        ] = Undefined,
        symbol: Optional[Sequence[str | SchemaBase]] = Undefined,
        **kwds,
    ):
        super().__init__(
            category=category,
            diverging=diverging,
            heatmap=heatmap,
            ordinal=ordinal,
            ramp=ramp,
            symbol=symbol,
            **kwds,
        )


class RangeRawArray(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class RangeScheme(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class RangeEnum(RangeScheme):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class RangeRaw(RangeScheme):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class RectConfig(AnyMarkConfig):
    

    _schema = {"$ref": "

    def __init__(
        self,
        align: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        angle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        ariaRole: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        ariaRoleDescription: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        aspect: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        baseline: Optional[Parameter | SchemaBase | Map | TextBaseline_T] = Undefined,
        binSpacing: Optional[float] = Undefined,
        blend: Optional[Parameter | SchemaBase | Map | Blend_T] = Undefined,
        color: Optional[str | Parameter | SchemaBase | Map | ColorName_T] = Undefined,
        continuousBandSize: Optional[float] = Undefined,
        cornerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusBottomLeft: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusBottomRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusTopLeft: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusTopRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cursor: Optional[Parameter | SchemaBase | Map | Cursor_T] = Undefined,
        description: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        dir: Optional[Parameter | SchemaBase | Map | TextDirection_T] = Undefined,
        discreteBandSize: Optional[float | SchemaBase | Map] = Undefined,
        dx: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        dy: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        ellipsis: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        endAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fill: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        fillOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        filled: Optional[bool] = Undefined,
        font: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontWeight: Optional[Parameter | SchemaBase | Map | FontWeight_T] = Undefined,
        height: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        href: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        innerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        interpolate: Optional[Parameter | SchemaBase | Map | Interpolate_T] = Undefined,
        invalid: Optional[SchemaBase | MarkInvalidDataMode_T | None] = Undefined,
        limit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        lineBreak: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        lineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        minBandSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        opacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        order: Optional[bool | None] = Undefined,
        orient: Optional[SchemaBase | Orientation_T] = Undefined,
        outerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        padAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        shape: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        size: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        smooth: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        startAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        stroke: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        strokeCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        strokeDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        strokeDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeJoin: Optional[Parameter | SchemaBase | Map | StrokeJoin_T] = Undefined,
        strokeMiterLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tension: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        text: Optional[str | Parameter | SchemaBase | Sequence[str] | Map] = Undefined,
        theta: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        theta2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        timeUnitBandPosition: Optional[float] = Undefined,
        timeUnitBandSize: Optional[float] = Undefined,
        tooltip: Optional[
            str | bool | float | Parameter | SchemaBase | Map | None
        ] = Undefined,
        url: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        width: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        x: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        x2: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        y: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        y2: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        **kwds,
    ):
        super().__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            baseline=baseline,
            binSpacing=binSpacing,
            blend=blend,
            color=color,
            continuousBandSize=continuousBandSize,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            discreteBandSize=discreteBandSize,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            minBandSize=minBandSize,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            y=y,
            y2=y2,
            **kwds,
        )


class RelativeBandSize(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, band: Optional[float] = Undefined, **kwds):
        super().__init__(band=band, **kwds)


class RepeatMapping(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        column: Optional[Sequence[str]] = Undefined,
        row: Optional[Sequence[str]] = Undefined,
        **kwds,
    ):
        super().__init__(column=column, row=row, **kwds)


class RepeatRef(Field):
    

    _schema = {"$ref": "

    def __init__(
        self,
        repeat: Optional[Literal["row", "column", "repeat", "layer"]] = Undefined,
        **kwds,
    ):
        super().__init__(repeat=repeat, **kwds)


class Resolve(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        axis: Optional[SchemaBase | Map] = Undefined,
        legend: Optional[SchemaBase | Map] = Undefined,
        scale: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(axis=axis, legend=legend, scale=scale, **kwds)


class ResolveMode(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class RowColLayoutAlign(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        column: Optional[SchemaBase | LayoutAlign_T] = Undefined,
        row: Optional[SchemaBase | LayoutAlign_T] = Undefined,
        **kwds,
    ):
        super().__init__(column=column, row=row, **kwds)


class RowColboolean(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        column: Optional[bool] = Undefined,
        row: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(column=column, row=row, **kwds)


class RowColnumber(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        column: Optional[float] = Undefined,
        row: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(column=column, row=row, **kwds)


class RowColumnEncodingFieldDef(VegaLiteSchema):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        align: Optional[SchemaBase | LayoutAlign_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Map | None] = Undefined,
        center: Optional[bool] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        header: Optional[SchemaBase | Map | None] = Undefined,
        sort: Optional[
            SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
            | SortOrder_T
            | None
        ] = Undefined,
        spacing: Optional[float] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            align=align,
            bandPosition=bandPosition,
            bin=bin,
            center=center,
            field=field,
            header=header,
            sort=sort,
            spacing=spacing,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class Scale(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        align: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        base: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        bins: Optional[SchemaBase | Sequence[float] | Map] = Undefined,
        clamp: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        constant: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        domain: Optional[
            Parameter
            | SchemaBase
            | Literal["unaggregated"]
            | Sequence[
                str | bool | float | Temporal | Parameter | SchemaBase | Map | None
            ]
            | Map
        ] = Undefined,
        domainMax: Optional[
            float | Temporal | Parameter | SchemaBase | Map
        ] = Undefined,
        domainMid: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        domainMin: Optional[
            float | Temporal | Parameter | SchemaBase | Map
        ] = Undefined,
        domainRaw: Optional[Parameter | SchemaBase | Map] = Undefined,
        exponent: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        interpolate: Optional[
            Parameter | SchemaBase | Map | ScaleInterpolateEnum_T
        ] = Undefined,
        nice: Optional[
            bool | float | Parameter | SchemaBase | Map | TimeInterval_T
        ] = Undefined,
        padding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        paddingInner: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        paddingOuter: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        range: Optional[
            SchemaBase
            | Sequence[str | float | Parameter | SchemaBase | Sequence[float] | Map]
            | Map
            | RangeEnum_T
        ] = Undefined,
        rangeMax: Optional[str | float | Parameter | SchemaBase | Map] = Undefined,
        rangeMin: Optional[str | float | Parameter | SchemaBase | Map] = Undefined,
        reverse: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        round: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        scheme: Optional[Parameter | SchemaBase | Map | ColorScheme_T] = Undefined,
        type: Optional[SchemaBase | ScaleType_T] = Undefined,
        zero: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            align=align,
            base=base,
            bins=bins,
            clamp=clamp,
            constant=constant,
            domain=domain,
            domainMax=domainMax,
            domainMid=domainMid,
            domainMin=domainMin,
            domainRaw=domainRaw,
            exponent=exponent,
            interpolate=interpolate,
            nice=nice,
            padding=padding,
            paddingInner=paddingInner,
            paddingOuter=paddingOuter,
            range=range,
            rangeMax=rangeMax,
            rangeMin=rangeMin,
            reverse=reverse,
            round=round,
            scheme=scheme,
            type=type,
            zero=zero,
            **kwds,
        )


class ScaleBins(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleBinParams(ScaleBins):
    

    _schema = {"$ref": "

    def __init__(
        self,
        step: Optional[float] = Undefined,
        start: Optional[float] = Undefined,
        stop: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(step=step, start=start, stop=stop, **kwds)


class ScaleConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        bandPaddingInner: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        bandPaddingOuter: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        bandWithNestedOffsetPaddingInner: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        bandWithNestedOffsetPaddingOuter: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        barBandPaddingInner: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        clamp: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        continuousPadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        invalid: Optional[SchemaBase | Map] = Undefined,
        maxBandSize: Optional[float] = Undefined,
        maxFontSize: Optional[float] = Undefined,
        maxOpacity: Optional[float] = Undefined,
        maxSize: Optional[float] = Undefined,
        maxStrokeWidth: Optional[float] = Undefined,
        minBandSize: Optional[float] = Undefined,
        minFontSize: Optional[float] = Undefined,
        minOpacity: Optional[float] = Undefined,
        minSize: Optional[float] = Undefined,
        minStrokeWidth: Optional[float] = Undefined,
        offsetBandPaddingInner: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        offsetBandPaddingOuter: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        pointPadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        quantileCount: Optional[float] = Undefined,
        quantizeCount: Optional[float] = Undefined,
        rectBandPaddingInner: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        round: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        tickBandPaddingInner: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        useUnaggregatedDomain: Optional[bool] = Undefined,
        xReverse: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        zero: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(
            bandPaddingInner=bandPaddingInner,
            bandPaddingOuter=bandPaddingOuter,
            bandWithNestedOffsetPaddingInner=bandWithNestedOffsetPaddingInner,
            bandWithNestedOffsetPaddingOuter=bandWithNestedOffsetPaddingOuter,
            barBandPaddingInner=barBandPaddingInner,
            clamp=clamp,
            continuousPadding=continuousPadding,
            invalid=invalid,
            maxBandSize=maxBandSize,
            maxFontSize=maxFontSize,
            maxOpacity=maxOpacity,
            maxSize=maxSize,
            maxStrokeWidth=maxStrokeWidth,
            minBandSize=minBandSize,
            minFontSize=minFontSize,
            minOpacity=minOpacity,
            minSize=minSize,
            minStrokeWidth=minStrokeWidth,
            offsetBandPaddingInner=offsetBandPaddingInner,
            offsetBandPaddingOuter=offsetBandPaddingOuter,
            pointPadding=pointPadding,
            quantileCount=quantileCount,
            quantizeCount=quantizeCount,
            rectBandPaddingInner=rectBandPaddingInner,
            round=round,
            tickBandPaddingInner=tickBandPaddingInner,
            useUnaggregatedDomain=useUnaggregatedDomain,
            xReverse=xReverse,
            zero=zero,
            **kwds,
        )


class ScaleDatumDef(OffsetDef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        bandPosition: Optional[float] = Undefined,
        datum: Optional[
            Temporal | Parameter | SchemaBase | Map | PrimitiveValue_T
        ] = Undefined,
        scale: Optional[SchemaBase | Map | None] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | Type_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            bandPosition=bandPosition,
            datum=datum,
            scale=scale,
            title=title,
            type=type,
            **kwds,
        )


class ScaleFieldDef(OffsetDef):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Map | None] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        scale: Optional[SchemaBase | Map | None] = Undefined,
        sort: Optional[
            SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
            | AllSortString_T
            | None
        ] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            scale=scale,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class ScaleInterpolateEnum(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class ScaleInterpolateParams(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        type: Optional[Literal["rgb", "cubehelix", "cubehelix-long"]] = Undefined,
        gamma: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(type=type, gamma=gamma, **kwds)


class ScaleInvalidDataConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        angle: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        color: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        fill: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        fillOpacity: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        opacity: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        radius: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        shape: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        size: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        stroke: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        strokeDash: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        strokeOpacity: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        strokeWidth: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        theta: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        x: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        xOffset: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        y: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        yOffset: Optional[SchemaBase | Literal["zero-or-min"] | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            angle=angle,
            color=color,
            fill=fill,
            fillOpacity=fillOpacity,
            opacity=opacity,
            radius=radius,
            shape=shape,
            size=size,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            theta=theta,
            x=x,
            xOffset=xOffset,
            y=y,
            yOffset=yOffset,
            **kwds,
        )


class ScaleInvalidDataShowAsangle(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValueangle(ScaleInvalidDataShowAsangle):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[float] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAscolor(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValuecolor(ScaleInvalidDataShowAscolor):
    

    _schema = {"$ref": '

    def __init__(
        self, value: Optional[str | SchemaBase | Map | ColorName_T] = Undefined, **kwds
    ):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsfill(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValuefill(ScaleInvalidDataShowAsfill):
    

    _schema = {"$ref": '

    def __init__(
        self,
        value: Optional[str | SchemaBase | Map | ColorName_T | None] = Undefined,
        **kwds,
    ):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsfillOpacity(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValuefillOpacity(ScaleInvalidDataShowAsfillOpacity):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[float] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsopacity(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValueopacity(ScaleInvalidDataShowAsopacity):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[float] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsradius(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValueradius(ScaleInvalidDataShowAsradius):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[float] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsshape(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValueshape(ScaleInvalidDataShowAsshape):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[str | SchemaBase] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAssize(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValuesize(ScaleInvalidDataShowAssize):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[float] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsstroke(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValuestroke(ScaleInvalidDataShowAsstroke):
    

    _schema = {"$ref": '

    def __init__(
        self,
        value: Optional[str | SchemaBase | Map | ColorName_T | None] = Undefined,
        **kwds,
    ):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsstrokeDash(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValuestrokeDash(ScaleInvalidDataShowAsstrokeDash):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[Sequence[float]] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsstrokeOpacity(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValuestrokeOpacity(ScaleInvalidDataShowAsstrokeOpacity):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[float] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsstrokeWidth(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValuestrokeWidth(ScaleInvalidDataShowAsstrokeWidth):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[float] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAstheta(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValuetheta(ScaleInvalidDataShowAstheta):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[float] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsx(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValuex(ScaleInvalidDataShowAsx):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[float | Literal["width"]] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsxOffset(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValuexOffset(ScaleInvalidDataShowAsxOffset):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[float] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsy(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValuey(ScaleInvalidDataShowAsy):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[float | Literal["height"]] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleInvalidDataShowAsyOffset(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ScaleInvalidDataShowAsValueyOffset(ScaleInvalidDataShowAsyOffset):
    

    _schema = {"$ref": '

    def __init__(self, value: Optional[float] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ScaleResolveMap(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        angle: Optional[SchemaBase | ResolveMode_T] = Undefined,
        color: Optional[SchemaBase | ResolveMode_T] = Undefined,
        fill: Optional[SchemaBase | ResolveMode_T] = Undefined,
        fillOpacity: Optional[SchemaBase | ResolveMode_T] = Undefined,
        opacity: Optional[SchemaBase | ResolveMode_T] = Undefined,
        radius: Optional[SchemaBase | ResolveMode_T] = Undefined,
        shape: Optional[SchemaBase | ResolveMode_T] = Undefined,
        size: Optional[SchemaBase | ResolveMode_T] = Undefined,
        stroke: Optional[SchemaBase | ResolveMode_T] = Undefined,
        strokeDash: Optional[SchemaBase | ResolveMode_T] = Undefined,
        strokeOpacity: Optional[SchemaBase | ResolveMode_T] = Undefined,
        strokeWidth: Optional[SchemaBase | ResolveMode_T] = Undefined,
        theta: Optional[SchemaBase | ResolveMode_T] = Undefined,
        x: Optional[SchemaBase | ResolveMode_T] = Undefined,
        xOffset: Optional[SchemaBase | ResolveMode_T] = Undefined,
        y: Optional[SchemaBase | ResolveMode_T] = Undefined,
        yOffset: Optional[SchemaBase | ResolveMode_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            angle=angle,
            color=color,
            fill=fill,
            fillOpacity=fillOpacity,
            opacity=opacity,
            radius=radius,
            shape=shape,
            size=size,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            theta=theta,
            x=x,
            xOffset=xOffset,
            y=y,
            yOffset=yOffset,
            **kwds,
        )


class ScaleType(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class SchemeParams(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        name: Optional[SchemaBase | ColorScheme_T] = Undefined,
        count: Optional[float] = Undefined,
        extent: Optional[Sequence[float]] = Undefined,
        **kwds,
    ):
        super().__init__(name=name, count=count, extent=extent, **kwds)


class SecondaryFieldDef(Position2Def):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[None] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            timeUnit=timeUnit,
            title=title,
            **kwds,
        )


class SelectionConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        interval: Optional[SchemaBase | Map] = Undefined,
        point: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(interval=interval, point=point, **kwds)


class SelectionInit(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class DateTime(SelectionInit):
    

    _schema = {"$ref": "

    def __init__(
        self,
        date: Optional[float] = Undefined,
        day: Optional[str | float | SchemaBase] = Undefined,
        hours: Optional[float] = Undefined,
        milliseconds: Optional[float] = Undefined,
        minutes: Optional[float] = Undefined,
        month: Optional[str | float | SchemaBase] = Undefined,
        quarter: Optional[float] = Undefined,
        seconds: Optional[float] = Undefined,
        utc: Optional[bool] = Undefined,
        year: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            date=date,
            day=day,
            hours=hours,
            milliseconds=milliseconds,
            minutes=minutes,
            month=month,
            quarter=quarter,
            seconds=seconds,
            utc=utc,
            year=year,
            **kwds,
        )


class PrimitiveValue(SelectionInit):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class SelectionInitInterval(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class SelectionInitIntervalMapping(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, **kwds):
        super().__init__(**kwds)


class SelectionInitMapping(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, **kwds):
        super().__init__(**kwds)


class SelectionParameter(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        name: Optional[str | SchemaBase] = Undefined,
        select: Optional[SchemaBase | Map | SelectionType_T] = Undefined,
        bind: Optional[SchemaBase | Literal["legend", "scales"] | Map] = Undefined,
        value: Optional[
            Temporal | SchemaBase | Sequence[SchemaBase | Map] | Map | PrimitiveValue_T
        ] = Undefined,
        **kwds,
    ):
        super().__init__(name=name, select=select, bind=bind, value=value, **kwds)


class SelectionResolution(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class SelectionType(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class SequenceGenerator(Generator):
    

    _schema = {"$ref": "

    def __init__(
        self,
        sequence: Optional[SchemaBase | Map] = Undefined,
        name: Optional[str] = Undefined,
        **kwds,
    ):
        super().__init__(sequence=sequence, name=name, **kwds)


class SequenceParams(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        start: Optional[float] = Undefined,
        stop: Optional[float] = Undefined,
        step: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(start=start, stop=stop, step=step, **kwds)


class SequentialMultiHue(ColorScheme):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class SequentialSingleHue(ColorScheme):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class ShapeDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class FieldOrDatumDefWithConditionDatumDefstringnull(
    MarkPropDefstringnullTypeForShape, ShapeDef
):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        bandPosition: Optional[float] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        datum: Optional[
            Temporal | Parameter | SchemaBase | Map | PrimitiveValue_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | Type_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            bandPosition=bandPosition,
            condition=condition,
            datum=datum,
            title=title,
            type=type,
            **kwds,
        )


class FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull(
    MarkPropDefstringnullTypeForShape, ShapeDef
):
    r

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Map | None] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        legend: Optional[SchemaBase | Map | None] = Undefined,
        scale: Optional[SchemaBase | Map | None] = Undefined,
        sort: Optional[
            SchemaBase
            | Sequence[str]
            | Sequence[bool]
            | Sequence[float]
            | Sequence[Temporal | SchemaBase | Map]
            | Map
            | AllSortString_T
            | None
        ] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | TypeForShape_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            legend=legend,
            scale=scale,
            sort=sort,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class SharedEncoding(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        angle: Optional[Map] = Undefined,
        color: Optional[Map] = Undefined,
        description: Optional[Map] = Undefined,
        detail: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        fill: Optional[Map] = Undefined,
        fillOpacity: Optional[Map] = Undefined,
        href: Optional[Map] = Undefined,
        key: Optional[Map] = Undefined,
        latitude: Optional[Map] = Undefined,
        latitude2: Optional[Map] = Undefined,
        longitude: Optional[Map] = Undefined,
        longitude2: Optional[Map] = Undefined,
        opacity: Optional[Map] = Undefined,
        order: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        radius: Optional[Map] = Undefined,
        radius2: Optional[Map] = Undefined,
        shape: Optional[Map] = Undefined,
        size: Optional[Map] = Undefined,
        stroke: Optional[Map] = Undefined,
        strokeDash: Optional[Map] = Undefined,
        strokeOpacity: Optional[Map] = Undefined,
        strokeWidth: Optional[Map] = Undefined,
        text: Optional[Map] = Undefined,
        theta: Optional[Map] = Undefined,
        theta2: Optional[Map] = Undefined,
        tooltip: Optional[
            SchemaBase | Sequence[SchemaBase | Map] | Map | None
        ] = Undefined,
        url: Optional[Map] = Undefined,
        x: Optional[Map] = Undefined,
        x2: Optional[Map] = Undefined,
        xError: Optional[Map] = Undefined,
        xError2: Optional[Map] = Undefined,
        xOffset: Optional[Map] = Undefined,
        y: Optional[Map] = Undefined,
        y2: Optional[Map] = Undefined,
        yError: Optional[Map] = Undefined,
        yError2: Optional[Map] = Undefined,
        yOffset: Optional[Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            angle=angle,
            color=color,
            description=description,
            detail=detail,
            fill=fill,
            fillOpacity=fillOpacity,
            href=href,
            key=key,
            latitude=latitude,
            latitude2=latitude2,
            longitude=longitude,
            longitude2=longitude2,
            opacity=opacity,
            order=order,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            stroke=stroke,
            strokeDash=strokeDash,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            text=text,
            theta=theta,
            theta2=theta2,
            tooltip=tooltip,
            url=url,
            x=x,
            x2=x2,
            xError=xError,
            xError2=xError2,
            xOffset=xOffset,
            y=y,
            y2=y2,
            yError=yError,
            yError2=yError2,
            yOffset=yOffset,
            **kwds,
        )


class SingleDefUnitChannel(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Sort(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class AllSortString(Sort):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class EncodingSortField(Sort):
    

    _schema = {"$ref": "

    def __init__(
        self,
        field: Optional[str | SchemaBase | Map] = Undefined,
        op: Optional[SchemaBase | NonArgAggregateOp_T] = Undefined,
        order: Optional[SchemaBase | SortOrder_T | None] = Undefined,
        **kwds,
    ):
        super().__init__(field=field, op=op, order=order, **kwds)


class SortArray(Sort):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class SortByChannel(AllSortString):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class SortByChannelDesc(AllSortString):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class SortByEncoding(Sort):
    

    _schema = {"$ref": "

    def __init__(
        self,
        encoding: Optional[SchemaBase | SortByChannel_T] = Undefined,
        order: Optional[SchemaBase | SortOrder_T | None] = Undefined,
        **kwds,
    ):
        super().__init__(encoding=encoding, order=order, **kwds)


class SortField(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        field: Optional[str | SchemaBase] = Undefined,
        order: Optional[SchemaBase | SortOrder_T | None] = Undefined,
        **kwds,
    ):
        super().__init__(field=field, order=order, **kwds)


class SortOrder(AllSortString):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Spec(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class ConcatSpecGenericSpec(Spec, NonNormalizedSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        concat: Optional[Sequence[SchemaBase | Map]] = Undefined,
        align: Optional[SchemaBase | Map | LayoutAlign_T] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool | SchemaBase | Map] = Undefined,
        columns: Optional[float] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        description: Optional[str] = Undefined,
        name: Optional[str] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        spacing: Optional[float | SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        **kwds,
    ):
        super().__init__(
            concat=concat,
            align=align,
            bounds=bounds,
            center=center,
            columns=columns,
            data=data,
            description=description,
            name=name,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            **kwds,
        )


class FacetSpec(Spec, NonNormalizedSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        facet: Optional[SchemaBase | Map] = Undefined,
        spec: Optional[SchemaBase | Map] = Undefined,
        align: Optional[SchemaBase | Map | LayoutAlign_T] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool | SchemaBase | Map] = Undefined,
        columns: Optional[float] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        description: Optional[str] = Undefined,
        name: Optional[str] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        spacing: Optional[float | SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        **kwds,
    ):
        super().__init__(
            facet=facet,
            spec=spec,
            align=align,
            bounds=bounds,
            center=center,
            columns=columns,
            data=data,
            description=description,
            name=name,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            **kwds,
        )


class FacetedUnitSpec(Spec, NonNormalizedSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        mark: Optional[SchemaBase | Map | Mark_T | CompositeMark_T] = Undefined,
        align: Optional[SchemaBase | Map | LayoutAlign_T] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool | SchemaBase | Map] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        description: Optional[str] = Undefined,
        encoding: Optional[SchemaBase | Map] = Undefined,
        height: Optional[float | SchemaBase | Literal["container"] | Map] = Undefined,
        name: Optional[str] = Undefined,
        params: Optional[Sequence[SchemaBase | Map]] = Undefined,
        projection: Optional[SchemaBase | Map] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        spacing: Optional[float | SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        view: Optional[SchemaBase | Map] = Undefined,
        width: Optional[float | SchemaBase | Literal["container"] | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            mark=mark,
            align=align,
            bounds=bounds,
            center=center,
            data=data,
            description=description,
            encoding=encoding,
            height=height,
            name=name,
            params=params,
            projection=projection,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            view=view,
            width=width,
            **kwds,
        )


class HConcatSpecGenericSpec(Spec, NonNormalizedSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        hconcat: Optional[Sequence[SchemaBase | Map]] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        description: Optional[str] = Undefined,
        name: Optional[str] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        spacing: Optional[float] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        **kwds,
    ):
        super().__init__(
            hconcat=hconcat,
            bounds=bounds,
            center=center,
            data=data,
            description=description,
            name=name,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            **kwds,
        )


class LayerSpec(Spec, NonNormalizedSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        layer: Optional[Sequence[SchemaBase | Map]] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        description: Optional[str] = Undefined,
        encoding: Optional[SchemaBase | Map] = Undefined,
        height: Optional[float | SchemaBase | Literal["container"] | Map] = Undefined,
        name: Optional[str] = Undefined,
        projection: Optional[SchemaBase | Map] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        view: Optional[SchemaBase | Map] = Undefined,
        width: Optional[float | SchemaBase | Literal["container"] | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            layer=layer,
            data=data,
            description=description,
            encoding=encoding,
            height=height,
            name=name,
            projection=projection,
            resolve=resolve,
            title=title,
            transform=transform,
            view=view,
            width=width,
            **kwds,
        )


class RepeatSpec(Spec, NonNormalizedSpec):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class LayerRepeatSpec(RepeatSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        repeat: Optional[SchemaBase | Map] = Undefined,
        spec: Optional[SchemaBase | Map] = Undefined,
        align: Optional[SchemaBase | Map | LayoutAlign_T] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool | SchemaBase | Map] = Undefined,
        columns: Optional[float] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        description: Optional[str] = Undefined,
        name: Optional[str] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        spacing: Optional[float | SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        **kwds,
    ):
        super().__init__(
            repeat=repeat,
            spec=spec,
            align=align,
            bounds=bounds,
            center=center,
            columns=columns,
            data=data,
            description=description,
            name=name,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            **kwds,
        )


class NonLayerRepeatSpec(RepeatSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        repeat: Optional[SchemaBase | Sequence[str] | Map] = Undefined,
        spec: Optional[SchemaBase | Map] = Undefined,
        align: Optional[SchemaBase | Map | LayoutAlign_T] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool | SchemaBase | Map] = Undefined,
        columns: Optional[float] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        description: Optional[str] = Undefined,
        name: Optional[str] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        spacing: Optional[float | SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        **kwds,
    ):
        super().__init__(
            repeat=repeat,
            spec=spec,
            align=align,
            bounds=bounds,
            center=center,
            columns=columns,
            data=data,
            description=description,
            name=name,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            **kwds,
        )


class SphereGenerator(Generator):
    

    _schema = {"$ref": "

    def __init__(
        self,
        sphere: Optional[Literal[True] | Map] = Undefined,
        name: Optional[str] = Undefined,
        **kwds,
    ):
        super().__init__(sphere=sphere, name=name, **kwds)


class StackOffset(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class StandardType(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Step(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, step: Optional[float] = Undefined, **kwds):
        super().__init__(step=step, **kwds)


class StepFor(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Stream(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class DerivedStream(Stream):
    

    _schema = {"$ref": "

    def __init__(
        self,
        stream: Optional[SchemaBase | Map] = Undefined,
        between: Optional[Sequence[SchemaBase | Map]] = Undefined,
        consume: Optional[bool] = Undefined,
        debounce: Optional[float] = Undefined,
        filter: Optional[str | SchemaBase | Sequence[str | SchemaBase]] = Undefined,
        markname: Optional[str] = Undefined,
        marktype: Optional[SchemaBase | MarkType_T] = Undefined,
        throttle: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            stream=stream,
            between=between,
            consume=consume,
            debounce=debounce,
            filter=filter,
            markname=markname,
            marktype=marktype,
            throttle=throttle,
            **kwds,
        )


class EventStream(Stream):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class MergedStream(Stream):
    

    _schema = {"$ref": "

    def __init__(
        self,
        merge: Optional[Sequence[SchemaBase | Map]] = Undefined,
        between: Optional[Sequence[SchemaBase | Map]] = Undefined,
        consume: Optional[bool] = Undefined,
        debounce: Optional[float] = Undefined,
        filter: Optional[str | SchemaBase | Sequence[str | SchemaBase]] = Undefined,
        markname: Optional[str] = Undefined,
        marktype: Optional[SchemaBase | MarkType_T] = Undefined,
        throttle: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            merge=merge,
            between=between,
            consume=consume,
            debounce=debounce,
            filter=filter,
            markname=markname,
            marktype=marktype,
            throttle=throttle,
            **kwds,
        )


class StringFieldDef(VegaLiteSchema):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Literal["binned"] | Map | None] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        format: Optional[str | SchemaBase | Map] = Undefined,
        formatType: Optional[str] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            format=format,
            formatType=formatType,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class StringFieldDefWithCondition(VegaLiteSchema):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Literal["binned"] | Map | None] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        format: Optional[str | SchemaBase | Map] = Undefined,
        formatType: Optional[str] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            format=format,
            formatType=formatType,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class StringValueDefWithCondition(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Map | None] = Undefined,
        **kwds,
    ):
        super().__init__(condition=condition, value=value, **kwds)


class StrokeCap(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class StrokeJoin(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class StyleConfigIndex(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        arc: Optional[SchemaBase | Map] = Undefined,
        area: Optional[SchemaBase | Map] = Undefined,
        bar: Optional[SchemaBase | Map] = Undefined,
        circle: Optional[SchemaBase | Map] = Undefined,
        geoshape: Optional[SchemaBase | Map] = Undefined,
        image: Optional[SchemaBase | Map] = Undefined,
        line: Optional[SchemaBase | Map] = Undefined,
        mark: Optional[SchemaBase | Map] = Undefined,
        point: Optional[SchemaBase | Map] = Undefined,
        rect: Optional[SchemaBase | Map] = Undefined,
        rule: Optional[SchemaBase | Map] = Undefined,
        square: Optional[SchemaBase | Map] = Undefined,
        text: Optional[SchemaBase | Map] = Undefined,
        tick: Optional[SchemaBase | Map] = Undefined,
        trail: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            arc=arc,
            area=area,
            bar=bar,
            circle=circle,
            geoshape=geoshape,
            image=image,
            line=line,
            mark=mark,
            point=point,
            rect=rect,
            rule=rule,
            square=square,
            text=text,
            tick=tick,
            trail=trail,
            **kwds,
        )


class SymbolShape(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Text(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class TextBaseline(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class Baseline(TextBaseline):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class TextDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class FieldOrDatumDefWithConditionStringDatumDefText(TextDef):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        bandPosition: Optional[float] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        datum: Optional[
            Temporal | Parameter | SchemaBase | Map | PrimitiveValue_T
        ] = Undefined,
        format: Optional[str | SchemaBase | Map] = Undefined,
        formatType: Optional[str] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | Type_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            bandPosition=bandPosition,
            condition=condition,
            datum=datum,
            format=format,
            formatType=formatType,
            title=title,
            type=type,
            **kwds,
        )


class FieldOrDatumDefWithConditionStringFieldDefText(TextDef):
    r

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        shorthand: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Literal["binned"] | Map | None] = Undefined,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        format: Optional[str | SchemaBase | Map] = Undefined,
        formatType: Optional[str] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            shorthand=shorthand,
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            condition=condition,
            field=field,
            format=format,
            formatType=formatType,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class TextDirection(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class TickConfig(AnyMarkConfig):
    

    _schema = {"$ref": "

    def __init__(
        self,
        align: Optional[Parameter | SchemaBase | Map | Align_T] = Undefined,
        angle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        ariaRole: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        ariaRoleDescription: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        aspect: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        bandSize: Optional[float] = Undefined,
        baseline: Optional[Parameter | SchemaBase | Map | TextBaseline_T] = Undefined,
        blend: Optional[Parameter | SchemaBase | Map | Blend_T] = Undefined,
        color: Optional[str | Parameter | SchemaBase | Map | ColorName_T] = Undefined,
        cornerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusBottomLeft: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusBottomRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cornerRadiusTopLeft: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cornerRadiusTopRight: Optional[
            float | Parameter | SchemaBase | Map
        ] = Undefined,
        cursor: Optional[Parameter | SchemaBase | Map | Cursor_T] = Undefined,
        description: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        dir: Optional[Parameter | SchemaBase | Map | TextDirection_T] = Undefined,
        dx: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        dy: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        ellipsis: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        endAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fill: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        fillOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        filled: Optional[bool] = Undefined,
        font: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontWeight: Optional[Parameter | SchemaBase | Map | FontWeight_T] = Undefined,
        height: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        href: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        innerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        interpolate: Optional[Parameter | SchemaBase | Map | Interpolate_T] = Undefined,
        invalid: Optional[SchemaBase | MarkInvalidDataMode_T | None] = Undefined,
        limit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        lineBreak: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        lineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        opacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        order: Optional[bool | None] = Undefined,
        orient: Optional[SchemaBase | Orientation_T] = Undefined,
        outerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        padAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        radius2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        shape: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        size: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        smooth: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        startAngle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        stroke: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        strokeCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        strokeDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        strokeDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeJoin: Optional[Parameter | SchemaBase | Map | StrokeJoin_T] = Undefined,
        strokeMiterLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        tension: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        text: Optional[str | Parameter | SchemaBase | Sequence[str] | Map] = Undefined,
        theta: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        theta2: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        thickness: Optional[float] = Undefined,
        timeUnitBandPosition: Optional[float] = Undefined,
        timeUnitBandSize: Optional[float] = Undefined,
        tooltip: Optional[
            str | bool | float | Parameter | SchemaBase | Map | None
        ] = Undefined,
        url: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        width: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        x: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        x2: Optional[
            float | Parameter | SchemaBase | Literal["width"] | Map
        ] = Undefined,
        y: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        y2: Optional[
            float | Parameter | SchemaBase | Literal["height"] | Map
        ] = Undefined,
        **kwds,
    ):
        super().__init__(
            align=align,
            angle=angle,
            aria=aria,
            ariaRole=ariaRole,
            ariaRoleDescription=ariaRoleDescription,
            aspect=aspect,
            bandSize=bandSize,
            baseline=baseline,
            blend=blend,
            color=color,
            cornerRadius=cornerRadius,
            cornerRadiusBottomLeft=cornerRadiusBottomLeft,
            cornerRadiusBottomRight=cornerRadiusBottomRight,
            cornerRadiusTopLeft=cornerRadiusTopLeft,
            cornerRadiusTopRight=cornerRadiusTopRight,
            cursor=cursor,
            description=description,
            dir=dir,
            dx=dx,
            dy=dy,
            ellipsis=ellipsis,
            endAngle=endAngle,
            fill=fill,
            fillOpacity=fillOpacity,
            filled=filled,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            height=height,
            href=href,
            innerRadius=innerRadius,
            interpolate=interpolate,
            invalid=invalid,
            limit=limit,
            lineBreak=lineBreak,
            lineHeight=lineHeight,
            opacity=opacity,
            order=order,
            orient=orient,
            outerRadius=outerRadius,
            padAngle=padAngle,
            radius=radius,
            radius2=radius2,
            shape=shape,
            size=size,
            smooth=smooth,
            startAngle=startAngle,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOffset=strokeOffset,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            tension=tension,
            text=text,
            theta=theta,
            theta2=theta2,
            thickness=thickness,
            timeUnitBandPosition=timeUnitBandPosition,
            timeUnitBandSize=timeUnitBandSize,
            tooltip=tooltip,
            url=url,
            width=width,
            x=x,
            x2=x2,
            y=y,
            y2=y2,
            **kwds,
        )


class TickCount(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class TimeInterval(TickCount):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class TimeIntervalStep(TickCount):
    

    _schema = {"$ref": "

    def __init__(
        self,
        interval: Optional[SchemaBase | TimeInterval_T] = Undefined,
        step: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(interval=interval, step=step, **kwds)


class TimeLocale(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        date: Optional[str] = Undefined,
        dateTime: Optional[str] = Undefined,
        days: Optional[SchemaBase | Sequence[str]] = Undefined,
        months: Optional[SchemaBase | Sequence[str]] = Undefined,
        periods: Optional[SchemaBase | Sequence[str]] = Undefined,
        shortDays: Optional[SchemaBase | Sequence[str]] = Undefined,
        shortMonths: Optional[SchemaBase | Sequence[str]] = Undefined,
        time: Optional[str] = Undefined,
        **kwds,
    ):
        super().__init__(
            date=date,
            dateTime=dateTime,
            days=days,
            months=months,
            periods=periods,
            shortDays=shortDays,
            shortMonths=shortMonths,
            time=time,
            **kwds,
        )


class TimeUnit(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class MultiTimeUnit(TimeUnit):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class LocalMultiTimeUnit(MultiTimeUnit):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class SingleTimeUnit(TimeUnit):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class LocalSingleTimeUnit(SingleTimeUnit):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class TimeUnitParams(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        binned: Optional[bool] = Undefined,
        maxbins: Optional[float] = Undefined,
        step: Optional[float] = Undefined,
        unit: Optional[SchemaBase | MultiTimeUnit_T | SingleTimeUnit_T] = Undefined,
        utc: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(
            binned=binned, maxbins=maxbins, step=step, unit=unit, utc=utc, **kwds
        )


class TimeUnitTransformParams(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        maxbins: Optional[float] = Undefined,
        step: Optional[float] = Undefined,
        unit: Optional[SchemaBase | MultiTimeUnit_T | SingleTimeUnit_T] = Undefined,
        utc: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(maxbins=maxbins, step=step, unit=unit, utc=utc, **kwds)


class TitleAnchor(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class TitleConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        align: Optional[SchemaBase | Align_T] = Undefined,
        anchor: Optional[Parameter | SchemaBase | Map | TitleAnchor_T] = Undefined,
        angle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        baseline: Optional[SchemaBase | TextBaseline_T] = Undefined,
        color: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        dx: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        dy: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        font: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontWeight: Optional[Parameter | SchemaBase | Map | FontWeight_T] = Undefined,
        frame: Optional[str | Parameter | SchemaBase | Map | TitleFrame_T] = Undefined,
        limit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        lineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        orient: Optional[Parameter | SchemaBase | Map | TitleOrient_T] = Undefined,
        subtitleColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        subtitleFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        subtitleFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        subtitleFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        subtitleFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        subtitleLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        subtitlePadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        zindex: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            align=align,
            anchor=anchor,
            angle=angle,
            aria=aria,
            baseline=baseline,
            color=color,
            dx=dx,
            dy=dy,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            frame=frame,
            limit=limit,
            lineHeight=lineHeight,
            offset=offset,
            orient=orient,
            subtitleColor=subtitleColor,
            subtitleFont=subtitleFont,
            subtitleFontSize=subtitleFontSize,
            subtitleFontStyle=subtitleFontStyle,
            subtitleFontWeight=subtitleFontWeight,
            subtitleLineHeight=subtitleLineHeight,
            subtitlePadding=subtitlePadding,
            zindex=zindex,
            **kwds,
        )


class TitleFrame(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class TitleOrient(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class TitleParams(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        text: Optional[str | Parameter | SchemaBase | Sequence[str] | Map] = Undefined,
        align: Optional[SchemaBase | Align_T] = Undefined,
        anchor: Optional[SchemaBase | TitleAnchor_T] = Undefined,
        angle: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        aria: Optional[bool | Parameter | SchemaBase | Map] = Undefined,
        baseline: Optional[SchemaBase | TextBaseline_T] = Undefined,
        color: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        dx: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        dy: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        font: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        fontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        fontWeight: Optional[Parameter | SchemaBase | Map | FontWeight_T] = Undefined,
        frame: Optional[str | Parameter | SchemaBase | Map | TitleFrame_T] = Undefined,
        limit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        lineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        offset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        orient: Optional[Parameter | SchemaBase | Map | TitleOrient_T] = Undefined,
        style: Optional[str | Sequence[str]] = Undefined,
        subtitle: Optional[str | SchemaBase | Sequence[str]] = Undefined,
        subtitleColor: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        subtitleFont: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        subtitleFontSize: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        subtitleFontStyle: Optional[str | Parameter | SchemaBase | Map] = Undefined,
        subtitleFontWeight: Optional[
            Parameter | SchemaBase | Map | FontWeight_T
        ] = Undefined,
        subtitleLineHeight: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        subtitlePadding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        zindex: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            text=text,
            align=align,
            anchor=anchor,
            angle=angle,
            aria=aria,
            baseline=baseline,
            color=color,
            dx=dx,
            dy=dy,
            font=font,
            fontSize=fontSize,
            fontStyle=fontStyle,
            fontWeight=fontWeight,
            frame=frame,
            limit=limit,
            lineHeight=lineHeight,
            offset=offset,
            orient=orient,
            style=style,
            subtitle=subtitle,
            subtitleColor=subtitleColor,
            subtitleFont=subtitleFont,
            subtitleFontSize=subtitleFontSize,
            subtitleFontStyle=subtitleFontStyle,
            subtitleFontWeight=subtitleFontWeight,
            subtitleLineHeight=subtitleLineHeight,
            subtitlePadding=subtitlePadding,
            zindex=zindex,
            **kwds,
        )


class TooltipContent(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self, content: Optional[Literal["encoding", "data"]] = Undefined, **kwds
    ):
        super().__init__(content=content, **kwds)


class TopLevelParameter(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class TopLevelSelectionParameter(TopLevelParameter):
    

    _schema = {"$ref": "

    def __init__(
        self,
        name: Optional[str | SchemaBase] = Undefined,
        select: Optional[SchemaBase | Map | SelectionType_T] = Undefined,
        bind: Optional[SchemaBase | Literal["legend", "scales"] | Map] = Undefined,
        value: Optional[
            Temporal | SchemaBase | Sequence[SchemaBase | Map] | Map | PrimitiveValue_T
        ] = Undefined,
        views: Optional[Sequence[str]] = Undefined,
        **kwds,
    ):
        super().__init__(
            name=name, select=select, bind=bind, value=value, views=views, **kwds
        )


class TopLevelSpec(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class TopLevelConcatSpec(TopLevelSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        concat: Optional[Sequence[SchemaBase | Map]] = Undefined,
        align: Optional[SchemaBase | Map | LayoutAlign_T] = Undefined,
        autosize: Optional[SchemaBase | Map | AutosizeType_T] = Undefined,
        background: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T
        ] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool | SchemaBase | Map] = Undefined,
        columns: Optional[float] = Undefined,
        config: Optional[SchemaBase | Map] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        datasets: Optional[SchemaBase | Map] = Undefined,
        description: Optional[str] = Undefined,
        name: Optional[str] = Undefined,
        padding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        params: Optional[Sequence[SchemaBase | Map]] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        spacing: Optional[float | SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        usermeta: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            concat=concat,
            align=align,
            autosize=autosize,
            background=background,
            bounds=bounds,
            center=center,
            columns=columns,
            config=config,
            data=data,
            datasets=datasets,
            description=description,
            name=name,
            padding=padding,
            params=params,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            usermeta=usermeta,
            **kwds,
        )


class TopLevelFacetSpec(TopLevelSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        data: Optional[SchemaBase | Map | None] = Undefined,
        facet: Optional[SchemaBase | Map] = Undefined,
        spec: Optional[SchemaBase | Map] = Undefined,
        align: Optional[SchemaBase | Map | LayoutAlign_T] = Undefined,
        autosize: Optional[SchemaBase | Map | AutosizeType_T] = Undefined,
        background: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T
        ] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool | SchemaBase | Map] = Undefined,
        columns: Optional[float] = Undefined,
        config: Optional[SchemaBase | Map] = Undefined,
        datasets: Optional[SchemaBase | Map] = Undefined,
        description: Optional[str] = Undefined,
        name: Optional[str] = Undefined,
        padding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        params: Optional[Sequence[SchemaBase | Map]] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        spacing: Optional[float | SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        usermeta: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            data=data,
            facet=facet,
            spec=spec,
            align=align,
            autosize=autosize,
            background=background,
            bounds=bounds,
            center=center,
            columns=columns,
            config=config,
            datasets=datasets,
            description=description,
            name=name,
            padding=padding,
            params=params,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            usermeta=usermeta,
            **kwds,
        )


class TopLevelHConcatSpec(TopLevelSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        hconcat: Optional[Sequence[SchemaBase | Map]] = Undefined,
        autosize: Optional[SchemaBase | Map | AutosizeType_T] = Undefined,
        background: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T
        ] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool] = Undefined,
        config: Optional[SchemaBase | Map] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        datasets: Optional[SchemaBase | Map] = Undefined,
        description: Optional[str] = Undefined,
        name: Optional[str] = Undefined,
        padding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        params: Optional[Sequence[SchemaBase | Map]] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        spacing: Optional[float] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        usermeta: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            hconcat=hconcat,
            autosize=autosize,
            background=background,
            bounds=bounds,
            center=center,
            config=config,
            data=data,
            datasets=datasets,
            description=description,
            name=name,
            padding=padding,
            params=params,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            usermeta=usermeta,
            **kwds,
        )


class TopLevelLayerSpec(TopLevelSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        layer: Optional[Sequence[SchemaBase | Map]] = Undefined,
        autosize: Optional[SchemaBase | Map | AutosizeType_T] = Undefined,
        background: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T
        ] = Undefined,
        config: Optional[SchemaBase | Map] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        datasets: Optional[SchemaBase | Map] = Undefined,
        description: Optional[str] = Undefined,
        encoding: Optional[SchemaBase | Map] = Undefined,
        height: Optional[float | SchemaBase | Literal["container"] | Map] = Undefined,
        name: Optional[str] = Undefined,
        padding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        params: Optional[Sequence[SchemaBase | Map]] = Undefined,
        projection: Optional[SchemaBase | Map] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        usermeta: Optional[SchemaBase | Map] = Undefined,
        view: Optional[SchemaBase | Map] = Undefined,
        width: Optional[float | SchemaBase | Literal["container"] | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            layer=layer,
            autosize=autosize,
            background=background,
            config=config,
            data=data,
            datasets=datasets,
            description=description,
            encoding=encoding,
            height=height,
            name=name,
            padding=padding,
            params=params,
            projection=projection,
            resolve=resolve,
            title=title,
            transform=transform,
            usermeta=usermeta,
            view=view,
            width=width,
            **kwds,
        )


class TopLevelRepeatSpec(TopLevelSpec):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class TopLevelUnitSpec(TopLevelSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        data: Optional[SchemaBase | Map | None] = Undefined,
        mark: Optional[SchemaBase | Map | Mark_T | CompositeMark_T] = Undefined,
        align: Optional[SchemaBase | Map | LayoutAlign_T] = Undefined,
        autosize: Optional[SchemaBase | Map | AutosizeType_T] = Undefined,
        background: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T
        ] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool | SchemaBase | Map] = Undefined,
        config: Optional[SchemaBase | Map] = Undefined,
        datasets: Optional[SchemaBase | Map] = Undefined,
        description: Optional[str] = Undefined,
        encoding: Optional[SchemaBase | Map] = Undefined,
        height: Optional[float | SchemaBase | Literal["container"] | Map] = Undefined,
        name: Optional[str] = Undefined,
        padding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        params: Optional[Sequence[SchemaBase | Map]] = Undefined,
        projection: Optional[SchemaBase | Map] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        spacing: Optional[float | SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        usermeta: Optional[SchemaBase | Map] = Undefined,
        view: Optional[SchemaBase | Map] = Undefined,
        width: Optional[float | SchemaBase | Literal["container"] | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            data=data,
            mark=mark,
            align=align,
            autosize=autosize,
            background=background,
            bounds=bounds,
            center=center,
            config=config,
            datasets=datasets,
            description=description,
            encoding=encoding,
            height=height,
            name=name,
            padding=padding,
            params=params,
            projection=projection,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            usermeta=usermeta,
            view=view,
            width=width,
            **kwds,
        )


class TopLevelVConcatSpec(TopLevelSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        vconcat: Optional[Sequence[SchemaBase | Map]] = Undefined,
        autosize: Optional[SchemaBase | Map | AutosizeType_T] = Undefined,
        background: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T
        ] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool] = Undefined,
        config: Optional[SchemaBase | Map] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        datasets: Optional[SchemaBase | Map] = Undefined,
        description: Optional[str] = Undefined,
        name: Optional[str] = Undefined,
        padding: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        params: Optional[Sequence[SchemaBase | Map]] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        spacing: Optional[float] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        usermeta: Optional[SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            vconcat=vconcat,
            autosize=autosize,
            background=background,
            bounds=bounds,
            center=center,
            config=config,
            data=data,
            datasets=datasets,
            description=description,
            name=name,
            padding=padding,
            params=params,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            usermeta=usermeta,
            **kwds,
        )


class TopoDataFormat(DataFormat):
    

    _schema = {"$ref": "

    def __init__(
        self,
        feature: Optional[str] = Undefined,
        mesh: Optional[str] = Undefined,
        parse: Optional[SchemaBase | Map | None] = Undefined,
        type: Optional[Literal["topojson"]] = Undefined,
        **kwds,
    ):
        super().__init__(feature=feature, mesh=mesh, parse=parse, type=type, **kwds)


class Transform(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class AggregateTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        aggregate: Optional[Sequence[SchemaBase | Map]] = Undefined,
        groupby: Optional[Sequence[str | SchemaBase]] = Undefined,
        **kwds,
    ):
        super().__init__(aggregate=aggregate, groupby=groupby, **kwds)


class BinTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        bin: Optional[SchemaBase | Literal[True] | Map] = Undefined,
        field: Optional[str | SchemaBase] = Undefined,
        **kwds,
    ):
        super().__init__(bin=bin, field=field, **kwds)


class CalculateTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(self, calculate: Optional[str] = Undefined, **kwds):
        super().__init__(calculate=calculate, **kwds)


class DensityTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        density: Optional[str | SchemaBase] = Undefined,
        bandwidth: Optional[float] = Undefined,
        counts: Optional[bool] = Undefined,
        cumulative: Optional[bool] = Undefined,
        extent: Optional[Sequence[float]] = Undefined,
        groupby: Optional[Sequence[str | SchemaBase]] = Undefined,
        maxsteps: Optional[float] = Undefined,
        minsteps: Optional[float] = Undefined,
        resolve: Optional[ResolveMode_T] = Undefined,
        steps: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            density=density,
            bandwidth=bandwidth,
            counts=counts,
            cumulative=cumulative,
            extent=extent,
            groupby=groupby,
            maxsteps=maxsteps,
            minsteps=minsteps,
            resolve=resolve,
            steps=steps,
            **kwds,
        )


class ExtentTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        extent: Optional[str | SchemaBase] = Undefined,
        param: Optional[str | SchemaBase] = Undefined,
        **kwds,
    ):
        super().__init__(extent=extent, param=param, **kwds)


class FilterTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(self, filter: Optional[str | SchemaBase | Map] = Undefined, **kwds):
        super().__init__(filter=filter, **kwds)


class FlattenTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self, flatten: Optional[Sequence[str | SchemaBase]] = Undefined, **kwds
    ):
        super().__init__(flatten=flatten, **kwds)


class FoldTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(self, fold: Optional[Sequence[str | SchemaBase]] = Undefined, **kwds):
        super().__init__(fold=fold, **kwds)


class ImputeTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        impute: Optional[str | SchemaBase] = Undefined,
        key: Optional[str | SchemaBase] = Undefined,
        frame: Optional[Sequence[float | None]] = Undefined,
        groupby: Optional[Sequence[str | SchemaBase]] = Undefined,
        keyvals: Optional[SchemaBase | Sequence[Any] | Map] = Undefined,
        method: Optional[SchemaBase | ImputeMethod_T] = Undefined,
        value: Optional[Any] = Undefined,
        **kwds,
    ):
        super().__init__(
            impute=impute,
            key=key,
            frame=frame,
            groupby=groupby,
            keyvals=keyvals,
            method=method,
            value=value,
            **kwds,
        )


class JoinAggregateTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        joinaggregate: Optional[Sequence[SchemaBase | Map]] = Undefined,
        groupby: Optional[Sequence[str | SchemaBase]] = Undefined,
        **kwds,
    ):
        super().__init__(joinaggregate=joinaggregate, groupby=groupby, **kwds)


class LoessTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        loess: Optional[str | SchemaBase] = Undefined,
        on: Optional[str | SchemaBase] = Undefined,
        bandwidth: Optional[float] = Undefined,
        groupby: Optional[Sequence[str | SchemaBase]] = Undefined,
        **kwds,
    ):
        super().__init__(
            loess=loess, on=on, bandwidth=bandwidth, groupby=groupby, **kwds
        )


class LookupTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        lookup: Optional[str] = Undefined,
        default: Optional[Any] = Undefined,
        **kwds,
    ):
        super().__init__(lookup=lookup, default=default, **kwds)


class PivotTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        pivot: Optional[str | SchemaBase] = Undefined,
        value: Optional[str | SchemaBase] = Undefined,
        groupby: Optional[Sequence[str | SchemaBase]] = Undefined,
        limit: Optional[float] = Undefined,
        op: Optional[SchemaBase | AggregateOp_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            pivot=pivot, value=value, groupby=groupby, limit=limit, op=op, **kwds
        )


class QuantileTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        quantile: Optional[str | SchemaBase] = Undefined,
        groupby: Optional[Sequence[str | SchemaBase]] = Undefined,
        probs: Optional[Sequence[float]] = Undefined,
        step: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(
            quantile=quantile, groupby=groupby, probs=probs, step=step, **kwds
        )


class RegressionTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        on: Optional[str | SchemaBase] = Undefined,
        regression: Optional[str | SchemaBase] = Undefined,
        extent: Optional[Sequence[float]] = Undefined,
        groupby: Optional[Sequence[str | SchemaBase]] = Undefined,
        method: Optional[
            Literal["linear", "log", "exp", "pow", "quad", "poly"]
        ] = Undefined,
        order: Optional[float] = Undefined,
        params: Optional[bool] = Undefined,
        **kwds,
    ):
        super().__init__(
            on=on,
            regression=regression,
            extent=extent,
            groupby=groupby,
            method=method,
            order=order,
            params=params,
            **kwds,
        )


class SampleTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(self, sample: Optional[float] = Undefined, **kwds):
        super().__init__(sample=sample, **kwds)


class StackTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        groupby: Optional[Sequence[str | SchemaBase]] = Undefined,
        stack: Optional[str | SchemaBase] = Undefined,
        offset: Optional[StackOffset_T] = Undefined,
        sort: Optional[Sequence[SchemaBase | Map]] = Undefined,
        **kwds,
    ):
        super().__init__(groupby=groupby, stack=stack, offset=offset, sort=sort, **kwds)


class TimeUnitTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        field: Optional[str | SchemaBase] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        **kwds,
    ):
        super().__init__(field=field, timeUnit=timeUnit, **kwds)


class Type(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class TypeForShape(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class TypedFieldDef(VegaLiteSchema):
    r

    _schema = {"$ref": "

    def __init__(
        self,
        aggregate: Optional[SchemaBase | Map | NonArgAggregateOp_T] = Undefined,
        bandPosition: Optional[float] = Undefined,
        bin: Optional[bool | SchemaBase | Literal["binned"] | Map | None] = Undefined,
        field: Optional[str | SchemaBase | Map] = Undefined,
        timeUnit: Optional[
            SchemaBase | Map | MultiTimeUnit_T | BinnedTimeUnit_T | SingleTimeUnit_T
        ] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | None] = Undefined,
        type: Optional[SchemaBase | StandardType_T] = Undefined,
        **kwds,
    ):
        super().__init__(
            aggregate=aggregate,
            bandPosition=bandPosition,
            bin=bin,
            field=field,
            timeUnit=timeUnit,
            title=title,
            type=type,
            **kwds,
        )


class URI(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class UnitSpec(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        mark: Optional[SchemaBase | Map | Mark_T | CompositeMark_T] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        description: Optional[str] = Undefined,
        encoding: Optional[SchemaBase | Map] = Undefined,
        name: Optional[str] = Undefined,
        params: Optional[Sequence[SchemaBase | Map]] = Undefined,
        projection: Optional[SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        **kwds,
    ):
        super().__init__(
            mark=mark,
            data=data,
            description=description,
            encoding=encoding,
            name=name,
            params=params,
            projection=projection,
            title=title,
            transform=transform,
            **kwds,
        )


class UnitSpecWithFrame(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        mark: Optional[SchemaBase | Map | Mark_T | CompositeMark_T] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        description: Optional[str] = Undefined,
        encoding: Optional[SchemaBase | Map] = Undefined,
        height: Optional[float | SchemaBase | Literal["container"] | Map] = Undefined,
        name: Optional[str] = Undefined,
        params: Optional[Sequence[SchemaBase | Map]] = Undefined,
        projection: Optional[SchemaBase | Map] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        view: Optional[SchemaBase | Map] = Undefined,
        width: Optional[float | SchemaBase | Literal["container"] | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            mark=mark,
            data=data,
            description=description,
            encoding=encoding,
            height=height,
            name=name,
            params=params,
            projection=projection,
            title=title,
            transform=transform,
            view=view,
            width=width,
            **kwds,
        )


class UrlData(DataSource):
    

    _schema = {"$ref": "

    def __init__(
        self,
        url: Optional[str] = Undefined,
        format: Optional[SchemaBase | Map] = Undefined,
        name: Optional[str] = Undefined,
        **kwds,
    ):
        super().__init__(url=url, format=format, name=name, **kwds)


class UtcMultiTimeUnit(MultiTimeUnit):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class UtcSingleTimeUnit(SingleTimeUnit):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class VConcatSpecGenericSpec(Spec, NonNormalizedSpec):
    

    _schema = {"$ref": "

    def __init__(
        self,
        vconcat: Optional[Sequence[SchemaBase | Map]] = Undefined,
        bounds: Optional[Literal["full", "flush"]] = Undefined,
        center: Optional[bool] = Undefined,
        data: Optional[SchemaBase | Map | None] = Undefined,
        description: Optional[str] = Undefined,
        name: Optional[str] = Undefined,
        resolve: Optional[SchemaBase | Map] = Undefined,
        spacing: Optional[float] = Undefined,
        title: Optional[str | SchemaBase | Sequence[str] | Map] = Undefined,
        transform: Optional[Sequence[SchemaBase | Map]] = Undefined,
        **kwds,
    ):
        super().__init__(
            vconcat=vconcat,
            bounds=bounds,
            center=center,
            data=data,
            description=description,
            name=name,
            resolve=resolve,
            spacing=spacing,
            title=title,
            transform=transform,
            **kwds,
        )


class ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull(
    ColorDef, MarkPropDefGradientstringnull
):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Map | None] = Undefined,
        **kwds,
    ):
        super().__init__(condition=condition, value=value, **kwds)


class ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull(
    MarkPropDefstringnullTypeForShape, ShapeDef
):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Map | None] = Undefined,
        **kwds,
    ):
        super().__init__(condition=condition, value=value, **kwds)


class ValueDefWithConditionMarkPropFieldOrDatumDefnumber(
    MarkPropDefnumber, NumericMarkPropDef
):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        value: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(condition=condition, value=value, **kwds)


class ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray(
    MarkPropDefnumberArray, NumericArrayMarkPropDef
):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        value: Optional[Parameter | SchemaBase | Sequence[float] | Map] = Undefined,
        **kwds,
    ):
        super().__init__(condition=condition, value=value, **kwds)


class ValueDefWithConditionMarkPropFieldOrDatumDefstringnull(VegaLiteSchema):
    

    _schema = {
        "$ref": "
    }

    def __init__(
        self,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Map | None] = Undefined,
        **kwds,
    ):
        super().__init__(condition=condition, value=value, **kwds)


class ValueDefWithConditionStringFieldDefText(TextDef):
    

    _schema = {"$ref": "

    def __init__(
        self,
        condition: Optional[SchemaBase | Sequence[SchemaBase | Map] | Map] = Undefined,
        value: Optional[str | Parameter | SchemaBase | Sequence[str] | Map] = Undefined,
        **kwds,
    ):
        super().__init__(condition=condition, value=value, **kwds)


class ValueDefnumber(OffsetDef):
    

    _schema = {"$ref": "

    def __init__(self, value: Optional[float] = Undefined, **kwds):
        super().__init__(value=value, **kwds)


class ValueDefnumberwidthheightExprRef(VegaLiteSchema):
    

    _schema = {"$ref": '

    def __init__(
        self,
        value: Optional[
            float | Parameter | SchemaBase | Literal["height", "width"] | Map
        ] = Undefined,
        **kwds,
    ):
        super().__init__(value=value, **kwds)


class VariableParameter(TopLevelParameter):
    

    _schema = {"$ref": "

    def __init__(
        self,
        name: Optional[str | SchemaBase] = Undefined,
        bind: Optional[SchemaBase | Map] = Undefined,
        expr: Optional[str | SchemaBase] = Undefined,
        react: Optional[bool] = Undefined,
        value: Optional[Any] = Undefined,
        **kwds,
    ):
        super().__init__(
            name=name, bind=bind, expr=expr, react=react, value=value, **kwds
        )


class Vector10string(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Vector12string(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Vector2DateTime(SelectionInitInterval):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Vector2Vector2number(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Vector2boolean(SelectionInitInterval):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Vector2number(SelectionInitInterval):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Vector2string(SelectionInitInterval):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Vector3number(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class Vector7string(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class ViewBackground(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        cornerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cursor: Optional[SchemaBase | Cursor_T] = Undefined,
        fill: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        fillOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        opacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        stroke: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        strokeCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        strokeDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        strokeDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeJoin: Optional[Parameter | SchemaBase | Map | StrokeJoin_T] = Undefined,
        strokeMiterLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        style: Optional[str | Sequence[str]] = Undefined,
        **kwds,
    ):
        super().__init__(
            cornerRadius=cornerRadius,
            cursor=cursor,
            fill=fill,
            fillOpacity=fillOpacity,
            opacity=opacity,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            style=style,
            **kwds,
        )


class ViewConfig(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        clip: Optional[bool] = Undefined,
        continuousHeight: Optional[float] = Undefined,
        continuousWidth: Optional[float] = Undefined,
        cornerRadius: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        cursor: Optional[SchemaBase | Cursor_T] = Undefined,
        discreteHeight: Optional[float | Map] = Undefined,
        discreteWidth: Optional[float | Map] = Undefined,
        fill: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        fillOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        opacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        step: Optional[float] = Undefined,
        stroke: Optional[
            str | Parameter | SchemaBase | Map | ColorName_T | None
        ] = Undefined,
        strokeCap: Optional[Parameter | SchemaBase | Map | StrokeCap_T] = Undefined,
        strokeDash: Optional[
            Parameter | SchemaBase | Sequence[float] | Map
        ] = Undefined,
        strokeDashOffset: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeJoin: Optional[Parameter | SchemaBase | Map | StrokeJoin_T] = Undefined,
        strokeMiterLimit: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeOpacity: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        strokeWidth: Optional[float | Parameter | SchemaBase | Map] = Undefined,
        **kwds,
    ):
        super().__init__(
            clip=clip,
            continuousHeight=continuousHeight,
            continuousWidth=continuousWidth,
            cornerRadius=cornerRadius,
            cursor=cursor,
            discreteHeight=discreteHeight,
            discreteWidth=discreteWidth,
            fill=fill,
            fillOpacity=fillOpacity,
            opacity=opacity,
            step=step,
            stroke=stroke,
            strokeCap=strokeCap,
            strokeDash=strokeDash,
            strokeDashOffset=strokeDashOffset,
            strokeJoin=strokeJoin,
            strokeMiterLimit=strokeMiterLimit,
            strokeOpacity=strokeOpacity,
            strokeWidth=strokeWidth,
            **kwds,
        )


class WindowEventType(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)


class EventType(WindowEventType):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class WindowFieldDef(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(
        self,
        op: Optional[SchemaBase | AggregateOp_T | WindowOnlyOp_T] = Undefined,
        field: Optional[str | SchemaBase] = Undefined,
        param: Optional[float] = Undefined,
        **kwds,
    ):
        super().__init__(op=op, field=field, param=param, **kwds)


class WindowOnlyOp(VegaLiteSchema):
    

    _schema = {"$ref": "

    def __init__(self, *args):
        super().__init__(*args)


class WindowTransform(Transform):
    

    _schema = {"$ref": "

    def __init__(
        self,
        window: Optional[Sequence[SchemaBase | Map]] = Undefined,
        frame: Optional[Sequence[float | None]] = Undefined,
        groupby: Optional[Sequence[str | SchemaBase]] = Undefined,
        ignorePeers: Optional[bool] = Undefined,
        sort: Optional[Sequence[SchemaBase | Map]] = Undefined,
        **kwds,
    ):
        super().__init__(
            window=window,
            frame=frame,
            groupby=groupby,
            ignorePeers=ignorePeers,
            sort=sort,
            **kwds,
        )
