




from __future__ import annotations

import sys
from typing import TYPE_CHECKING, Any

from altair.expr.core import ConstExpression, FunctionExpression
from altair.vegalite.v5.schema.core import ExprRef as _ExprRef

if sys.version_info >= (3, 12):
    from typing import override
else:
    from typing_extensions import override

if TYPE_CHECKING:
    from altair.expr.core import Expression, IntoExpression


class _ExprMeta(type):
    

    @property
    def NaN(cls) -> Expression:
        
        return ConstExpression("NaN")

    @property
    def LN10(cls) -> Expression:
        
        return ConstExpression("LN10")

    @property
    def E(cls) -> Expression:
        
        return ConstExpression("E")

    @property
    def LOG10E(cls) -> Expression:
        
        return ConstExpression("LOG10E")

    @property
    def LOG2E(cls) -> Expression:
        
        return ConstExpression("LOG2E")

    @property
    def SQRT1_2(cls) -> Expression:
        
        return ConstExpression("SQRT1_2")

    @property
    def LN2(cls) -> Expression:
        
        return ConstExpression("LN2")

    @property
    def SQRT2(cls) -> Expression:
        
        return ConstExpression("SQRT2")

    @property
    def PI(cls) -> Expression:
        
        return ConstExpression("PI")


class expr(_ExprRef, metaclass=_ExprMeta):
    

    @override
    def __new__(cls: type[_ExprRef], expr: str) -> _ExprRef:  
        return _ExprRef(expr=expr)

    @classmethod
    def isArray(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("isArray", (value,))

    @classmethod
    def isBoolean(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("isBoolean", (value,))

    @classmethod
    def isDate(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("isDate", (value,))

    @classmethod
    def isDefined(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("isDefined", (value,))

    @classmethod
    def isNumber(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("isNumber", (value,))

    @classmethod
    def isObject(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("isObject", (value,))

    @classmethod
    def isRegExp(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("isRegExp", (value,))

    @classmethod
    def isString(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("isString", (value,))

    @classmethod
    def isValid(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("isValid", (value,))

    @classmethod
    def toBoolean(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("toBoolean", (value,))

    @classmethod
    def toDate(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("toDate", (value,))

    @classmethod
    def toNumber(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("toNumber", (value,))

    @classmethod
    def toString(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("toString", (value,))

    @classmethod
    def if_(
        cls,
        test: IntoExpression,
        thenValue: IntoExpression,
        elseValue: IntoExpression,
        /,
    ) -> Expression:
        
        return FunctionExpression("if", (test, thenValue, elseValue))

    @classmethod
    def isNaN(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("isNaN", (value,))

    @classmethod
    def isFinite(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("isFinite", (value,))

    @classmethod
    def abs(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("abs", (value,))

    @classmethod
    def acos(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("acos", (value,))

    @classmethod
    def asin(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("asin", (value,))

    @classmethod
    def atan(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("atan", (value,))

    @classmethod
    def atan2(cls, dy: IntoExpression, dx: IntoExpression, /) -> Expression:
        
        return FunctionExpression("atan2", (dy, dx))

    @classmethod
    def ceil(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("ceil", (value,))

    @classmethod
    def clamp(
        cls, value: IntoExpression, min: IntoExpression, max: IntoExpression, /
    ) -> Expression:
        
        return FunctionExpression("clamp", (value, min, max))

    @classmethod
    def cos(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("cos", (value,))

    @classmethod
    def exp(cls, exponent: IntoExpression, /) -> Expression:
        
        return FunctionExpression("exp", (exponent,))

    @classmethod
    def floor(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("floor", (value,))

    @classmethod
    def hypot(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("hypot", (value,))

    @classmethod
    def log(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("log", (value,))

    @classmethod
    def max(
        cls, value1: IntoExpression, value2: IntoExpression, *args: Any
    ) -> Expression:
        
        return FunctionExpression("max", (value1, value2, *args))

    @classmethod
    def min(
        cls, value1: IntoExpression, value2: IntoExpression, *args: Any
    ) -> Expression:
        
        return FunctionExpression("min", (value1, value2, *args))

    @classmethod
    def pow(cls, value: IntoExpression, exponent: IntoExpression, /) -> Expression:
        
        return FunctionExpression("pow", (value, exponent))

    @classmethod
    def random(cls) -> Expression:
        
        return FunctionExpression("random", ())

    @classmethod
    def round(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("round", (value,))

    @classmethod
    def sin(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("sin", (value,))

    @classmethod
    def sqrt(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("sqrt", (value,))

    @classmethod
    def tan(cls, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("tan", (value,))

    @classmethod
    def sampleNormal(
        cls, mean: IntoExpression = None, stdev: IntoExpression = None, /
    ) -> Expression:
        
        return FunctionExpression("sampleNormal", (mean, stdev))

    @classmethod
    def cumulativeNormal(
        cls,
        value: IntoExpression,
        mean: IntoExpression = None,
        stdev: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("cumulativeNormal", (value, mean, stdev))

    @classmethod
    def densityNormal(
        cls,
        value: IntoExpression,
        mean: IntoExpression = None,
        stdev: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("densityNormal", (value, mean, stdev))

    @classmethod
    def quantileNormal(
        cls,
        probability: IntoExpression,
        mean: IntoExpression = None,
        stdev: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("quantileNormal", (probability, mean, stdev))

    @classmethod
    def sampleLogNormal(
        cls, mean: IntoExpression = None, stdev: IntoExpression = None, /
    ) -> Expression:
        
        return FunctionExpression("sampleLogNormal", (mean, stdev))

    @classmethod
    def cumulativeLogNormal(
        cls,
        value: IntoExpression,
        mean: IntoExpression = None,
        stdev: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("cumulativeLogNormal", (value, mean, stdev))

    @classmethod
    def densityLogNormal(
        cls,
        value: IntoExpression,
        mean: IntoExpression = None,
        stdev: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("densityLogNormal", (value, mean, stdev))

    @classmethod
    def quantileLogNormal(
        cls,
        probability: IntoExpression,
        mean: IntoExpression = None,
        stdev: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("quantileLogNormal", (probability, mean, stdev))

    @classmethod
    def sampleUniform(
        cls, min: IntoExpression = None, max: IntoExpression = None, /
    ) -> Expression:
        
        return FunctionExpression("sampleUniform", (min, max))

    @classmethod
    def cumulativeUniform(
        cls,
        value: IntoExpression,
        min: IntoExpression = None,
        max: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("cumulativeUniform", (value, min, max))

    @classmethod
    def densityUniform(
        cls,
        value: IntoExpression,
        min: IntoExpression = None,
        max: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("densityUniform", (value, min, max))

    @classmethod
    def quantileUniform(
        cls,
        probability: IntoExpression,
        min: IntoExpression = None,
        max: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("quantileUniform", (probability, min, max))

    @classmethod
    def now(cls) -> Expression:
        
        return FunctionExpression("now", ())

    @classmethod
    def datetime(
        cls,
        year: IntoExpression,
        month: IntoExpression,
        day: IntoExpression = None,
        hour: IntoExpression = None,
        min: IntoExpression = None,
        sec: IntoExpression = None,
        millisec: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression(
            "datetime", (year, month, day, hour, min, sec, millisec)
        )

    @classmethod
    def date(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("date", (datetime,))

    @classmethod
    def day(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("day", (datetime,))

    @classmethod
    def dayofyear(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("dayofyear", (datetime,))

    @classmethod
    def year(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("year", (datetime,))

    @classmethod
    def quarter(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("quarter", (datetime,))

    @classmethod
    def month(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("month", (datetime,))

    @classmethod
    def week(cls, date: IntoExpression, /) -> Expression:
        
        return FunctionExpression("week", (date,))

    @classmethod
    def hours(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("hours", (datetime,))

    @classmethod
    def minutes(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("minutes", (datetime,))

    @classmethod
    def seconds(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("seconds", (datetime,))

    @classmethod
    def milliseconds(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("milliseconds", (datetime,))

    @classmethod
    def time(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("time", (datetime,))

    @classmethod
    def timezoneoffset(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("timezoneoffset", (datetime,))

    @classmethod
    def timeOffset(
        cls, unit: IntoExpression, date: IntoExpression, step: IntoExpression = None, /
    ) -> Expression:
        
        return FunctionExpression("timeOffset", (unit, date, step))

    @classmethod
    def timeSequence(
        cls,
        unit: IntoExpression,
        start: IntoExpression,
        stop: IntoExpression,
        step: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("timeSequence", (unit, start, stop, step))

    @classmethod
    def utc(
        cls,
        year: IntoExpression,
        month: IntoExpression,
        day: IntoExpression = None,
        hour: IntoExpression = None,
        min: IntoExpression = None,
        sec: IntoExpression = None,
        millisec: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("utc", (year, month, day, hour, min, sec, millisec))

    @classmethod
    def utcdate(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("utcdate", (datetime,))

    @classmethod
    def utcday(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("utcday", (datetime,))

    @classmethod
    def utcdayofyear(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("utcdayofyear", (datetime,))

    @classmethod
    def utcyear(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("utcyear", (datetime,))

    @classmethod
    def utcquarter(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("utcquarter", (datetime,))

    @classmethod
    def utcmonth(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("utcmonth", (datetime,))

    @classmethod
    def utcweek(cls, date: IntoExpression, /) -> Expression:
        
        return FunctionExpression("utcweek", (date,))

    @classmethod
    def utchours(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("utchours", (datetime,))

    @classmethod
    def utcminutes(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("utcminutes", (datetime,))

    @classmethod
    def utcseconds(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("utcseconds", (datetime,))

    @classmethod
    def utcmilliseconds(cls, datetime: IntoExpression, /) -> Expression:
        
        return FunctionExpression("utcmilliseconds", (datetime,))

    @classmethod
    def utcOffset(
        cls, unit: IntoExpression, date: IntoExpression, step: IntoExpression = None, /
    ) -> Expression:
        
        return FunctionExpression("utcOffset", (unit, date, step))

    @classmethod
    def utcSequence(
        cls,
        unit: IntoExpression,
        start: IntoExpression,
        stop: IntoExpression,
        step: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("utcSequence", (unit, start, stop, step))

    @classmethod
    def extent(cls, array: IntoExpression, /) -> Expression:
        
        return FunctionExpression("extent", (array,))

    @classmethod
    def clampRange(
        cls, range: IntoExpression, min: IntoExpression, max: IntoExpression, /
    ) -> Expression:
        
        return FunctionExpression("clampRange", (range, min, max))

    @classmethod
    def indexof(cls, array: IntoExpression, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("indexof", (array, value))

    @classmethod
    def inrange(cls, value: IntoExpression, range: IntoExpression, /) -> Expression:
        
        return FunctionExpression("inrange", (value, range))

    @classmethod
    def join(
        cls, array: IntoExpression, separator: IntoExpression = None, /
    ) -> Expression:
        
        return FunctionExpression("join", (array, separator))

    @classmethod
    def lastindexof(cls, array: IntoExpression, value: IntoExpression, /) -> Expression:
        
        return FunctionExpression("lastindexof", (array, value))

    @classmethod
    def length(cls, array: IntoExpression, /) -> Expression:
        
        return FunctionExpression("length", (array,))

    @classmethod
    def lerp(cls, array: IntoExpression, fraction: IntoExpression, /) -> Expression:
        
        return FunctionExpression("lerp", (array, fraction))

    @classmethod
    def peek(cls, array: IntoExpression, /) -> Expression:
        
        return FunctionExpression("peek", (array,))

    @classmethod
    def pluck(cls, array: IntoExpression, field: IntoExpression, /) -> Expression:
        
        return FunctionExpression("pluck", (array, field))

    @classmethod
    def reverse(cls, array: IntoExpression, /) -> Expression:
        
        return FunctionExpression("reverse", (array,))

    @classmethod
    def sequence(cls, *args: Any) -> Expression:
        
        return FunctionExpression("sequence", args)

    @classmethod
    def slice(
        cls, array: IntoExpression, start: IntoExpression, end: IntoExpression = None, /
    ) -> Expression:
        
        return FunctionExpression("slice", (array, start, end))

    @classmethod
    def span(cls, array: IntoExpression, /) -> Expression:
        
        return FunctionExpression("span", (array,))

    @classmethod
    def lower(cls, string: IntoExpression, /) -> Expression:
        
        return FunctionExpression("lower", (string,))

    @classmethod
    def pad(
        cls,
        string: IntoExpression,
        length: IntoExpression,
        character: IntoExpression = None,
        align: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("pad", (string, length, character, align))

    @classmethod
    def parseFloat(cls, string: IntoExpression, /) -> Expression:
        
        return FunctionExpression("parseFloat", (string,))

    @classmethod
    def parseInt(cls, string: IntoExpression, /) -> Expression:
        
        return FunctionExpression("parseInt", (string,))

    @classmethod
    def replace(
        cls,
        string: IntoExpression,
        pattern: IntoExpression,
        replacement: IntoExpression,
        /,
    ) -> Expression:
        
        return FunctionExpression("replace", (string, pattern, replacement))

    @classmethod
    def substring(
        cls,
        string: IntoExpression,
        start: IntoExpression,
        end: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("substring", (string, start, end))

    @classmethod
    def trim(cls, string: IntoExpression, /) -> Expression:
        
        return FunctionExpression("trim", (string,))

    @classmethod
    def truncate(
        cls,
        string: IntoExpression,
        length: IntoExpression,
        align: IntoExpression = None,
        ellipsis: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("truncate", (string, length, align, ellipsis))

    @classmethod
    def upper(cls, string: IntoExpression, /) -> Expression:
        
        return FunctionExpression("upper", (string,))

    @classmethod
    def merge(
        cls, object1: IntoExpression, object2: IntoExpression = None, *args: Any
    ) -> Expression:
        
        return FunctionExpression("merge", (object1, object2, *args))

    @classmethod
    def dayFormat(cls, day: IntoExpression, /) -> Expression:
        
        return FunctionExpression("dayFormat", (day,))

    @classmethod
    def dayAbbrevFormat(cls, day: IntoExpression, /) -> Expression:
        
        return FunctionExpression("dayAbbrevFormat", (day,))

    @classmethod
    def format(cls, value: IntoExpression, specifier: IntoExpression, /) -> Expression:
        
        return FunctionExpression("format", (value, specifier))

    @classmethod
    def monthFormat(cls, month: IntoExpression, /) -> Expression:
        
        return FunctionExpression("monthFormat", (month,))

    @classmethod
    def monthAbbrevFormat(cls, month: IntoExpression, /) -> Expression:
        
        return FunctionExpression("monthAbbrevFormat", (month,))

    @classmethod
    def timeUnitSpecifier(
        cls, units: IntoExpression, specifiers: IntoExpression = None, /
    ) -> Expression:
        
        return FunctionExpression("timeUnitSpecifier", (units, specifiers))

    @classmethod
    def timeFormat(
        cls, value: IntoExpression, specifier: IntoExpression, /
    ) -> Expression:
        
        return FunctionExpression("timeFormat", (value, specifier))

    @classmethod
    def timeParse(
        cls, string: IntoExpression, specifier: IntoExpression, /
    ) -> Expression:
        
        return FunctionExpression("timeParse", (string, specifier))

    @classmethod
    def utcFormat(
        cls, value: IntoExpression, specifier: IntoExpression, /
    ) -> Expression:
        
        return FunctionExpression("utcFormat", (value, specifier))

    @classmethod
    def utcParse(
        cls, value: IntoExpression, specifier: IntoExpression, /
    ) -> Expression:
        
        return FunctionExpression("utcParse", (value, specifier))

    @classmethod
    def regexp(
        cls, pattern: IntoExpression, flags: IntoExpression = None, /
    ) -> Expression:
        
        return FunctionExpression("regexp", (pattern, flags))

    @classmethod
    def test(
        cls, regexp: IntoExpression, string: IntoExpression = None, /
    ) -> Expression:
        r
        return FunctionExpression("test", (regexp, string))

    @classmethod
    def rgb(cls, *args: Any) -> Expression:
        
        return FunctionExpression("rgb", args)

    @classmethod
    def hsl(cls, *args: Any) -> Expression:
        
        return FunctionExpression("hsl", args)

    @classmethod
    def lab(cls, *args: Any) -> Expression:
        
        return FunctionExpression("lab", args)

    @classmethod
    def hcl(cls, *args: Any) -> Expression:
        
        return FunctionExpression("hcl", args)

    @classmethod
    def luminance(cls, specifier: IntoExpression, /) -> Expression:
        
        return FunctionExpression("luminance", (specifier,))

    @classmethod
    def contrast(
        cls, specifier1: IntoExpression, specifier2: IntoExpression, /
    ) -> Expression:
        
        return FunctionExpression("contrast", (specifier1, specifier2))

    @classmethod
    def item(cls) -> Expression:
        
        return FunctionExpression("item", ())

    @classmethod
    def group(cls, name: IntoExpression = None, /) -> Expression:
        
        return FunctionExpression("group", (name,))

    @classmethod
    def xy(cls, item: IntoExpression = None, /) -> Expression:
        
        return FunctionExpression("xy", (item,))

    @classmethod
    def x(cls, item: IntoExpression = None, /) -> Expression:
        
        return FunctionExpression("x", (item,))

    @classmethod
    def y(cls, item: IntoExpression = None, /) -> Expression:
        
        return FunctionExpression("y", (item,))

    @classmethod
    def pinchDistance(cls, event: IntoExpression, /) -> Expression:
        
        return FunctionExpression("pinchDistance", (event,))

    @classmethod
    def pinchAngle(cls, event: IntoExpression, /) -> Expression:
        
        return FunctionExpression("pinchAngle", (event,))

    @classmethod
    def inScope(cls, item: IntoExpression, /) -> Expression:
        
        return FunctionExpression("inScope", (item,))

    @classmethod
    def data(cls, name: IntoExpression, /) -> Expression:
        
        return FunctionExpression("data", (name,))

    @classmethod
    def indata(
        cls, name: IntoExpression, field: IntoExpression, value: IntoExpression, /
    ) -> Expression:
        
        return FunctionExpression("indata", (name, field, value))

    @classmethod
    def scale(
        cls,
        name: IntoExpression,
        value: IntoExpression,
        group: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("scale", (name, value, group))

    @classmethod
    def invert(
        cls,
        name: IntoExpression,
        value: IntoExpression,
        group: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("invert", (name, value, group))

    @classmethod
    def copy(cls, name: IntoExpression, group: IntoExpression = None, /) -> Expression:  
        
        return FunctionExpression("copy", (name, group))

    @classmethod
    def domain(
        cls, name: IntoExpression, group: IntoExpression = None, /
    ) -> Expression:
        
        return FunctionExpression("domain", (name, group))

    @classmethod
    def range(cls, name: IntoExpression, group: IntoExpression = None, /) -> Expression:
        
        return FunctionExpression("range", (name, group))

    @classmethod
    def bandwidth(
        cls, name: IntoExpression, group: IntoExpression = None, /
    ) -> Expression:
        
        return FunctionExpression("bandwidth", (name, group))

    @classmethod
    def bandspace(
        cls,
        count: IntoExpression,
        paddingInner: IntoExpression = None,
        paddingOuter: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("bandspace", (count, paddingInner, paddingOuter))

    @classmethod
    def gradient(
        cls,
        scale: IntoExpression,
        p0: IntoExpression,
        p1: IntoExpression,
        count: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("gradient", (scale, p0, p1, count))

    @classmethod
    def panLinear(cls, domain: IntoExpression, delta: IntoExpression, /) -> Expression:
        
        return FunctionExpression("panLinear", (domain, delta))

    @classmethod
    def panLog(cls, domain: IntoExpression, delta: IntoExpression, /) -> Expression:
        
        return FunctionExpression("panLog", (domain, delta))

    @classmethod
    def panPow(
        cls, domain: IntoExpression, delta: IntoExpression, exponent: IntoExpression, /
    ) -> Expression:
        
        return FunctionExpression("panPow", (domain, delta, exponent))

    @classmethod
    def panSymlog(
        cls, domain: IntoExpression, delta: IntoExpression, constant: IntoExpression, /
    ) -> Expression:
        
        return FunctionExpression("panSymlog", (domain, delta, constant))

    @classmethod
    def zoomLinear(
        cls,
        domain: IntoExpression,
        anchor: IntoExpression,
        scaleFactor: IntoExpression,
        /,
    ) -> Expression:
        
        return FunctionExpression("zoomLinear", (domain, anchor, scaleFactor))

    @classmethod
    def zoomLog(
        cls,
        domain: IntoExpression,
        anchor: IntoExpression,
        scaleFactor: IntoExpression,
        /,
    ) -> Expression:
        
        return FunctionExpression("zoomLog", (domain, anchor, scaleFactor))

    @classmethod
    def zoomPow(
        cls,
        domain: IntoExpression,
        anchor: IntoExpression,
        scaleFactor: IntoExpression,
        exponent: IntoExpression,
        /,
    ) -> Expression:
        
        return FunctionExpression("zoomPow", (domain, anchor, scaleFactor, exponent))

    @classmethod
    def zoomSymlog(
        cls,
        domain: IntoExpression,
        anchor: IntoExpression,
        scaleFactor: IntoExpression,
        constant: IntoExpression,
        /,
    ) -> Expression:
        
        return FunctionExpression("zoomSymlog", (domain, anchor, scaleFactor, constant))

    @classmethod
    def geoArea(
        cls,
        projection: IntoExpression,
        feature: IntoExpression,
        group: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("geoArea", (projection, feature, group))

    @classmethod
    def geoBounds(
        cls,
        projection: IntoExpression,
        feature: IntoExpression,
        group: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("geoBounds", (projection, feature, group))

    @classmethod
    def geoCentroid(
        cls,
        projection: IntoExpression,
        feature: IntoExpression,
        group: IntoExpression = None,
        /,
    ) -> Expression:
        
        return FunctionExpression("geoCentroid", (projection, feature, group))

    @classmethod
    def geoScale(
        cls, projection: IntoExpression, group: IntoExpression = None, /
    ) -> Expression:
        
        return FunctionExpression("geoScale", (projection, group))

    @classmethod
    def treePath(
        cls, name: IntoExpression, source: IntoExpression, target: IntoExpression, /
    ) -> Expression:
        
        return FunctionExpression("treePath", (name, source, target))

    @classmethod
    def treeAncestors(cls, name: IntoExpression, node: IntoExpression, /) -> Expression:
        
        return FunctionExpression("treeAncestors", (name, node))

    @classmethod
    def containerSize(cls) -> Expression:
        
        return FunctionExpression("containerSize", ())

    @classmethod
    def screen(cls) -> Expression:
        
        return FunctionExpression("screen", ())

    @classmethod
    def windowSize(cls) -> Expression:
        
        return FunctionExpression("windowSize", ())

    @classmethod
    def warn(
        cls, value1: IntoExpression, value2: IntoExpression = None, *args: Any
    ) -> Expression:
        
        return FunctionExpression("warn", (value1, value2, *args))

    @classmethod
    def info(
        cls, value1: IntoExpression, value2: IntoExpression = None, *args: Any
    ) -> Expression:
        
        return FunctionExpression("info", (value1, value2, *args))

    @classmethod
    def debug(
        cls, value1: IntoExpression, value2: IntoExpression = None, *args: Any
    ) -> Expression:
        
        return FunctionExpression("debug", (value1, value2, *args))


_ExprType = expr


