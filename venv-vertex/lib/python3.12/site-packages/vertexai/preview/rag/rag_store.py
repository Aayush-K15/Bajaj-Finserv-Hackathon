

















import re
from typing import List, Optional, Union
import warnings

from google.cloud import aiplatform_v1beta1
from google.cloud.aiplatform import initializer
from google.cloud.aiplatform_v1beta1.types import tool as gapic_tool_types
from vertexai.preview import generative_models
from vertexai.preview.rag.utils import _gapic_utils
from vertexai.preview.rag.utils import resources


class Retrieval(generative_models.grounding.Retrieval):
    

    def __init__(
        self,
        source: Union["VertexRagStore"],
        disable_attribution: Optional[bool] = False,
    ):
        self._raw_retrieval = gapic_tool_types.Retrieval(
            vertex_rag_store=source._raw_vertex_rag_store,
            disable_attribution=disable_attribution,
        )


class VertexRagStore:
    

    def __init__(
        self,
        rag_resources: Optional[List[resources.RagResource]] = None,
        rag_corpora: Optional[List[str]] = None,
        similarity_top_k: Optional[int] = None,
        vector_distance_threshold: Optional[float] = None,
        rag_retrieval_config: Optional[resources.RagRetrievalConfig] = None,
    ):
        

        if rag_resources:
            if len(rag_resources) > 1:
                raise ValueError("Currently only support 1 RagResource.")
            name = rag_resources[0].rag_corpus
        elif rag_corpora:
            if len(rag_corpora) > 1:
                raise ValueError("Currently only support 1 RagCorpus.")
            warnings.warn(
                "rag_corpora is deprecated. Please use rag_resources instead."
                f" After {resources.DEPRECATION_DATE} using"
                " rag_corpora will raise error",
                DeprecationWarning,
            )
            name = rag_corpora[0]
        else:
            raise ValueError("rag_resources or rag_corpora must be specified.")

        data_client = _gapic_utils.create_rag_data_service_client()
        if data_client.parse_rag_corpus_path(name):
            rag_corpus_name = name
        elif re.match("^{}$".format(_gapic_utils._VALID_RESOURCE_NAME_REGEX), name):
            parent = initializer.global_config.common_location_path()
            rag_corpus_name = parent + "/ragCorpora/" + name
        else:
            raise ValueError(
                f"Invalid RagCorpus name: {rag_corpora}. Proper format should"
                + " be: projects/{{project}}/locations/{{location}}/ragCorpora/{{rag_corpus_id}}"
            )

        
        if similarity_top_k:
            
            warnings.warn(
                "similarity_top_k is deprecated. Please use"
                " rag_retrieval_config.top_k instead."
                f" After {resources.DEPRECATION_DATE} using"
                " similarity_top_k will raise error",
                DeprecationWarning,
            )
        if vector_distance_threshold:
            
            warnings.warn(
                "vector_distance_threshold is deprecated. Please use"
                " rag_retrieval_config.filter.vector_distance_threshold instead."
                f" After {resources.DEPRECATION_DATE} using"
                " vector_distance_threshold will raise error",
                DeprecationWarning,
            )

        
        if not rag_retrieval_config:
            api_retrival_config = aiplatform_v1beta1.RagRetrievalConfig(
                top_k=similarity_top_k,
                filter=aiplatform_v1beta1.RagRetrievalConfig.Filter(
                    vector_distance_threshold=vector_distance_threshold
                ),
            )
        else:
            
            api_retrival_config = aiplatform_v1beta1.RagRetrievalConfig()
            
            if rag_retrieval_config.top_k:
                api_retrival_config.top_k = rag_retrieval_config.top_k
            else:
                api_retrival_config.top_k = similarity_top_k
            
            
            if (
                rag_retrieval_config.filter
                and rag_retrieval_config.filter.vector_distance_threshold
                and rag_retrieval_config.filter.vector_similarity_threshold
            ):
                raise ValueError(
                    "Only one of vector_distance_threshold or"
                    " vector_similarity_threshold can be specified at a time"
                    " in rag_retrieval_config."
                )
            
            if (
                rag_retrieval_config.filter
                and rag_retrieval_config.filter.vector_distance_threshold
            ):
                api_retrival_config.filter.vector_distance_threshold = (
                    rag_retrieval_config.filter.vector_distance_threshold
                )
            else:
                api_retrival_config.filter.vector_distance_threshold = (
                    vector_distance_threshold
                )
            
            if (
                rag_retrieval_config.filter
                and rag_retrieval_config.filter.vector_similarity_threshold
            ):
                api_retrival_config.filter.vector_similarity_threshold = (
                    rag_retrieval_config.filter.vector_similarity_threshold
                )
            
            if (
                rag_retrieval_config.ranking
                and rag_retrieval_config.ranking.rank_service
                and rag_retrieval_config.ranking.rank_service.model_name
                and rag_retrieval_config.ranking.llm_ranker
                and rag_retrieval_config.ranking.llm_ranker.model_name
            ):
                raise ValueError(
                    "Only one of rank_service or llm_ranker can be specified"
                    " at a time in rag_retrieval_config."
                )
            
            if (
                rag_retrieval_config.ranking
                and rag_retrieval_config.ranking.rank_service
            ):
                api_retrival_config.ranking.rank_service.model_name = (
                    rag_retrieval_config.ranking.rank_service.model_name
                )
            
            if rag_retrieval_config.ranking and rag_retrieval_config.ranking.llm_ranker:
                api_retrival_config.ranking.llm_ranker.model_name = (
                    rag_retrieval_config.ranking.llm_ranker.model_name
                )

        if rag_resources:
            gapic_rag_resource = gapic_tool_types.VertexRagStore.RagResource(
                rag_corpus=rag_corpus_name,
                rag_file_ids=rag_resources[0].rag_file_ids,
            )
            self._raw_vertex_rag_store = gapic_tool_types.VertexRagStore(
                rag_resources=[gapic_rag_resource],
                rag_retrieval_config=api_retrival_config,
            )
        else:
            self._raw_vertex_rag_store = gapic_tool_types.VertexRagStore(
                rag_corpora=[rag_corpus_name],
                rag_retrieval_config=api_retrival_config,
            )
