

















import abc
from typing import Any, Callable, Dict, Literal, Optional, Union, List

from google.cloud.aiplatform_v1beta1.types import (
    evaluation_service as gapic_eval_service_types,
)
from vertexai import generative_models
from vertexai.preview.evaluation import constants
from vertexai.preview.evaluation.metrics import (
    custom_output_config as custom_output_config_class,
)
from vertexai.preview.evaluation.metrics import (
    metric_prompt_template as metric_prompt_template_base,
)


_ModelType = Union[generative_models.GenerativeModel, Callable[[str], str]]


class _Metric(abc.ABC):
    

    def __init__(self, metric: str):
        self._metric = metric

    def __str__(self):
        return self.metric_name

    @property
    def metric_name(self) -> str:
        return self._metric


class _ModelBasedMetric(_Metric):
    

    def __init__(
        self,
        *,
        metric: str,
        metric_prompt_template: Union[
            metric_prompt_template_base.PointwiseMetricPromptTemplate,
            metric_prompt_template_base.PairwiseMetricPromptTemplate,
            str,
        ],
        system_instruction: Optional[str] = None,
        autorater_config: Optional[gapic_eval_service_types.AutoraterConfig] = None,
        custom_output_config: Optional[
            custom_output_config_class.CustomOutputConfig
        ] = None,
    ):
        
        super().__init__(metric=metric)
        self.metric_prompt_template = str(metric_prompt_template)
        self.system_instruction = system_instruction
        self.autorater_config = autorater_config
        self.custom_output_config = custom_output_config


class CustomMetric(_Metric):
    

    def __init__(
        self,
        name: str,
        metric_function: Callable[
            [Dict[str, Any]],
            Dict[str, Any],
        ],
    ):
        
        super().__init__(name)
        self.name = name
        self.metric_function = metric_function


class _AutomaticMetric(_Metric):
    

    def __init__(
        self,
        metric: Literal[constants.Metric.ROUGE],
    ):
        
        super().__init__(metric=metric)


class RubricGenerationConfig:
    

    def __init__(
        self,
        prompt_template: str,
        model: Optional[_ModelType] = None,
        parsing_fn: Optional[Callable[[str], List[str]]] = None,
    ):
        
        self.prompt_template = prompt_template
        self.model = model
        self.parsing_fn = parsing_fn
