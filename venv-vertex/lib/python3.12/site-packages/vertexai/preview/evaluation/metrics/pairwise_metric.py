

















from typing import Callable, Optional, Union

from google.cloud.aiplatform_v1beta1.types import (
    evaluation_service as gapic_eval_service_types,
)
from vertexai.preview import generative_models
from vertexai.preview.evaluation.metrics import _base
from vertexai.preview.evaluation.metrics import (
    custom_output_config as custom_output_config_class,
)
from vertexai.preview.evaluation.metrics import (
    metric_prompt_template as metric_prompt_template_base,
)


class PairwiseMetric(_base._ModelBasedMetric):  
    

    def __init__(
        self,
        *,
        metric: str,
        metric_prompt_template: Union[
            metric_prompt_template_base.PairwiseMetricPromptTemplate, str
        ],
        baseline_model: Optional[
            Union[generative_models.GenerativeModel, Callable[[str], str]]
        ] = None,
        system_instruction: Optional[str] = None,
        autorater_config: Optional[gapic_eval_service_types.AutoraterConfig] = None,
        custom_output_config: Optional[
            custom_output_config_class.CustomOutputConfig
        ] = None,
    ):
        
        super().__init__(
            metric_prompt_template=metric_prompt_template,
            metric=metric,
            system_instruction=system_instruction,
            autorater_config=autorater_config,
            custom_output_config=custom_output_config,
        )
        self._baseline_model = baseline_model

    @property
    def baseline_model(
        self,
    ) -> Union[generative_models.GenerativeModel, Callable[[str], str]]:
        return self._baseline_model
