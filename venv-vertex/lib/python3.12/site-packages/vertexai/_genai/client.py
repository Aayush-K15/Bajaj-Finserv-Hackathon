














import importlib
from typing import Optional, Union

import google.auth
from google.cloud.aiplatform import version as aip_version
from google.genai import _api_client
from google.genai import _common
from google.genai import client as genai_client
from google.genai import types


_GENAI_MODULES_TELEMETRY_HEADER = "vertex-genai-modules"


def _add_tracking_headers(headers: dict[str, str]) -> None:
    

    tracking_label = f"{_GENAI_MODULES_TELEMETRY_HEADER}/{aip_version.__version__}"

    user_agent = headers.get("user-agent", "")
    if tracking_label not in user_agent:
        headers["user-agent"] = f"{user_agent} {tracking_label}".strip()

    api_client = headers.get("x-goog-api-client", "")
    if tracking_label not in api_client:
        headers["x-goog-api-client"] = f"{api_client} {tracking_label}".strip()


_api_client._append_library_version_headers = _add_tracking_headers


class AsyncClient:

    

    def __init__(self, api_client: genai_client.Client):
        self._api_client = api_client
        self._evals = None
        self._agent_engines = None
        self._prompt_optimizer = None

    @property
    @_common.experimental_warning(
        "The Vertex SDK GenAI evals module is experimental, and may change in future "
        "versions."
    )
    def evals(self):
        if self._evals is None:
            try:
                
                
                self._evals = importlib.import_module(".evals", __package__)
            except ImportError as e:
                raise ImportError(
                    "The 'evals' module requires 'pandas' and 'tqdm'. "
                    "Please install them using pip install "
                    "google-cloud-aiplatform[evaluation]"
                ) from e
        return self._evals.AsyncEvals(self._api_client)

    @property
    @_common.experimental_warning(
        "The Vertex SDK GenAI prompt optimizer module is experimental, "
        "and may change in future versions."
    )
    def prompt_optimizer(self):
        if self._prompt_optimizer is None:
            self._prompt_optimizer = importlib.import_module(
                ".prompt_optimizer", __package__
            )
        return self._prompt_optimizer.AsyncPromptOptimizer(self._api_client)

    @property
    @_common.experimental_warning(
        "The Vertex SDK GenAI agent engines module is experimental, "
        "and may change in future versions."
    )
    def agent_engines(self):
        if self._agent_engines is None:
            try:
                
                
                self._agent_engines = importlib.import_module(
                    ".agent_engines",
                    __package__,
                )
            except ImportError as e:
                raise ImportError(
                    "The 'agent_engines' module requires 'additional packages'. "
                    "Please install them using pip install "
                    "google-cloud-aiplatform[agent_engines]"
                ) from e
        return self._agent_engines.AsyncAgentEngines(self._api_client)


class Client:
    

    def __init__(
        self,
        *,
        credentials: Optional[google.auth.credentials.Credentials] = None,
        project: Optional[str] = None,
        location: Optional[str] = None,
        debug_config: Optional[genai_client.DebugConfig] = None,
        http_options: Optional[Union[types.HttpOptions, types.HttpOptionsDict]] = None,
    ):
        

        self._debug_config = debug_config or genai_client.DebugConfig()
        if isinstance(http_options, dict):
            http_options = types.HttpOptions(**http_options)

        self._api_client = genai_client.Client._get_api_client(
            vertexai=True,
            credentials=credentials,
            project=project,
            location=location,
            debug_config=self._debug_config,
            http_options=http_options,
        )
        self._aio = AsyncClient(self._api_client)
        self._evals = None
        self._prompt_optimizer = None
        self._agent_engines = None

    @property
    @_common.experimental_warning(
        "The Vertex SDK GenAI evals module is experimental, and may change in future "
        "versions."
    )
    def evals(self):
        if self._evals is None:
            try:
                
                
                self._evals = importlib.import_module(".evals", __package__)
            except ImportError as e:
                raise ImportError(
                    "The 'evals' module requires additional dependencies. "
                    "Please install them using pip install "
                    "google-cloud-aiplatform[evaluation]"
                ) from e
        return self._evals.Evals(self._api_client)

    @property
    @_common.experimental_warning(
        "The Vertex SDK GenAI prompt optimizer module is experimental, and may change in future "
        "versions."
    )
    def prompt_optimizer(self):
        if self._prompt_optimizer is None:
            self._prompt_optimizer = importlib.import_module(
                ".prompt_optimizer", __package__
            )
        return self._prompt_optimizer.PromptOptimizer(self._api_client)

    @property
    @_common.experimental_warning(
        "The Vertex SDK GenAI async client is experimental, "
        "and may change in future versions."
    )
    def aio(self):
        return self._aio

    
    @staticmethod
    def _get_api_client(
        api_key: Optional[str] = None,
        credentials: Optional[google.auth.credentials.Credentials] = None,
        project: Optional[str] = None,
        location: Optional[str] = None,
        debug_config: Optional[genai_client.DebugConfig] = None,
        http_options: Optional[genai_client.HttpOptions] = None,
    ) -> Optional[genai_client.BaseApiClient]:
        if debug_config and debug_config.client_mode in [
            "record",
            "replay",
            "auto",
        ]:
            return genai_client.ReplayApiClient(
                mode=debug_config.client_mode,  
                replay_id=debug_config.replay_id,  
                replays_directory=debug_config.replays_directory,
                vertexai=True,  
                api_key=api_key,
                credentials=credentials,
                project=project,
                location=location,
                http_options=http_options,
            )

    @property
    @_common.experimental_warning(
        "The Vertex SDK GenAI agent engines module is experimental, "
        "and may change in future versions."
    )
    def agent_engines(self):
        if self._agent_engines is None:
            try:
                
                
                self._agent_engines = importlib.import_module(
                    ".agent_engines",
                    __package__,
                )
            except ImportError as e:
                raise ImportError(
                    "The 'agent_engines' module requires 'additional packages'. "
                    "Please install them using pip install "
                    "google-cloud-aiplatform[agent_engines]"
                ) from e
        return self._agent_engines.AgentEngines(self._api_client)
