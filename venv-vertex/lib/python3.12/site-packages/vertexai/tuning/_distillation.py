
















from typing import Optional

from google.cloud.aiplatform.utils import gcs_utils
from google.cloud.aiplatform_v1beta1.types import tuning_job as gca_tuning_job_types

from vertexai import generative_models
from vertexai.tuning import _tuning


def distill_model(
    *,
    student_model: str,
    teacher_model: str,
    training_dataset: str,
    validation_dataset: Optional[str] = None,
    epoch_count: Optional[int] = None,
    learning_rate_multiplier: Optional[float] = None,
    tuned_model_display_name: Optional[str] = None,
) -> "DistillationJob":
    

    if isinstance(student_model, generative_models.GenerativeModel):
        student_model = student_model._prediction_resource_name

    student_model = student_model.rpartition("/")[-1]
    teacher_model = teacher_model.rpartition("/")[-1]

    pipeline_root = (
        gcs_utils.create_gcs_bucket_for_pipeline_artifacts_if_it_does_not_exist()
    )

    distillation_spec = gca_tuning_job_types.DistillationSpec(
        student_model=student_model,
        base_teacher_model=teacher_model,
        training_dataset_uri=training_dataset,
        validation_dataset_uri=validation_dataset,
        hyper_parameters=gca_tuning_job_types.DistillationHyperParameters(
            epoch_count=epoch_count,
            learning_rate_multiplier=learning_rate_multiplier,
        ),
        pipeline_root_directory=pipeline_root,
    )

    return DistillationJob._create(  
        base_model=None,
        tuning_spec=distillation_spec,
        tuned_model_display_name=tuned_model_display_name,
    )


class DistillationJob(_tuning.TuningJob):
    pass
