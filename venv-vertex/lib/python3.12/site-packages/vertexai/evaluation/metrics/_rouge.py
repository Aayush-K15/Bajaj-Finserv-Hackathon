















from typing import Literal
from vertexai.evaluation import constants
from vertexai.evaluation.metrics import _base


class Rouge(_base._AutomaticMetric):  
    

    _metric_name = constants.Metric.ROUGE

    def __init__(
        self,
        *,
        rouge_type: Literal[
            "rouge1",
            "rouge2",
            "rouge3",
            "rouge4",
            "rouge5",
            "rouge6",
            "rouge7",
            "rouge8",
            "rouge9",
            "rougeL",
            "rougeLsum",
        ],
        use_stemmer: bool = False,
        split_summaries: bool = False
    ):
        
        self._rouge_type = rouge_type
        self._use_stemmer = use_stemmer
        self._split_summaries = split_summaries

        super().__init__(
            metric=Rouge._metric_name,
        )

    @property
    def rouge_type(self) -> str:
        return self._rouge_type

    @property
    def use_stemmer(self) -> bool:
        return self._use_stemmer

    @property
    def split_summaries(self) -> bool:
        return self._split_summaries
