


















import dataclasses
from typing import Dict, List, Optional, Union, TYPE_CHECKING

from google.cloud.aiplatform_v1.services import (
    evaluation_service as gapic_evaluation_services,
)
from vertexai.evaluation.metrics import (
    _base as metrics_base,
)

if TYPE_CHECKING:
    import pandas as pd


@dataclasses.dataclass
class EvaluationRunConfig:
    

    dataset: "pd.DataFrame"
    metrics: List[Union[str, metrics_base._Metric]]
    metric_column_mapping: Dict[str, str]
    client: gapic_evaluation_services.EvaluationServiceClient
    evaluation_service_qps: float
    retry_timeout: float

    def validate_dataset_column(self, column_name: str) -> None:
        
        if (
            self.metric_column_mapping.get(column_name, column_name)
            not in self.dataset.columns
        ):
            raise KeyError(
                "Required column"
                f" `{self.metric_column_mapping.get(column_name, column_name)}`"
                " not found in the evaluation dataset. The columns in the"
                f" evaluation dataset are {list(self.dataset.columns)}."
            )


@dataclasses.dataclass
class EvalResult:
    

    summary_metrics: Dict[str, float]
    metrics_table: Optional["pd.DataFrame"] = None
    metadata: Optional[Dict[str, str]] = None
