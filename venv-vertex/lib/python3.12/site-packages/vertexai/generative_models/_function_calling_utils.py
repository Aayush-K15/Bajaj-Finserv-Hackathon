















import inspect
import typing
from typing import Any, Callable, Dict
import warnings

from google.cloud.aiplatform_v1beta1 import types as aiplatform_types

Struct = Dict[str, Any]


def _generate_json_schema_from_function_using_pydantic(
    func: Callable,
) -> Struct:
    
    
    try:
        from pydantic import v1 as pydantic
        from pydantic.v1 import fields as pydantic_fields
    except ImportError:
        import pydantic
        from pydantic import fields as pydantic_fields

    try:
        import docstring_parser  
    except ImportError:
        warnings.warn("Unable to import docstring_parser")
        docstring_parser = None

    function_description = func.__doc__

    
    
    parameter_descriptions = {}
    if docstring_parser:
        parsed_docstring = docstring_parser.parse(func.__doc__)
        function_description = (
            parsed_docstring.long_description or parsed_docstring.short_description
        )
        for meta in parsed_docstring.meta:
            if isinstance(meta, docstring_parser.DocstringParam):
                parameter_descriptions[meta.arg_name] = meta.description

    defaults = dict(inspect.signature(func).parameters)
    fields_dict = {
        name: (
            
            
            (param.annotation if param.annotation != inspect.Parameter.empty else Any),
            pydantic.Field(
                
                default=(
                    param.default
                    if param.default != inspect.Parameter.empty
                    
                    else pydantic_fields.Undefined
                ),
                
                description=parameter_descriptions.get(name, None),
            ),
        )
        for name, param in defaults.items()
        
        if param.kind
        in (
            inspect.Parameter.POSITIONAL_OR_KEYWORD,
            inspect.Parameter.KEYWORD_ONLY,
            inspect.Parameter.POSITIONAL_ONLY,
        )
    }
    function_schema = pydantic.create_model(func.__name__, **fields_dict).schema()

    function_schema["title"] = func.__name__
    function_schema["description"] = function_description
    
    for name, property_schema in function_schema.get("properties", {}).items():
        annotation = defaults[name].annotation
        
        
        
        
        if typing.get_origin(annotation) is typing.Union and type(
            None
        ) in typing.get_args(annotation):
            
            
            
            
            for schema in property_schema.pop("anyOf", []):
                schema_type = schema.get("type")
                if schema_type and schema_type != "null":
                    property_schema["type"] = schema_type
                    break
            property_schema["nullable"] = True
    
    function_schema["required"] = [
        k
        for k in defaults
        if (
            defaults[k].default == inspect.Parameter.empty
            and defaults[k].kind
            in (
                inspect.Parameter.POSITIONAL_OR_KEYWORD,
                inspect.Parameter.KEYWORD_ONLY,
                inspect.Parameter.POSITIONAL_ONLY,
            )
        )
    ]
    return function_schema


def adapt_json_schema_to_google_tool_schema(schema: Struct) -> Struct:
    
    fixed_schema = dict(schema)
    
    
    
    
    for key in list(fixed_schema):
        
        
        if (
            key not in aiplatform_types.Schema.meta.fields
            and key + "_" not in aiplatform_types.Schema.meta.fields
        ):
            fixed_schema.pop(key, None)
    property_schemas = fixed_schema.get("properties")
    if property_schemas:
        for k, v in property_schemas.items():
            property_schemas[k] = adapt_json_schema_to_google_tool_schema(v)
    return fixed_schema


generate_json_schema_from_function = _generate_json_schema_from_function_using_pydantic
