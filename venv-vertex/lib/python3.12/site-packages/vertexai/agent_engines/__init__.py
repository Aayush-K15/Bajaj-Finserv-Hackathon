















from typing import Dict, Iterable, Optional, Sequence, Union

from google.cloud.aiplatform import base
from google.cloud.aiplatform import initializer
from google.cloud.aiplatform import utils as aip_utils
from google.cloud.aiplatform_v1 import types as aip_types



from vertexai.agent_engines._agent_engines import (
    _AgentEngineInterface,
    AgentEngine,
    Cloneable,
    ModuleAgent,
    OperationRegistrable,
    Queryable,
    AsyncQueryable,
    StreamQueryable,
    AsyncStreamQueryable,
)
from vertexai.agent_engines.templates.ag2 import (
    AG2Agent,
)
from vertexai.agent_engines.templates.langchain import (
    LangchainAgent,
)
from vertexai.agent_engines.templates.langgraph import (
    LanggraphAgent,
)


_LOGGER = base.Logger(__name__)


def get(resource_name: str) -> AgentEngine:
    
    return AgentEngine(resource_name)


def create(
    agent_engine: Optional[_AgentEngineInterface] = None,
    *,
    requirements: Optional[Union[str, Sequence[str]]] = None,
    display_name: Optional[str] = None,
    description: Optional[str] = None,
    gcs_dir_name: Optional[str] = None,
    extra_packages: Optional[Sequence[str]] = None,
    env_vars: Optional[
        Union[Sequence[str], Dict[str, Union[str, aip_types.SecretRef]]]
    ] = None,
    build_options: Optional[Dict[str, Sequence[str]]] = None,
    service_account: Optional[str] = None,
) -> AgentEngine:
    
    return AgentEngine.create(
        agent_engine=agent_engine,
        requirements=requirements,
        display_name=display_name,
        description=description,
        gcs_dir_name=gcs_dir_name,
        extra_packages=extra_packages,
        env_vars=env_vars,
        build_options=build_options,
        service_account=service_account,
    )


def list(*, filter: str = "") -> Iterable[AgentEngine]:
    
    api_client = initializer.global_config.create_client(
        client_class=aip_utils.AgentEngineClientWithOverride,
    )
    for agent in api_client.list_reasoning_engines(
        request=aip_types.ListReasoningEnginesRequest(
            parent=initializer.global_config.common_location_path(),
            filter=filter,
        )
    ):
        yield AgentEngine(agent.name)


def delete(
    resource_name: str,
    *,
    force: bool = False,
    **kwargs,
) -> None:
    
    api_client = initializer.global_config.create_client(
        client_class=aip_utils.AgentEngineClientWithOverride,
    )
    _LOGGER.info(f"Deleting AgentEngine resource: {resource_name}")
    operation_future = api_client.delete_reasoning_engine(
        request=aip_types.DeleteReasoningEngineRequest(
            name=resource_name,
            force=force,
            **(kwargs or {}),
        )
    )
    _LOGGER.info(f"Delete AgentEngine backing LRO: {operation_future.operation.name}")
    operation_future.result()
    _LOGGER.info(f"AgentEngine resource deleted: {resource_name}")


def update(
    resource_name: str,
    *,
    agent_engine: Optional[Union[Queryable, OperationRegistrable]] = None,
    requirements: Optional[Union[str, Sequence[str]]] = None,
    display_name: Optional[str] = None,
    description: Optional[str] = None,
    gcs_dir_name: Optional[str] = None,
    extra_packages: Optional[Sequence[str]] = None,
    env_vars: Optional[
        Union[Sequence[str], Dict[str, Union[str, aip_types.SecretRef]]]
    ] = None,
    build_options: Optional[Dict[str, Sequence[str]]] = None,
    service_account: Optional[str] = None,
) -> "AgentEngine":
    
    agent = get(resource_name)
    return agent.update(
        agent_engine=agent_engine,
        requirements=requirements,
        display_name=display_name,
        description=description,
        gcs_dir_name=gcs_dir_name,
        extra_packages=extra_packages,
        env_vars=env_vars,
        build_options=build_options,
        service_account=service_account,
    )


__all__ = (
    
    "AgentEngine",
    
    "Cloneable",
    "OperationRegistrable",
    "Queryable",
    "AsyncQueryable",
    "StreamQueryable",
    "AsyncStreamQueryable",
    
    "create",
    "delete",
    "get",
    "list",
    "update",
    
    "ModuleAgent",
    "LangchainAgent",
    "LanggraphAgent",
    "AG2Agent",
)
