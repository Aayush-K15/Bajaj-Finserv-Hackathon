
















import abc
from dataclasses import dataclass
from dataclasses import field
import enum
from typing import Any, Dict, List, Optional, Union
from google.cloud.aiplatform.compat.types import (
    feature_online_store_service as fos_service,
)
import proto
from typing_extensions import override


def get_feature_online_store_name(online_store_name: str) -> str:
    
    arr = online_store_name.split("/")
    return arr[5]


class PublicEndpointNotFoundError(RuntimeError):
    


@dataclass
class FeatureViewBigQuerySource:
    uri: str
    entity_id_columns: List[str]


@dataclass
class FeatureViewVertexRagSource:
    uri: str
    rag_corpus_id: Optional[str] = None


@dataclass
class FeatureViewRegistrySource:
    

    features: List[str]
    project_number: Optional[int] = None


@dataclass(frozen=True)
class ConnectionOptions:
    

    @dataclass(frozen=True)
    class InsecureGrpcChannel:
        

        pass

    host: str  
    transport: Union[
        InsecureGrpcChannel
    ]  

    def __eq__(self, other):
        if self.host != other.host:
            return False

        if isinstance(self.transport, ConnectionOptions.InsecureGrpcChannel):
            
            if isinstance(other.transport, ConnectionOptions.InsecureGrpcChannel):
                return True

            
            raise ValueError(
                f"Transport '{self.transport}' cannot be compared to transport '{other.transport}'."
            )

        
        raise ValueError(f"Unsupported transport supplied: {self.transport}")


@dataclass
class FeatureViewReadResponse:
    _response: fos_service.FetchFeatureValuesResponse

    def __init__(self, response: fos_service.FetchFeatureValuesResponse):
        self._response = response

    def to_dict(self) -> Dict[str, Any]:
        return proto.Message.to_dict(self._response.key_values)

    def to_proto(self) -> fos_service.FetchFeatureValuesResponse:
        return self._response


@dataclass
class SearchNearestEntitiesResponse:
    _response: fos_service.SearchNearestEntitiesResponse

    def __init__(self, response: fos_service.SearchNearestEntitiesResponse):
        self._response = response

    def to_dict(self) -> Dict[str, Any]:
        return proto.Message.to_dict(self._response.nearest_neighbors)

    def to_proto(self) -> fos_service.SearchNearestEntitiesResponse:
        return self._response


class DistanceMeasureType(enum.Enum):
    

    DISTANCE_MEASURE_TYPE_UNSPECIFIED = 0
    
    SQUARED_L2_DISTANCE = 1
    
    COSINE_DISTANCE = 2
    
    DOT_PRODUCT_DISTANCE = 3


class AlgorithmConfig(abc.ABC):
    

    def as_dict(self) -> Dict:
        
        pass


@dataclass
class TreeAhConfig(AlgorithmConfig):
    

    leaf_node_embedding_count: Optional[int] = None

    @override
    def as_dict(self) -> Dict:
        return {"leaf_node_embedding_count": self.leaf_node_embedding_count}


@dataclass
class BruteForceConfig(AlgorithmConfig):
    

    @override
    def as_dict(self) -> Dict[str, Any]:
        return {"bruteForceConfig": {}}


@dataclass
class IndexConfig:
    

    embedding_column: str
    dimensions: int
    algorithm_config: AlgorithmConfig = field(default_factory=TreeAhConfig())
    filter_columns: Optional[List[str]] = None
    crowding_column: Optional[str] = None
    distance_measure_type: Optional[DistanceMeasureType] = None

    def as_dict(self) -> Dict[str, Any]:
        
        config = {
            "embedding_column": self.embedding_column,
            "embedding_dimension": self.dimensions,
        }
        if self.distance_measure_type is not None:
            config["distance_measure_type"] = self.distance_measure_type.value
        if self.filter_columns is not None:
            config["filter_columns"] = self.filter_columns
        if self.crowding_column is not None:
            config["crowding_column"] = self.crowding_column

        if isinstance(self.algorithm_config, TreeAhConfig):
            config["tree_ah_config"] = self.algorithm_config.as_dict()
        else:
            config["brute_force_config"] = self.algorithm_config.as_dict()
        return config


@dataclass
class FeatureGroupBigQuerySource:
    

    
    uri: str
    
    entity_id_columns: Optional[List[str]] = None
