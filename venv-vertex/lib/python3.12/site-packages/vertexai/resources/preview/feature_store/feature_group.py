
















from typing import Dict, List, Optional, Sequence, Tuple
from google.auth import credentials as auth_credentials
from google.cloud.aiplatform import base, initializer
from google.cloud.aiplatform import utils
from google.cloud.aiplatform.compat.types import (
    feature as gca_feature,
    feature_group as gca_feature_group,
    io as gca_io,
    feature_monitor_v1beta1 as gca_feature_monitor,
)
from vertexai.resources.preview.feature_store.utils import (
    FeatureGroupBigQuerySource,
)
from vertexai.resources.preview.feature_store import (
    Feature,
)
from vertexai.resources.preview.feature_store.feature_monitor import (
    FeatureMonitor,
)


_LOGGER = base.Logger(__name__)


class FeatureGroup(base.VertexAiResourceNounWithFutureManager):
    

    client_class = utils.FeatureRegistryClientWithOverride

    _resource_noun = "feature_groups"
    _getter_method = "get_feature_group"
    _list_method = "list_feature_groups"
    _delete_method = "delete_feature_group"
    _parse_resource_name_method = "parse_feature_group_path"
    _format_resource_name_method = "feature_group_path"
    _gca_resource: gca_feature_group.FeatureGroup

    def __init__(
        self,
        name: str,
        project: Optional[str] = None,
        location: Optional[str] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
    ):
        

        super().__init__(
            project=project,
            location=location,
            credentials=credentials,
            resource_name=name,
        )

        self._gca_resource = self._get_gca_resource(resource_name=name)

    @classmethod
    def create(
        cls,
        name: str,
        source: FeatureGroupBigQuerySource = None,
        labels: Optional[Dict[str, str]] = None,
        description: Optional[str] = None,
        project: Optional[str] = None,
        location: Optional[str] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
        request_metadata: Optional[Sequence[Tuple[str, str]]] = None,
        create_request_timeout: Optional[float] = None,
        sync: bool = True,
    ) -> "FeatureGroup":
        

        if not source:
            raise ValueError("Please specify a valid source.")

        
        if not isinstance(source, FeatureGroupBigQuerySource):
            raise ValueError("Only FeatureGroupBigQuerySource is a supported source.")

        
        if not source.uri:
            raise ValueError("Please specify URI in BigQuery source.")

        if not source.entity_id_columns:
            _LOGGER.info(
                "No entity ID columns specified in BigQuery source. Defaulting to ['entity_id']."
            )
            entity_id_columns = ["entity_id"]
        else:
            entity_id_columns = source.entity_id_columns

        gapic_feature_group = gca_feature_group.FeatureGroup(
            big_query=gca_feature_group.FeatureGroup.BigQuery(
                big_query_source=gca_io.BigQuerySource(input_uri=source.uri),
                entity_id_columns=entity_id_columns,
            ),
            name=name,
            description=description,
        )

        if labels:
            utils.validate_labels(labels)
            gapic_feature_group.labels = labels

        if request_metadata is None:
            request_metadata = ()

        api_client = cls._instantiate_client(location=location, credentials=credentials)

        create_feature_group_lro = api_client.create_feature_group(
            parent=initializer.global_config.common_location_path(
                project=project, location=location
            ),
            feature_group=gapic_feature_group,
            feature_group_id=name,
            metadata=request_metadata,
            timeout=create_request_timeout,
        )

        _LOGGER.log_create_with_lro(cls, create_feature_group_lro)

        created_feature_group = create_feature_group_lro.result()

        _LOGGER.log_create_complete(cls, created_feature_group, "feature_group")

        feature_group_obj = cls(
            name=created_feature_group.name,
            project=project,
            location=location,
            credentials=credentials,
        )

        return feature_group_obj

    @base.optional_sync()
    def delete(self, force: bool = False, sync: bool = True) -> None:
        

        lro = getattr(self.api_client, self._delete_method)(
            name=self.resource_name,
            force=force,
        )
        _LOGGER.log_delete_with_lro(self, lro)
        lro.result()
        _LOGGER.log_delete_complete(self)

    def get_feature(
        self,
        feature_id: str,
        latest_stats_count: Optional[int] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
    ) -> Feature:
        
        credentials = (
            credentials or self.credentials or initializer.global_config.credentials
        )
        if latest_stats_count is not None:
            return Feature(
                name=f"{self.resource_name}/features/{feature_id}",
                latest_stats_count=latest_stats_count,
                credentials=credentials,
            )
        return Feature(
            f"{self.resource_name}/features/{feature_id}", credentials=credentials
        )

    def create_feature(
        self,
        name: str,
        version_column_name: Optional[str] = None,
        description: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        point_of_contact: Optional[str] = None,
        project: Optional[str] = None,
        location: Optional[str] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
        request_metadata: Optional[Sequence[Tuple[str, str]]] = None,
        create_request_timeout: Optional[float] = None,
        sync: bool = True,
    ) -> Feature:
        

        gapic_feature = gca_feature.Feature()

        if version_column_name:
            gapic_feature.version_column_name = version_column_name

        if description:
            gapic_feature.description = description

        if labels:
            utils.validate_labels(labels)
            gapic_feature.labels = labels

        if point_of_contact:
            gapic_feature.point_of_contact = point_of_contact

        if request_metadata is None:
            request_metadata = ()

        api_client = self.__class__._instantiate_client(
            location=location, credentials=credentials
        )

        create_feature_lro = api_client.create_feature(
            parent=self.resource_name,
            feature=gapic_feature,
            feature_id=name,
            metadata=request_metadata,
            timeout=create_request_timeout,
        )

        _LOGGER.log_create_with_lro(Feature, create_feature_lro)

        created_feature = create_feature_lro.result()

        _LOGGER.log_create_complete(Feature, created_feature, "feature")

        feature_obj = Feature(
            name=created_feature.name,
            project=project,
            location=location,
            credentials=credentials,
        )

        return feature_obj

    def list_features(
        self,
        project: Optional[str] = None,
        location: Optional[str] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
    ) -> List[Feature]:
        

        return Feature.list(
            parent=self.resource_name,
            project=project,
            location=location,
            credentials=credentials,
        )

    def get_feature_monitor(
        self,
        feature_monitor_id: str,
        credentials: Optional[auth_credentials.Credentials] = None,
    ) -> FeatureMonitor:
        
        credentials = (
            credentials or self.credentials or initializer.global_config.credentials
        )
        return FeatureMonitor(
            f"{self.resource_name}/featureMonitors/{feature_monitor_id}",
            credentials=credentials,
        )

    def create_feature_monitor(
        self,
        name: str,
        description: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        schedule_config: Optional[str] = None,
        feature_selection_configs: Optional[List[Tuple[str, float]]] = None,
        project: Optional[str] = None,
        location: Optional[str] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
        request_metadata: Optional[Sequence[Tuple[str, str]]] = None,
        create_request_timeout: Optional[float] = None,
    ) -> FeatureMonitor:
        

        gapic_feature_monitor = gca_feature_monitor.FeatureMonitor()

        if description:
            gapic_feature_monitor.description = description

        if labels:
            utils.validate_labels(labels)
            gapic_feature_monitor.labels = labels

        if request_metadata is None:
            request_metadata = ()

        if schedule_config:
            gapic_feature_monitor.schedule_config = gca_feature_monitor.ScheduleConfig(
                cron=schedule_config
            )

        if feature_selection_configs is None:
            raise ValueError(
                "Please specify feature_configs: features to be monitored and"
                " their thresholds."
            )

        if feature_selection_configs is not None:
            gapic_feature_monitor.feature_selection_config.feature_configs = [
                gca_feature_monitor.FeatureSelectionConfig.FeatureConfig(
                    feature_id=feature_id,
                    drift_threshold=threshold if threshold else 0.3,
                )
                for feature_id, threshold in feature_selection_configs
            ]

        api_client = self.__class__._instantiate_client(
            location=location, credentials=credentials
        )

        create_feature_monitor_lro = api_client.select_version(
            "v1beta1"
        ).create_feature_monitor(
            parent=self.resource_name,
            feature_monitor=gapic_feature_monitor,
            feature_monitor_id=name,
            metadata=request_metadata,
            timeout=create_request_timeout,
        )

        _LOGGER.log_create_with_lro(FeatureMonitor, create_feature_monitor_lro)

        created_feature_monitor = create_feature_monitor_lro.result()

        _LOGGER.log_create_complete(
            FeatureMonitor, created_feature_monitor, "feature_monitor"
        )

        feature_monitor_obj = FeatureMonitor(
            name=created_feature_monitor.name,
            project=project,
            location=location,
            credentials=credentials,
        )

        return feature_monitor_obj

    def list_feature_monitors(
        self,
        project: Optional[str] = None,
        location: Optional[str] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
    ) -> List[FeatureMonitor]:
        

        return FeatureMonitor.list(
            parent=self.resource_name,
            project=project,
            location=location,
            credentials=credentials,
        )

    @property
    def source(self) -> FeatureGroupBigQuerySource:
        return FeatureGroupBigQuerySource(
            uri=self._gca_resource.big_query.big_query_source.input_uri,
            entity_id_columns=self._gca_resource.big_query.entity_id_columns,
        )
