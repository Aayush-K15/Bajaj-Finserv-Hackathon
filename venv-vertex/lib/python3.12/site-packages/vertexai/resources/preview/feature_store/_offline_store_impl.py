
















import textwrap
from dataclasses import dataclass
from typing import Optional, List


@dataclass
class DataSource:
    

    def __init__(
        self,
        qualifying_name: str,
        sql: str,
        data_columns: List[str],
        timestamp_column: str,
        entity_id_columns: Optional[List[str]] = None,
    ):
        
        self.qualifying_name = qualifying_name
        self._sql = sql
        self.data_columns = data_columns
        self.timestamp_column = timestamp_column
        self.entity_id_columns = entity_id_columns

    def copy_with_pitl_suffix(self) -> "DataSource":
        import copy

        data_source = copy.copy(self)
        data_source.qualifying_name += "_pitl"
        return data_source

    @property
    def sql(self):
        return self._sql

    @property
    def comma_separated_qualified_data_columns(self):
        return ", ".join(
            [self.qualifying_name + "." + col for col in self.data_columns]
        )

    @property
    def comma_separated_name_qualified_all_non_timestamp_columns(self):
        
        all_columns = self.data_columns.copy()
        if self.entity_id_columns:
            all_columns += self.entity_id_columns
        return ", ".join([self.qualifying_name + "." + col for col in all_columns])

    @property
    def qualified_timestamp_column(self) -> str:
        
        return f"{self.qualifying_name}.{self.timestamp_column}"


def _generate_eid_check(entity_data: DataSource, feature: DataSource):
    
    e_cols = set(entity_data.data_columns)
    f_cols = feature.entity_id_columns
    assert f_cols

    equal_statements = []
    for col in f_cols:
        if col not in e_cols:
            raise ValueError(
                f"Feature entity ID column '{col}' should be a column in the entity DataFrame."
            )
        equal_statements.append(
            f"{entity_data.qualifying_name}.{col} = {feature.qualifying_name}.{col}"
        )

    statement = " AND\n".join(equal_statements)

    return statement







_PITL_QUERY_TEMPLATE_RAW = 


def pitl_query_template():
    try:
        import jinja2
    except ImportError as exc:
        raise ImportError(
            "`Jinja2` is not installed but required for this functionality."
        ) from exc

    return jinja2.Environment(
        loader=jinja2.BaseLoader, lstrip_blocks=True, trim_blocks=True
    ).from_string(_PITL_QUERY_TEMPLATE_RAW)


def render_pitl_query(entity_data: DataSource, feature_data: List[DataSource]):
    
    return pitl_query_template().render(
        textwrap=textwrap,
        generate_eid_check=_generate_eid_check,
        entity_data=entity_data,
        feature_data=feature_data,
    )
