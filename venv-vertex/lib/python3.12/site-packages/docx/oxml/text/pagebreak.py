

from __future__ import annotations

import copy
from typing import TYPE_CHECKING

from docx.oxml.xmlchemy import BaseOxmlElement
from docx.shared import lazyproperty

if TYPE_CHECKING:
    from docx.oxml.text.hyperlink import CT_Hyperlink
    from docx.oxml.text.paragraph import CT_P


class CT_LastRenderedPageBreak(BaseOxmlElement):
    

    @property
    def following_fragment_p(self) -> CT_P:
        
        if not self == self._first_lrpb_in_p(self._enclosing_p):
            raise ValueError("only defined on first rendered page-break in paragraph")

        
        return (
            self._following_frag_in_hlink if self._is_in_hyperlink else self._following_frag_in_run
        )

    @property
    def follows_all_content(self) -> bool:
        
        
        
        
        if self._is_in_hyperlink:
            return False

        return bool(
            
            self._enclosing_p.xpath(
                
                f"(./w:r)[last()]"
                
                f"/w:lastRenderedPageBreak"
                
                f"[not(following-sibling::*[{self._run_inner_content_xpath}])]"
            )
        )

    @property
    def precedes_all_content(self) -> bool:
        
        
        
        if self._is_in_hyperlink:
            return False

        return bool(
            
            self._enclosing_p.xpath(
                
                f"./w:r[1]"
                
                f"/w:lastRenderedPageBreak"
                
                f"[not(preceding-sibling::*[{self._run_inner_content_xpath}])]"
            )
        )

    @property
    def preceding_fragment_p(self) -> CT_P:
        
        if not self == self._first_lrpb_in_p(self._enclosing_p):
            raise ValueError("only defined on first rendered page-break in paragraph")

        
        return (
            self._preceding_frag_in_hlink if self._is_in_hyperlink else self._preceding_frag_in_run
        )

    def _enclosing_hyperlink(self, lrpb: CT_LastRenderedPageBreak) -> CT_Hyperlink:
        
        return lrpb.xpath("./parent::w:r/parent::w:hyperlink")[0]

    @property
    def _enclosing_p(self) -> CT_P:
        
        return self.xpath("./ancestor::w:p[1]")[0]

    def _first_lrpb_in_p(self, p: CT_P) -> CT_LastRenderedPageBreak:
        
        lrpbs = p.xpath("./w:r/w:lastRenderedPageBreak | ./w:hyperlink/w:r/w:lastRenderedPageBreak")
        if not lrpbs:
            raise ValueError("no rendered page-breaks in paragraph element")
        return lrpbs[0]

    @lazyproperty
    def _following_frag_in_hlink(self) -> CT_P:
        
        if not self._is_in_hyperlink:
            raise ValueError("only defined on a rendered page-break in a hyperlink")

        
        p = copy.deepcopy(self._enclosing_p)

        
        lrpb = self._first_lrpb_in_p(p)

        
        hyperlink = lrpb._enclosing_hyperlink(lrpb)

        
        for e in hyperlink.xpath("./preceding-sibling::*[not(self::w:pPr)]"):
            p.remove(e)

        
        hyperlink.getparent().remove(hyperlink)

        
        return p

    @lazyproperty
    def _following_frag_in_run(self) -> CT_P:
        
        if self._is_in_hyperlink:
            raise ValueError("only defined on a rendered page-break not in a hyperlink")

        
        p = copy.deepcopy(self._enclosing_p)

        
        lrpb = self._first_lrpb_in_p(p)

        
        enclosing_r = lrpb.xpath("./parent::w:r")[0]

        
        for e in enclosing_r.xpath("./preceding-sibling::*[not(self::w:pPr)]"):
            p.remove(e)

        
        
        for e in lrpb.xpath("./preceding-sibling::*[not(self::w:rPr)]"):
            enclosing_r.remove(e)
        enclosing_r.remove(lrpb)

        return p

    @lazyproperty
    def _is_in_hyperlink(self) -> bool:
        
        return bool(self.xpath("./parent::w:r/parent::w:hyperlink"))

    @lazyproperty
    def _preceding_frag_in_hlink(self) -> CT_P:
        
        if not self._is_in_hyperlink:
            raise ValueError("only defined on a rendered page-break in a hyperlink")

        
        p = copy.deepcopy(self._enclosing_p)

        
        lrpb = self._first_lrpb_in_p(p)

        
        hyperlink = lrpb._enclosing_hyperlink(lrpb)

        
        for e in hyperlink.xpath("./following-sibling::*"):
            p.remove(e)

        
        lrpb.getparent().remove(lrpb)

        
        
        return p

    @lazyproperty
    def _preceding_frag_in_run(self) -> CT_P:
        
        if self._is_in_hyperlink:
            raise ValueError("only defined on a rendered page-break not in a hyperlink")

        
        p = copy.deepcopy(self._enclosing_p)

        
        lrpb = self._first_lrpb_in_p(p)

        
        enclosing_r = lrpb.xpath("./parent::w:r")[0]

        
        for e in enclosing_r.xpath("./following-sibling::*"):
            p.remove(e)

        
        
        for e in lrpb.xpath("./following-sibling::*"):
            enclosing_r.remove(e)
        enclosing_r.remove(lrpb)

        return p

    @lazyproperty
    def _run_inner_content_xpath(self) -> str:
        
        return (
            "self::w:br"
            " | self::w:cr"
            " | self::w:drawing"
            " | self::w:noBreakHyphen"
            " | self::w:ptab"
            " | self::w:t"
            " | self::w:tab"
        )
