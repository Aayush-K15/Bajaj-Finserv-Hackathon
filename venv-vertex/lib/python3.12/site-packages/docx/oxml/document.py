

from __future__ import annotations

from typing import TYPE_CHECKING, Callable, List

from docx.oxml.section import CT_SectPr
from docx.oxml.xmlchemy import BaseOxmlElement, ZeroOrMore, ZeroOrOne

if TYPE_CHECKING:
    from docx.oxml.table import CT_Tbl
    from docx.oxml.text.paragraph import CT_P


class CT_Document(BaseOxmlElement):
    

    body: CT_Body = ZeroOrOne("w:body")  

    @property
    def sectPr_lst(self) -> List[CT_SectPr]:
        
        xpath = "./w:body/w:p/w:pPr/w:sectPr | ./w:body/w:sectPr"
        return self.xpath(xpath)


class CT_Body(BaseOxmlElement):
    

    add_p: Callable[[], CT_P]
    get_or_add_sectPr: Callable[[], CT_SectPr]
    p_lst: List[CT_P]
    tbl_lst: List[CT_Tbl]

    _insert_tbl: Callable[[CT_Tbl], CT_Tbl]

    p = ZeroOrMore("w:p", successors=("w:sectPr",))
    tbl = ZeroOrMore("w:tbl", successors=("w:sectPr",))
    sectPr: CT_SectPr | None = ZeroOrOne(  
        "w:sectPr", successors=()
    )

    def add_section_break(self) -> CT_SectPr:
        
        
        sentinel_sectPr = self.get_or_add_sectPr()
        
        self.add_p().set_sectPr(sentinel_sectPr.clone())
        
        for hdrftr_ref in sentinel_sectPr.xpath("w:headerReference|w:footerReference"):
            sentinel_sectPr.remove(hdrftr_ref)
        
        return sentinel_sectPr

    def clear_content(self):
        
        for content_elm in self.xpath("./*[not(self::w:sectPr)]"):
            self.remove(content_elm)

    @property
    def inner_content_elements(self) -> List[CT_P | CT_Tbl]:
        
        return self.xpath("./w:p | ./w:tbl")
