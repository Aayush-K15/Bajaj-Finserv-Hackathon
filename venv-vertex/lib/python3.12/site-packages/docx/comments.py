

from __future__ import annotations

import datetime as dt
from typing import TYPE_CHECKING, Iterator

from docx.blkcntnr import BlockItemContainer

if TYPE_CHECKING:
    from docx.oxml.comments import CT_Comment, CT_Comments
    from docx.parts.comments import CommentsPart
    from docx.styles.style import ParagraphStyle
    from docx.text.paragraph import Paragraph


class Comments:
    

    def __init__(self, comments_elm: CT_Comments, comments_part: CommentsPart):
        self._comments_elm = comments_elm
        self._comments_part = comments_part

    def __iter__(self) -> Iterator[Comment]:
        
        return (
            Comment(comment_elm, self._comments_part)
            for comment_elm in self._comments_elm.comment_lst
        )

    def __len__(self) -> int:
        
        return len(self._comments_elm.comment_lst)

    def add_comment(self, text: str = "", author: str = "", initials: str | None = "") -> Comment:
        
        comment_elm = self._comments_elm.add_comment()
        comment_elm.author = author
        comment_elm.initials = initials
        comment_elm.date = dt.datetime.now(dt.timezone.utc)
        comment = Comment(comment_elm, self._comments_part)

        if text == "":
            return comment

        para_text_iter = iter(text.split("\n"))

        first_para_text = next(para_text_iter)
        first_para = comment.paragraphs[0]
        first_para.add_run(first_para_text)

        for s in para_text_iter:
            comment.add_paragraph(text=s)

        return comment

    def get(self, comment_id: int) -> Comment | None:
        
        comment_elm = self._comments_elm.get_comment_by_id(comment_id)
        return Comment(comment_elm, self._comments_part) if comment_elm is not None else None


class Comment(BlockItemContainer):
    

    def __init__(self, comment_elm: CT_Comment, comments_part: CommentsPart):
        super().__init__(comment_elm, comments_part)
        self._comment_elm = comment_elm

    def add_paragraph(self, text: str = "", style: str | ParagraphStyle | None = None) -> Paragraph:
        
        paragraph = super().add_paragraph(text, style)

        
        
        if style is None:
            paragraph._p.style = "CommentText"  

        return paragraph

    @property
    def author(self) -> str:
        
        return self._comment_elm.author

    @author.setter
    def author(self, value: str):
        self._comment_elm.author = value

    @property
    def comment_id(self) -> int:
        
        return self._comment_elm.id

    @property
    def initials(self) -> str | None:
        
        return self._comment_elm.initials

    @initials.setter
    def initials(self, value: str | None):
        self._comment_elm.initials = value

    @property
    def text(self) -> str:
        
        return "\n".join(p.text for p in self.paragraphs)

    @property
    def timestamp(self) -> dt.datetime | None:
        
        return self._comment_elm.date
