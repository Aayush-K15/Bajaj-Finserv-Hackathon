

from __future__ import annotations

from typing import Dict


class BabelFish:
    

    style_aliases = (
        ("Caption", "caption"),
        ("Footer", "footer"),
        ("Header", "header"),
        ("Heading 1", "heading 1"),
        ("Heading 2", "heading 2"),
        ("Heading 3", "heading 3"),
        ("Heading 4", "heading 4"),
        ("Heading 5", "heading 5"),
        ("Heading 6", "heading 6"),
        ("Heading 7", "heading 7"),
        ("Heading 8", "heading 8"),
        ("Heading 9", "heading 9"),
    )

    internal_style_names: Dict[str, str] = dict(style_aliases)
    ui_style_names = {item[1]: item[0] for item in style_aliases}

    @classmethod
    def ui2internal(cls, ui_style_name: str) -> str:
        
        return cls.internal_style_names.get(ui_style_name, ui_style_name)

    @classmethod
    def internal2ui(cls, internal_style_name: str) -> str:
        
        return cls.ui_style_names.get(internal_style_name, internal_style_name)
