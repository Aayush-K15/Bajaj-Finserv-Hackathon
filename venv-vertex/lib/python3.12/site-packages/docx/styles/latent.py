

from docx.shared import ElementProxy
from docx.styles import BabelFish


class LatentStyles(ElementProxy):
    

    def __getitem__(self, key):
        
        style_name = BabelFish.ui2internal(key)
        lsdException = self._element.get_by_name(style_name)
        if lsdException is None:
            raise KeyError("no latent style with name '%s'" % key)
        return _LatentStyle(lsdException)

    def __iter__(self):
        return (_LatentStyle(ls) for ls in self._element.lsdException_lst)

    def __len__(self):
        return len(self._element.lsdException_lst)

    def add_latent_style(self, name):
        
        lsdException = self._element.add_lsdException()
        lsdException.name = BabelFish.ui2internal(name)
        return _LatentStyle(lsdException)

    @property
    def default_priority(self):
        
        return self._element.defUIPriority

    @default_priority.setter
    def default_priority(self, value):
        self._element.defUIPriority = value

    @property
    def default_to_hidden(self):
        
        return self._element.bool_prop("defSemiHidden")

    @default_to_hidden.setter
    def default_to_hidden(self, value):
        self._element.set_bool_prop("defSemiHidden", value)

    @property
    def default_to_locked(self):
        
        return self._element.bool_prop("defLockedState")

    @default_to_locked.setter
    def default_to_locked(self, value):
        self._element.set_bool_prop("defLockedState", value)

    @property
    def default_to_quick_style(self):
        
        return self._element.bool_prop("defQFormat")

    @default_to_quick_style.setter
    def default_to_quick_style(self, value):
        self._element.set_bool_prop("defQFormat", value)

    @property
    def default_to_unhide_when_used(self):
        
        return self._element.bool_prop("defUnhideWhenUsed")

    @default_to_unhide_when_used.setter
    def default_to_unhide_when_used(self, value):
        self._element.set_bool_prop("defUnhideWhenUsed", value)

    @property
    def load_count(self):
        
        return self._element.count

    @load_count.setter
    def load_count(self, value):
        self._element.count = value


class _LatentStyle(ElementProxy):
    

    def delete(self):
        
        self._element.delete()
        self._element = None

    @property
    def hidden(self):
        
        return self._element.on_off_prop("semiHidden")

    @hidden.setter
    def hidden(self, value):
        self._element.set_on_off_prop("semiHidden", value)

    @property
    def locked(self):
        
        return self._element.on_off_prop("locked")

    @locked.setter
    def locked(self, value):
        self._element.set_on_off_prop("locked", value)

    @property
    def name(self):
        
        return BabelFish.internal2ui(self._element.name)

    @property
    def priority(self):
        
        return self._element.uiPriority

    @priority.setter
    def priority(self, value):
        self._element.uiPriority = value

    @property
    def quick_style(self):
        
        return self._element.on_off_prop("qFormat")

    @quick_style.setter
    def quick_style(self, value):
        self._element.set_on_off_prop("qFormat", value)

    @property
    def unhide_when_used(self):
        
        return self._element.on_off_prop("unhideWhenUsed")

    @unhide_when_used.setter
    def unhide_when_used(self, value):
        self._element.set_on_off_prop("unhideWhenUsed", value)
