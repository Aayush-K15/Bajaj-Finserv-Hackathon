



from __future__ import annotations

from typing import cast

from lxml import etree

from docx.opc.constants import NAMESPACE as NS
from docx.opc.constants import RELATIONSHIP_TARGET_MODE as RTM


element_class_lookup = etree.ElementNamespaceClassLookup()
oxml_parser = etree.XMLParser(remove_blank_text=True, resolve_entities=False)
oxml_parser.set_element_class_lookup(element_class_lookup)

nsmap = {
    "ct": NS.OPC_CONTENT_TYPES,
    "pr": NS.OPC_RELATIONSHIPS,
    "r": NS.OFC_RELATIONSHIPS,
}







def parse_xml(text: str) -> etree._Element:
    
    return etree.fromstring(text, oxml_parser)


def qn(tag: str) -> str:
    
    prefix, tagroot = tag.split(":")
    uri = nsmap[prefix]
    return "{%s}%s" % (uri, tagroot)


def serialize_part_xml(part_elm: etree._Element) -> bytes:
    
    return etree.tostring(part_elm, encoding="UTF-8", standalone=True)


def serialize_for_reading(element: etree._Element) -> str:
    
    return etree.tostring(element, encoding="unicode", pretty_print=True)







class BaseOxmlElement(etree.ElementBase):
    

    @property
    def xml(self) -> str:
        
        return serialize_for_reading(self)


class CT_Default(BaseOxmlElement):
    

    @property
    def content_type(self):
        
        return self.get("ContentType")

    @property
    def extension(self):
        
        return self.get("Extension")

    @staticmethod
    def new(ext: str, content_type: str):
        
        xml = '<Default xmlns="%s"/>' % nsmap["ct"]
        default = parse_xml(xml)
        default.set("Extension", ext)
        default.set("ContentType", content_type)
        return default


class CT_Override(BaseOxmlElement):
    

    @property
    def content_type(self):
        
        return self.get("ContentType")

    @staticmethod
    def new(partname, content_type):
        
        xml = '<Override xmlns="%s"/>' % nsmap["ct"]
        override = parse_xml(xml)
        override.set("PartName", partname)
        override.set("ContentType", content_type)
        return override

    @property
    def partname(self):
        
        return self.get("PartName")


class CT_Relationship(BaseOxmlElement):
    

    @staticmethod
    def new(rId: str, reltype: str, target: str, target_mode: str = RTM.INTERNAL):
        
        xml = '<Relationship xmlns="%s"/>' % nsmap["pr"]
        relationship = parse_xml(xml)
        relationship.set("Id", rId)
        relationship.set("Type", reltype)
        relationship.set("Target", target)
        if target_mode == RTM.EXTERNAL:
            relationship.set("TargetMode", RTM.EXTERNAL)
        return relationship

    @property
    def rId(self):
        
        return self.get("Id")

    @property
    def reltype(self):
        
        return self.get("Type")

    @property
    def target_ref(self):
        
        return self.get("Target")

    @property
    def target_mode(self):
        
        return self.get("TargetMode", RTM.INTERNAL)


class CT_Relationships(BaseOxmlElement):
    

    def add_rel(self, rId: str, reltype: str, target: str, is_external: bool = False):
        
        target_mode = RTM.EXTERNAL if is_external else RTM.INTERNAL
        relationship = CT_Relationship.new(rId, reltype, target, target_mode)
        self.append(relationship)

    @staticmethod
    def new() -> CT_Relationships:
        
        xml = '<Relationships xmlns="%s"/>' % nsmap["pr"]
        return cast(CT_Relationships, parse_xml(xml))

    @property
    def Relationship_lst(self):
        
        return self.findall(qn("pr:Relationship"))

    @property
    def xml(self):
        
        return serialize_part_xml(self)


class CT_Types(BaseOxmlElement):
    

    def add_default(self, ext, content_type):
        
        default = CT_Default.new(ext, content_type)
        self.append(default)

    def add_override(self, partname, content_type):
        
        override = CT_Override.new(partname, content_type)
        self.append(override)

    @property
    def defaults(self):
        return self.findall(qn("ct:Default"))

    @staticmethod
    def new():
        
        xml = '<Types xmlns="%s"/>' % nsmap["ct"]
        types = parse_xml(xml)
        return types

    @property
    def overrides(self):
        return self.findall(qn("ct:Override"))


ct_namespace = element_class_lookup.get_namespace(nsmap["ct"])
ct_namespace["Default"] = CT_Default
ct_namespace["Override"] = CT_Override
ct_namespace["Types"] = CT_Types

pr_namespace = element_class_lookup.get_namespace(nsmap["pr"])
pr_namespace["Relationship"] = CT_Relationship
pr_namespace["Relationships"] = CT_Relationships
