from struct import Struct

from .exceptions import UnexpectedEndOfFileError

BIG_ENDIAN = ">"
LITTLE_ENDIAN = "<"


class StreamReader:
    

    def __init__(self, stream, byte_order, base_offset=0):
        super(StreamReader, self).__init__()
        self._stream = stream
        self._byte_order = LITTLE_ENDIAN if byte_order == LITTLE_ENDIAN else BIG_ENDIAN
        self._base_offset = base_offset

    def read(self, count):
        
        return self._stream.read(count)

    def read_byte(self, base, offset=0):
        
        fmt = "B"
        return self._read_int(fmt, base, offset)

    def read_long(self, base, offset=0):
        
        fmt = "<L" if self._byte_order is LITTLE_ENDIAN else ">L"
        return self._read_int(fmt, base, offset)

    def read_short(self, base, offset=0):
        
        fmt = b"<H" if self._byte_order is LITTLE_ENDIAN else b">H"
        return self._read_int(fmt, base, offset)

    def read_str(self, char_count, base, offset=0):
        

        def str_struct(char_count):
            format_ = "%ds" % char_count
            return Struct(format_)

        struct = str_struct(char_count)
        chars = self._unpack_item(struct, base, offset)
        unicode_str = chars.decode("UTF-8")
        return unicode_str

    def seek(self, base, offset=0):
        location = self._base_offset + base + offset
        self._stream.seek(location)

    def tell(self):
        
        return self._stream.tell()

    def _read_bytes(self, byte_count, base, offset):
        self.seek(base, offset)
        bytes_ = self._stream.read(byte_count)
        if len(bytes_) < byte_count:
            raise UnexpectedEndOfFileError
        return bytes_

    def _read_int(self, fmt, base, offset):
        struct = Struct(fmt)
        return self._unpack_item(struct, base, offset)

    def _unpack_item(self, struct, base, offset):
        bytes_ = self._read_bytes(struct.size, base, offset)
        return struct.unpack(bytes_)[0]
