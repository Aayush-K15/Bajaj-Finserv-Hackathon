

from __future__ import annotations

from typing import TYPE_CHECKING

from docx.oxml.drawing import CT_Drawing
from docx.shared import Parented

if TYPE_CHECKING:
    import docx.types as t
    from docx.image.image import Image


class Drawing(Parented):
    

    def __init__(self, drawing: CT_Drawing, parent: t.ProvidesStoryPart):
        super().__init__(parent)
        self._parent = parent
        self._drawing = self._element = drawing

    @property
    def has_picture(self) -> bool:
        
        xpath_expr = (
            
            "./wp:inline/a:graphic/a:graphicData/pic:pic"
            
            " | ./wp:anchor/a:graphic/a:graphicData/pic:pic"
        )
        
        return bool(self._drawing.xpath(xpath_expr))

    @property
    def image(self) -> Image:
        
        picture_rIds = self._drawing.xpath(".//pic:blipFill/a:blip/@r:embed")
        if not picture_rIds:
            raise ValueError("drawing does not contain a picture")
        rId = picture_rIds[0]
        doc_part = self.part
        image_part = doc_part.related_parts[rId]
        return image_part.image
