

from __future__ import annotations

from typing import TYPE_CHECKING, cast

from typing_extensions import TypeAlias

from docx.enum.dml import MSO_COLOR_TYPE
from docx.oxml.simpletypes import ST_HexColorAuto
from docx.shared import ElementProxy, RGBColor

if TYPE_CHECKING:
    from docx.enum.dml import MSO_THEME_COLOR
    from docx.oxml.text.font import CT_Color
    from docx.oxml.text.run import CT_R


RPrParent: TypeAlias = "CT_R"


class ColorFormat(ElementProxy):
    

    def __init__(self, rPr_parent: RPrParent):
        super(ColorFormat, self).__init__(rPr_parent)
        self._element = rPr_parent

    @property
    def rgb(self) -> RGBColor | None:
        
        color = self._color
        if color is None:
            return None
        if color.val == ST_HexColorAuto.AUTO:
            return None
        return cast(RGBColor, color.val)

    @rgb.setter
    def rgb(self, value: RGBColor | None):
        if value is None and self._color is None:
            return
        rPr = self._element.get_or_add_rPr()
        rPr._remove_color()  
        if value is not None:
            rPr.get_or_add_color().val = value

    @property
    def theme_color(self) -> MSO_THEME_COLOR | None:
        
        color = self._color
        if color is None:
            return None
        return color.themeColor

    @theme_color.setter
    def theme_color(self, value: MSO_THEME_COLOR | None):
        if value is None:
            if self._color is not None and self._element.rPr is not None:
                self._element.rPr._remove_color()  
            return
        self._element.get_or_add_rPr().get_or_add_color().themeColor = value

    @property
    def type(self) -> MSO_COLOR_TYPE | None:
        
        color = self._color
        if color is None:
            return None
        if color.themeColor is not None:
            return MSO_COLOR_TYPE.THEME
        if color.val == ST_HexColorAuto.AUTO:
            return MSO_COLOR_TYPE.AUTO
        return MSO_COLOR_TYPE.RGB

    @property
    def _color(self) -> CT_Color | None:
        
        rPr = self._element.rPr
        if rPr is None:
            return None
        return rPr.color
