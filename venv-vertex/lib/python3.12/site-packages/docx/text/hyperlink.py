

from __future__ import annotations

from typing import TYPE_CHECKING

from docx.shared import Parented
from docx.text.run import Run

if TYPE_CHECKING:
    import docx.types as t
    from docx.oxml.text.hyperlink import CT_Hyperlink


class Hyperlink(Parented):
    

    def __init__(self, hyperlink: CT_Hyperlink, parent: t.ProvidesStoryPart):
        super().__init__(parent)
        self._parent = parent
        self._hyperlink = self._element = hyperlink

    @property
    def address(self) -> str:
        
        rId = self._hyperlink.rId
        return self._parent.part.rels[rId].target_ref if rId else ""

    @property
    def contains_page_break(self) -> bool:
        
        return bool(self._hyperlink.lastRenderedPageBreaks)

    @property
    def fragment(self) -> str:
        
        return self._hyperlink.anchor or ""

    @property
    def runs(self) -> list[Run]:
        
        return [Run(r, self._parent) for r in self._hyperlink.r_lst]

    @property
    def text(self) -> str:
        
        return self._hyperlink.text

    @property
    def url(self) -> str:
        
        address, fragment = self.address, self.fragment
        if not address:
            return ""
        return f"{address}
