














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

__protobuf__ = proto.module(
    package="google.cloud.resourcemanager.v3",
    manifest={
        "TagBinding",
        "CreateTagBindingMetadata",
        "CreateTagBindingRequest",
        "DeleteTagBindingMetadata",
        "DeleteTagBindingRequest",
        "ListTagBindingsRequest",
        "ListTagBindingsResponse",
        "ListEffectiveTagsRequest",
        "ListEffectiveTagsResponse",
        "EffectiveTag",
    },
)


class TagBinding(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    parent: str = proto.Field(
        proto.STRING,
        number=2,
    )
    tag_value: str = proto.Field(
        proto.STRING,
        number=3,
    )
    tag_value_namespaced_name: str = proto.Field(
        proto.STRING,
        number=4,
    )


class CreateTagBindingMetadata(proto.Message):
    r


class CreateTagBindingRequest(proto.Message):
    r

    tag_binding: "TagBinding" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="TagBinding",
    )
    validate_only: bool = proto.Field(
        proto.BOOL,
        number=2,
    )


class DeleteTagBindingMetadata(proto.Message):
    r


class DeleteTagBindingRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListTagBindingsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )


class ListTagBindingsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    tag_bindings: MutableSequence["TagBinding"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="TagBinding",
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class ListEffectiveTagsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )


class ListEffectiveTagsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    effective_tags: MutableSequence["EffectiveTag"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="EffectiveTag",
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class EffectiveTag(proto.Message):
    r

    tag_value: str = proto.Field(
        proto.STRING,
        number=1,
    )
    namespaced_tag_value: str = proto.Field(
        proto.STRING,
        number=2,
    )
    tag_key: str = proto.Field(
        proto.STRING,
        number=3,
    )
    namespaced_tag_key: str = proto.Field(
        proto.STRING,
        number=4,
    )
    tag_key_parent_name: str = proto.Field(
        proto.STRING,
        number=6,
    )
    inherited: bool = proto.Field(
        proto.BOOL,
        number=5,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
