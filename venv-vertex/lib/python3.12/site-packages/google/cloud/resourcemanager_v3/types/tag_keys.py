














from __future__ import annotations

from typing import MutableMapping, MutableSequence

from google.protobuf import field_mask_pb2  
from google.protobuf import timestamp_pb2  
import proto  

__protobuf__ = proto.module(
    package="google.cloud.resourcemanager.v3",
    manifest={
        "Purpose",
        "TagKey",
        "ListTagKeysRequest",
        "ListTagKeysResponse",
        "GetTagKeyRequest",
        "GetNamespacedTagKeyRequest",
        "CreateTagKeyRequest",
        "CreateTagKeyMetadata",
        "UpdateTagKeyRequest",
        "UpdateTagKeyMetadata",
        "DeleteTagKeyRequest",
        "DeleteTagKeyMetadata",
    },
)


class Purpose(proto.Enum):
    r
    PURPOSE_UNSPECIFIED = 0
    GCE_FIREWALL = 1


class TagKey(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    parent: str = proto.Field(
        proto.STRING,
        number=2,
    )
    short_name: str = proto.Field(
        proto.STRING,
        number=3,
    )
    namespaced_name: str = proto.Field(
        proto.STRING,
        number=4,
    )
    description: str = proto.Field(
        proto.STRING,
        number=5,
    )
    create_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=6,
        message=timestamp_pb2.Timestamp,
    )
    update_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=7,
        message=timestamp_pb2.Timestamp,
    )
    etag: str = proto.Field(
        proto.STRING,
        number=8,
    )
    purpose: "Purpose" = proto.Field(
        proto.ENUM,
        number=11,
        enum="Purpose",
    )
    purpose_data: MutableMapping[str, str] = proto.MapField(
        proto.STRING,
        proto.STRING,
        number=12,
    )


class ListTagKeysRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )


class ListTagKeysResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    tag_keys: MutableSequence["TagKey"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="TagKey",
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class GetTagKeyRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class GetNamespacedTagKeyRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CreateTagKeyRequest(proto.Message):
    r

    tag_key: "TagKey" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="TagKey",
    )
    validate_only: bool = proto.Field(
        proto.BOOL,
        number=2,
    )


class CreateTagKeyMetadata(proto.Message):
    r


class UpdateTagKeyRequest(proto.Message):
    r

    tag_key: "TagKey" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="TagKey",
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )
    validate_only: bool = proto.Field(
        proto.BOOL,
        number=3,
    )


class UpdateTagKeyMetadata(proto.Message):
    r


class DeleteTagKeyRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    validate_only: bool = proto.Field(
        proto.BOOL,
        number=2,
    )
    etag: str = proto.Field(
        proto.STRING,
        number=3,
    )


class DeleteTagKeyMetadata(proto.Message):
    r


__all__ = tuple(sorted(__protobuf__.manifest))
