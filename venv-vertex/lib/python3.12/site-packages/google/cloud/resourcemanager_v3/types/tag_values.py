














from __future__ import annotations

from typing import MutableMapping, MutableSequence

from google.protobuf import field_mask_pb2  
from google.protobuf import timestamp_pb2  
import proto  

__protobuf__ = proto.module(
    package="google.cloud.resourcemanager.v3",
    manifest={
        "TagValue",
        "ListTagValuesRequest",
        "ListTagValuesResponse",
        "GetTagValueRequest",
        "GetNamespacedTagValueRequest",
        "CreateTagValueRequest",
        "CreateTagValueMetadata",
        "UpdateTagValueRequest",
        "UpdateTagValueMetadata",
        "DeleteTagValueRequest",
        "DeleteTagValueMetadata",
    },
)


class TagValue(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    parent: str = proto.Field(
        proto.STRING,
        number=2,
    )
    short_name: str = proto.Field(
        proto.STRING,
        number=3,
    )
    namespaced_name: str = proto.Field(
        proto.STRING,
        number=4,
    )
    description: str = proto.Field(
        proto.STRING,
        number=5,
    )
    create_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=6,
        message=timestamp_pb2.Timestamp,
    )
    update_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=7,
        message=timestamp_pb2.Timestamp,
    )
    etag: str = proto.Field(
        proto.STRING,
        number=8,
    )


class ListTagValuesRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )


class ListTagValuesResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    tag_values: MutableSequence["TagValue"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="TagValue",
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class GetTagValueRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class GetNamespacedTagValueRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CreateTagValueRequest(proto.Message):
    r

    tag_value: "TagValue" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="TagValue",
    )
    validate_only: bool = proto.Field(
        proto.BOOL,
        number=2,
    )


class CreateTagValueMetadata(proto.Message):
    r


class UpdateTagValueRequest(proto.Message):
    r

    tag_value: "TagValue" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="TagValue",
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )
    validate_only: bool = proto.Field(
        proto.BOOL,
        number=3,
    )


class UpdateTagValueMetadata(proto.Message):
    r


class DeleteTagValueRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    validate_only: bool = proto.Field(
        proto.BOOL,
        number=2,
    )
    etag: str = proto.Field(
        proto.STRING,
        number=3,
    )


class DeleteTagValueMetadata(proto.Message):
    r


__all__ = tuple(sorted(__protobuf__.manifest))
