














from collections import OrderedDict
import logging as std_logging
import re
from typing import (
    Callable,
    Dict,
    Mapping,
    MutableMapping,
    MutableSequence,
    Optional,
    Sequence,
    Tuple,
    Type,
    Union,
)

from google.api_core import exceptions as core_exceptions
from google.api_core import gapic_v1
from google.api_core import retry_async as retries
from google.api_core.client_options import ClientOptions
from google.auth import credentials as ga_credentials  
from google.oauth2 import service_account  

from google.cloud.resourcemanager_v3 import gapic_version as package_version

try:
    OptionalRetry = Union[retries.AsyncRetry, gapic_v1.method._MethodDefault, None]
except AttributeError:  
    OptionalRetry = Union[retries.AsyncRetry, object, None]  

from google.api_core import operation  
from google.api_core import operation_async  
from google.longrunning import operations_pb2  
from google.protobuf import empty_pb2  

from google.cloud.resourcemanager_v3.services.tag_bindings import pagers
from google.cloud.resourcemanager_v3.types import tag_bindings

from .client import TagBindingsClient
from .transports.base import DEFAULT_CLIENT_INFO, TagBindingsTransport
from .transports.grpc_asyncio import TagBindingsGrpcAsyncIOTransport

try:
    from google.api_core import client_logging  

    CLIENT_LOGGING_SUPPORTED = True  
except ImportError:  
    CLIENT_LOGGING_SUPPORTED = False

_LOGGER = std_logging.getLogger(__name__)


class TagBindingsAsyncClient:
    

    _client: TagBindingsClient

    
    
    DEFAULT_ENDPOINT = TagBindingsClient.DEFAULT_ENDPOINT
    DEFAULT_MTLS_ENDPOINT = TagBindingsClient.DEFAULT_MTLS_ENDPOINT
    _DEFAULT_ENDPOINT_TEMPLATE = TagBindingsClient._DEFAULT_ENDPOINT_TEMPLATE
    _DEFAULT_UNIVERSE = TagBindingsClient._DEFAULT_UNIVERSE

    tag_binding_path = staticmethod(TagBindingsClient.tag_binding_path)
    parse_tag_binding_path = staticmethod(TagBindingsClient.parse_tag_binding_path)
    tag_key_path = staticmethod(TagBindingsClient.tag_key_path)
    parse_tag_key_path = staticmethod(TagBindingsClient.parse_tag_key_path)
    tag_value_path = staticmethod(TagBindingsClient.tag_value_path)
    parse_tag_value_path = staticmethod(TagBindingsClient.parse_tag_value_path)
    common_billing_account_path = staticmethod(
        TagBindingsClient.common_billing_account_path
    )
    parse_common_billing_account_path = staticmethod(
        TagBindingsClient.parse_common_billing_account_path
    )
    common_folder_path = staticmethod(TagBindingsClient.common_folder_path)
    parse_common_folder_path = staticmethod(TagBindingsClient.parse_common_folder_path)
    common_organization_path = staticmethod(TagBindingsClient.common_organization_path)
    parse_common_organization_path = staticmethod(
        TagBindingsClient.parse_common_organization_path
    )
    common_project_path = staticmethod(TagBindingsClient.common_project_path)
    parse_common_project_path = staticmethod(
        TagBindingsClient.parse_common_project_path
    )
    common_location_path = staticmethod(TagBindingsClient.common_location_path)
    parse_common_location_path = staticmethod(
        TagBindingsClient.parse_common_location_path
    )

    @classmethod
    def from_service_account_info(cls, info: dict, *args, **kwargs):
        
        return TagBindingsClient.from_service_account_info.__func__(TagBindingsAsyncClient, info, *args, **kwargs)  

    @classmethod
    def from_service_account_file(cls, filename: str, *args, **kwargs):
        
        return TagBindingsClient.from_service_account_file.__func__(TagBindingsAsyncClient, filename, *args, **kwargs)  

    from_service_account_json = from_service_account_file

    @classmethod
    def get_mtls_endpoint_and_cert_source(
        cls, client_options: Optional[ClientOptions] = None
    ):
        
        return TagBindingsClient.get_mtls_endpoint_and_cert_source(client_options)  

    @property
    def transport(self) -> TagBindingsTransport:
        
        return self._client.transport

    @property
    def api_endpoint(self):
        
        return self._client._api_endpoint

    @property
    def universe_domain(self) -> str:
        
        return self._client._universe_domain

    get_transport_class = TagBindingsClient.get_transport_class

    def __init__(
        self,
        *,
        credentials: Optional[ga_credentials.Credentials] = None,
        transport: Optional[
            Union[str, TagBindingsTransport, Callable[..., TagBindingsTransport]]
        ] = "grpc_asyncio",
        client_options: Optional[ClientOptions] = None,
        client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
    ) -> None:
        
        self._client = TagBindingsClient(
            credentials=credentials,
            transport=transport,
            client_options=client_options,
            client_info=client_info,
        )

        if CLIENT_LOGGING_SUPPORTED and _LOGGER.isEnabledFor(
            std_logging.DEBUG
        ):  
            _LOGGER.debug(
                "Created client `google.cloud.resourcemanager_v3.TagBindingsAsyncClient`.",
                extra={
                    "serviceName": "google.cloud.resourcemanager.v3.TagBindings",
                    "universeDomain": getattr(
                        self._client._transport._credentials, "universe_domain", ""
                    ),
                    "credentialsType": f"{type(self._client._transport._credentials).__module__}.{type(self._client._transport._credentials).__qualname__}",
                    "credentialsInfo": getattr(
                        self.transport._credentials, "get_cred_info", lambda: None
                    )(),
                }
                if hasattr(self._client._transport, "_credentials")
                else {
                    "serviceName": "google.cloud.resourcemanager.v3.TagBindings",
                    "credentialsType": None,
                },
            )

    async def list_tag_bindings(
        self,
        request: Optional[Union[tag_bindings.ListTagBindingsRequest, dict]] = None,
        *,
        parent: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> pagers.ListTagBindingsAsyncPager:
        r
        
        
        
        flattened_params = [parent]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, tag_bindings.ListTagBindingsRequest):
            request = tag_bindings.ListTagBindingsRequest(request)

        
        
        if parent is not None:
            request.parent = parent

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.list_tag_bindings
        ]

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        
        response = pagers.ListTagBindingsAsyncPager(
            method=rpc,
            request=request,
            response=response,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def create_tag_binding(
        self,
        request: Optional[Union[tag_bindings.CreateTagBindingRequest, dict]] = None,
        *,
        tag_binding: Optional[tag_bindings.TagBinding] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> operation_async.AsyncOperation:
        r
        
        
        
        flattened_params = [tag_binding]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, tag_bindings.CreateTagBindingRequest):
            request = tag_bindings.CreateTagBindingRequest(request)

        
        
        if tag_binding is not None:
            request.tag_binding = tag_binding

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.create_tag_binding
        ]

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        response = operation_async.from_gapic(
            response,
            self._client._transport.operations_client,
            tag_bindings.TagBinding,
            metadata_type=tag_bindings.CreateTagBindingMetadata,
        )

        
        return response

    async def delete_tag_binding(
        self,
        request: Optional[Union[tag_bindings.DeleteTagBindingRequest, dict]] = None,
        *,
        name: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> operation_async.AsyncOperation:
        r
        
        
        
        flattened_params = [name]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, tag_bindings.DeleteTagBindingRequest):
            request = tag_bindings.DeleteTagBindingRequest(request)

        
        
        if name is not None:
            request.name = name

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.delete_tag_binding
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        response = operation_async.from_gapic(
            response,
            self._client._transport.operations_client,
            empty_pb2.Empty,
            metadata_type=tag_bindings.DeleteTagBindingMetadata,
        )

        
        return response

    async def list_effective_tags(
        self,
        request: Optional[Union[tag_bindings.ListEffectiveTagsRequest, dict]] = None,
        *,
        parent: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> pagers.ListEffectiveTagsAsyncPager:
        r
        
        
        
        flattened_params = [parent]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, tag_bindings.ListEffectiveTagsRequest):
            request = tag_bindings.ListEffectiveTagsRequest(request)

        
        
        if parent is not None:
            request.parent = parent

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.list_effective_tags
        ]

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        
        response = pagers.ListEffectiveTagsAsyncPager(
            method=rpc,
            request=request,
            response=response,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def get_operation(
        self,
        request: Optional[operations_pb2.GetOperationRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> operations_pb2.Operation:
        r
        
        
        
        if isinstance(request, dict):
            request = operations_pb2.GetOperationRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.get_operation]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def __aenter__(self) -> "TagBindingsAsyncClient":
        return self

    async def __aexit__(self, exc_type, exc, tb):
        await self.transport.close()


DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo(
    gapic_version=package_version.__version__
)


__all__ = ("TagBindingsAsyncClient",)
