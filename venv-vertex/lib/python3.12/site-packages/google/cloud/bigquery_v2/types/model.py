














import proto  

from google.cloud.bigquery_v2.types import encryption_config
from google.cloud.bigquery_v2.types import model_reference as gcb_model_reference
from google.cloud.bigquery_v2.types import standard_sql
from google.cloud.bigquery_v2.types import table_reference
from google.protobuf import timestamp_pb2  
from google.protobuf import wrappers_pb2  


__protobuf__ = proto.module(
    package="google.cloud.bigquery.v2",
    manifest={
        "Model",
        "GetModelRequest",
        "PatchModelRequest",
        "DeleteModelRequest",
        "ListModelsRequest",
        "ListModelsResponse",
    },
)


class Model(proto.Message):
    r

    class ModelType(proto.Enum):
        r
        MODEL_TYPE_UNSPECIFIED = 0
        LINEAR_REGRESSION = 1
        LOGISTIC_REGRESSION = 2
        KMEANS = 3
        MATRIX_FACTORIZATION = 4
        DNN_CLASSIFIER = 5
        TENSORFLOW = 6
        DNN_REGRESSOR = 7
        BOOSTED_TREE_REGRESSOR = 9
        BOOSTED_TREE_CLASSIFIER = 10
        ARIMA = 11
        AUTOML_REGRESSOR = 12
        AUTOML_CLASSIFIER = 13
        ARIMA_PLUS = 19

    class LossType(proto.Enum):
        r
        LOSS_TYPE_UNSPECIFIED = 0
        MEAN_SQUARED_LOSS = 1
        MEAN_LOG_LOSS = 2

    class DistanceType(proto.Enum):
        r
        DISTANCE_TYPE_UNSPECIFIED = 0
        EUCLIDEAN = 1
        COSINE = 2

    class DataSplitMethod(proto.Enum):
        r
        DATA_SPLIT_METHOD_UNSPECIFIED = 0
        RANDOM = 1
        CUSTOM = 2
        SEQUENTIAL = 3
        NO_SPLIT = 4
        AUTO_SPLIT = 5

    class DataFrequency(proto.Enum):
        r
        DATA_FREQUENCY_UNSPECIFIED = 0
        AUTO_FREQUENCY = 1
        YEARLY = 2
        QUARTERLY = 3
        MONTHLY = 4
        WEEKLY = 5
        DAILY = 6
        HOURLY = 7
        PER_MINUTE = 8

    class HolidayRegion(proto.Enum):
        r
        HOLIDAY_REGION_UNSPECIFIED = 0
        GLOBAL = 1
        NA = 2
        JAPAC = 3
        EMEA = 4
        LAC = 5
        AE = 6
        AR = 7
        AT = 8
        AU = 9
        BE = 10
        BR = 11
        CA = 12
        CH = 13
        CL = 14
        CN = 15
        CO = 16
        CS = 17
        CZ = 18
        DE = 19
        DK = 20
        DZ = 21
        EC = 22
        EE = 23
        EG = 24
        ES = 25
        FI = 26
        FR = 27
        GB = 28
        GR = 29
        HK = 30
        HU = 31
        ID = 32
        IE = 33
        IL = 34
        IN = 35
        IR = 36
        IT = 37
        JP = 38
        KR = 39
        LV = 40
        MA = 41
        MX = 42
        MY = 43
        NG = 44
        NL = 45
        NO = 46
        NZ = 47
        PE = 48
        PH = 49
        PK = 50
        PL = 51
        PT = 52
        RO = 53
        RS = 54
        RU = 55
        SA = 56
        SE = 57
        SG = 58
        SI = 59
        SK = 60
        TH = 61
        TR = 62
        TW = 63
        UA = 64
        US = 65
        VE = 66
        VN = 67
        ZA = 68

    class LearnRateStrategy(proto.Enum):
        r
        LEARN_RATE_STRATEGY_UNSPECIFIED = 0
        LINE_SEARCH = 1
        CONSTANT = 2

    class OptimizationStrategy(proto.Enum):
        r
        OPTIMIZATION_STRATEGY_UNSPECIFIED = 0
        BATCH_GRADIENT_DESCENT = 1
        NORMAL_EQUATION = 2

    class FeedbackType(proto.Enum):
        r
        FEEDBACK_TYPE_UNSPECIFIED = 0
        IMPLICIT = 1
        EXPLICIT = 2

    class SeasonalPeriod(proto.Message):
        r

        class SeasonalPeriodType(proto.Enum):
            r
            SEASONAL_PERIOD_TYPE_UNSPECIFIED = 0
            NO_SEASONALITY = 1
            DAILY = 2
            WEEKLY = 3
            MONTHLY = 4
            QUARTERLY = 5
            YEARLY = 6

    class KmeansEnums(proto.Message):
        r

        class KmeansInitializationMethod(proto.Enum):
            r
            KMEANS_INITIALIZATION_METHOD_UNSPECIFIED = 0
            RANDOM = 1
            CUSTOM = 2
            KMEANS_PLUS_PLUS = 3

    class RegressionMetrics(proto.Message):
        r

        mean_absolute_error = proto.Field(
            proto.MESSAGE,
            number=1,
            message=wrappers_pb2.DoubleValue,
        )
        mean_squared_error = proto.Field(
            proto.MESSAGE,
            number=2,
            message=wrappers_pb2.DoubleValue,
        )
        mean_squared_log_error = proto.Field(
            proto.MESSAGE,
            number=3,
            message=wrappers_pb2.DoubleValue,
        )
        median_absolute_error = proto.Field(
            proto.MESSAGE,
            number=4,
            message=wrappers_pb2.DoubleValue,
        )
        r_squared = proto.Field(
            proto.MESSAGE,
            number=5,
            message=wrappers_pb2.DoubleValue,
        )

    class AggregateClassificationMetrics(proto.Message):
        r

        precision = proto.Field(
            proto.MESSAGE,
            number=1,
            message=wrappers_pb2.DoubleValue,
        )
        recall = proto.Field(
            proto.MESSAGE,
            number=2,
            message=wrappers_pb2.DoubleValue,
        )
        accuracy = proto.Field(
            proto.MESSAGE,
            number=3,
            message=wrappers_pb2.DoubleValue,
        )
        threshold = proto.Field(
            proto.MESSAGE,
            number=4,
            message=wrappers_pb2.DoubleValue,
        )
        f1_score = proto.Field(
            proto.MESSAGE,
            number=5,
            message=wrappers_pb2.DoubleValue,
        )
        log_loss = proto.Field(
            proto.MESSAGE,
            number=6,
            message=wrappers_pb2.DoubleValue,
        )
        roc_auc = proto.Field(
            proto.MESSAGE,
            number=7,
            message=wrappers_pb2.DoubleValue,
        )

    class BinaryClassificationMetrics(proto.Message):
        r

        class BinaryConfusionMatrix(proto.Message):
            r

            positive_class_threshold = proto.Field(
                proto.MESSAGE,
                number=1,
                message=wrappers_pb2.DoubleValue,
            )
            true_positives = proto.Field(
                proto.MESSAGE,
                number=2,
                message=wrappers_pb2.Int64Value,
            )
            false_positives = proto.Field(
                proto.MESSAGE,
                number=3,
                message=wrappers_pb2.Int64Value,
            )
            true_negatives = proto.Field(
                proto.MESSAGE,
                number=4,
                message=wrappers_pb2.Int64Value,
            )
            false_negatives = proto.Field(
                proto.MESSAGE,
                number=5,
                message=wrappers_pb2.Int64Value,
            )
            precision = proto.Field(
                proto.MESSAGE,
                number=6,
                message=wrappers_pb2.DoubleValue,
            )
            recall = proto.Field(
                proto.MESSAGE,
                number=7,
                message=wrappers_pb2.DoubleValue,
            )
            f1_score = proto.Field(
                proto.MESSAGE,
                number=8,
                message=wrappers_pb2.DoubleValue,
            )
            accuracy = proto.Field(
                proto.MESSAGE,
                number=9,
                message=wrappers_pb2.DoubleValue,
            )

        aggregate_classification_metrics = proto.Field(
            proto.MESSAGE,
            number=1,
            message="Model.AggregateClassificationMetrics",
        )
        binary_confusion_matrix_list = proto.RepeatedField(
            proto.MESSAGE,
            number=2,
            message="Model.BinaryClassificationMetrics.BinaryConfusionMatrix",
        )
        positive_label = proto.Field(
            proto.STRING,
            number=3,
        )
        negative_label = proto.Field(
            proto.STRING,
            number=4,
        )

    class MultiClassClassificationMetrics(proto.Message):
        r

        class ConfusionMatrix(proto.Message):
            r

            class Entry(proto.Message):
                r

                predicted_label = proto.Field(
                    proto.STRING,
                    number=1,
                )
                item_count = proto.Field(
                    proto.MESSAGE,
                    number=2,
                    message=wrappers_pb2.Int64Value,
                )

            class Row(proto.Message):
                r

                actual_label = proto.Field(
                    proto.STRING,
                    number=1,
                )
                entries = proto.RepeatedField(
                    proto.MESSAGE,
                    number=2,
                    message="Model.MultiClassClassificationMetrics.ConfusionMatrix.Entry",
                )

            confidence_threshold = proto.Field(
                proto.MESSAGE,
                number=1,
                message=wrappers_pb2.DoubleValue,
            )
            rows = proto.RepeatedField(
                proto.MESSAGE,
                number=2,
                message="Model.MultiClassClassificationMetrics.ConfusionMatrix.Row",
            )

        aggregate_classification_metrics = proto.Field(
            proto.MESSAGE,
            number=1,
            message="Model.AggregateClassificationMetrics",
        )
        confusion_matrix_list = proto.RepeatedField(
            proto.MESSAGE,
            number=2,
            message="Model.MultiClassClassificationMetrics.ConfusionMatrix",
        )

    class ClusteringMetrics(proto.Message):
        r

        class Cluster(proto.Message):
            r

            class FeatureValue(proto.Message):
                r

                class CategoricalValue(proto.Message):
                    r

                    class CategoryCount(proto.Message):
                        r

                        category = proto.Field(
                            proto.STRING,
                            number=1,
                        )
                        count = proto.Field(
                            proto.MESSAGE,
                            number=2,
                            message=wrappers_pb2.Int64Value,
                        )

                    category_counts = proto.RepeatedField(
                        proto.MESSAGE,
                        number=1,
                        message="Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue.CategoryCount",
                    )

                feature_column = proto.Field(
                    proto.STRING,
                    number=1,
                )
                numerical_value = proto.Field(
                    proto.MESSAGE,
                    number=2,
                    oneof="value",
                    message=wrappers_pb2.DoubleValue,
                )
                categorical_value = proto.Field(
                    proto.MESSAGE,
                    number=3,
                    oneof="value",
                    message="Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue",
                )

            centroid_id = proto.Field(
                proto.INT64,
                number=1,
            )
            feature_values = proto.RepeatedField(
                proto.MESSAGE,
                number=2,
                message="Model.ClusteringMetrics.Cluster.FeatureValue",
            )
            count = proto.Field(
                proto.MESSAGE,
                number=3,
                message=wrappers_pb2.Int64Value,
            )

        davies_bouldin_index = proto.Field(
            proto.MESSAGE,
            number=1,
            message=wrappers_pb2.DoubleValue,
        )
        mean_squared_distance = proto.Field(
            proto.MESSAGE,
            number=2,
            message=wrappers_pb2.DoubleValue,
        )
        clusters = proto.RepeatedField(
            proto.MESSAGE,
            number=3,
            message="Model.ClusteringMetrics.Cluster",
        )

    class RankingMetrics(proto.Message):
        r

        mean_average_precision = proto.Field(
            proto.MESSAGE,
            number=1,
            message=wrappers_pb2.DoubleValue,
        )
        mean_squared_error = proto.Field(
            proto.MESSAGE,
            number=2,
            message=wrappers_pb2.DoubleValue,
        )
        normalized_discounted_cumulative_gain = proto.Field(
            proto.MESSAGE,
            number=3,
            message=wrappers_pb2.DoubleValue,
        )
        average_rank = proto.Field(
            proto.MESSAGE,
            number=4,
            message=wrappers_pb2.DoubleValue,
        )

    class ArimaForecastingMetrics(proto.Message):
        r

        class ArimaSingleModelForecastingMetrics(proto.Message):
            r

            non_seasonal_order = proto.Field(
                proto.MESSAGE,
                number=1,
                message="Model.ArimaOrder",
            )
            arima_fitting_metrics = proto.Field(
                proto.MESSAGE,
                number=2,
                message="Model.ArimaFittingMetrics",
            )
            has_drift = proto.Field(
                proto.BOOL,
                number=3,
            )
            time_series_id = proto.Field(
                proto.STRING,
                number=4,
            )
            time_series_ids = proto.RepeatedField(
                proto.STRING,
                number=9,
            )
            seasonal_periods = proto.RepeatedField(
                proto.ENUM,
                number=5,
                enum="Model.SeasonalPeriod.SeasonalPeriodType",
            )
            has_holiday_effect = proto.Field(
                proto.MESSAGE,
                number=6,
                message=wrappers_pb2.BoolValue,
            )
            has_spikes_and_dips = proto.Field(
                proto.MESSAGE,
                number=7,
                message=wrappers_pb2.BoolValue,
            )
            has_step_changes = proto.Field(
                proto.MESSAGE,
                number=8,
                message=wrappers_pb2.BoolValue,
            )

        non_seasonal_order = proto.RepeatedField(
            proto.MESSAGE,
            number=1,
            message="Model.ArimaOrder",
        )
        arima_fitting_metrics = proto.RepeatedField(
            proto.MESSAGE,
            number=2,
            message="Model.ArimaFittingMetrics",
        )
        seasonal_periods = proto.RepeatedField(
            proto.ENUM,
            number=3,
            enum="Model.SeasonalPeriod.SeasonalPeriodType",
        )
        has_drift = proto.RepeatedField(
            proto.BOOL,
            number=4,
        )
        time_series_id = proto.RepeatedField(
            proto.STRING,
            number=5,
        )
        arima_single_model_forecasting_metrics = proto.RepeatedField(
            proto.MESSAGE,
            number=6,
            message="Model.ArimaForecastingMetrics.ArimaSingleModelForecastingMetrics",
        )

    class EvaluationMetrics(proto.Message):
        r

        regression_metrics = proto.Field(
            proto.MESSAGE,
            number=1,
            oneof="metrics",
            message="Model.RegressionMetrics",
        )
        binary_classification_metrics = proto.Field(
            proto.MESSAGE,
            number=2,
            oneof="metrics",
            message="Model.BinaryClassificationMetrics",
        )
        multi_class_classification_metrics = proto.Field(
            proto.MESSAGE,
            number=3,
            oneof="metrics",
            message="Model.MultiClassClassificationMetrics",
        )
        clustering_metrics = proto.Field(
            proto.MESSAGE,
            number=4,
            oneof="metrics",
            message="Model.ClusteringMetrics",
        )
        ranking_metrics = proto.Field(
            proto.MESSAGE,
            number=5,
            oneof="metrics",
            message="Model.RankingMetrics",
        )
        arima_forecasting_metrics = proto.Field(
            proto.MESSAGE,
            number=6,
            oneof="metrics",
            message="Model.ArimaForecastingMetrics",
        )

    class DataSplitResult(proto.Message):
        r

        training_table = proto.Field(
            proto.MESSAGE,
            number=1,
            message=table_reference.TableReference,
        )
        evaluation_table = proto.Field(
            proto.MESSAGE,
            number=2,
            message=table_reference.TableReference,
        )

    class ArimaOrder(proto.Message):
        r

        p = proto.Field(
            proto.INT64,
            number=1,
        )
        d = proto.Field(
            proto.INT64,
            number=2,
        )
        q = proto.Field(
            proto.INT64,
            number=3,
        )

    class ArimaFittingMetrics(proto.Message):
        r

        log_likelihood = proto.Field(
            proto.DOUBLE,
            number=1,
        )
        aic = proto.Field(
            proto.DOUBLE,
            number=2,
        )
        variance = proto.Field(
            proto.DOUBLE,
            number=3,
        )

    class GlobalExplanation(proto.Message):
        r

        class Explanation(proto.Message):
            r

            feature_name = proto.Field(
                proto.STRING,
                number=1,
            )
            attribution = proto.Field(
                proto.MESSAGE,
                number=2,
                message=wrappers_pb2.DoubleValue,
            )

        explanations = proto.RepeatedField(
            proto.MESSAGE,
            number=1,
            message="Model.GlobalExplanation.Explanation",
        )
        class_label = proto.Field(
            proto.STRING,
            number=2,
        )

    class TrainingRun(proto.Message):
        r

        class TrainingOptions(proto.Message):
            r

            max_iterations = proto.Field(
                proto.INT64,
                number=1,
            )
            loss_type = proto.Field(
                proto.ENUM,
                number=2,
                enum="Model.LossType",
            )
            learn_rate = proto.Field(
                proto.DOUBLE,
                number=3,
            )
            l1_regularization = proto.Field(
                proto.MESSAGE,
                number=4,
                message=wrappers_pb2.DoubleValue,
            )
            l2_regularization = proto.Field(
                proto.MESSAGE,
                number=5,
                message=wrappers_pb2.DoubleValue,
            )
            min_relative_progress = proto.Field(
                proto.MESSAGE,
                number=6,
                message=wrappers_pb2.DoubleValue,
            )
            warm_start = proto.Field(
                proto.MESSAGE,
                number=7,
                message=wrappers_pb2.BoolValue,
            )
            early_stop = proto.Field(
                proto.MESSAGE,
                number=8,
                message=wrappers_pb2.BoolValue,
            )
            input_label_columns = proto.RepeatedField(
                proto.STRING,
                number=9,
            )
            data_split_method = proto.Field(
                proto.ENUM,
                number=10,
                enum="Model.DataSplitMethod",
            )
            data_split_eval_fraction = proto.Field(
                proto.DOUBLE,
                number=11,
            )
            data_split_column = proto.Field(
                proto.STRING,
                number=12,
            )
            learn_rate_strategy = proto.Field(
                proto.ENUM,
                number=13,
                enum="Model.LearnRateStrategy",
            )
            initial_learn_rate = proto.Field(
                proto.DOUBLE,
                number=16,
            )
            label_class_weights = proto.MapField(
                proto.STRING,
                proto.DOUBLE,
                number=17,
            )
            user_column = proto.Field(
                proto.STRING,
                number=18,
            )
            item_column = proto.Field(
                proto.STRING,
                number=19,
            )
            distance_type = proto.Field(
                proto.ENUM,
                number=20,
                enum="Model.DistanceType",
            )
            num_clusters = proto.Field(
                proto.INT64,
                number=21,
            )
            model_uri = proto.Field(
                proto.STRING,
                number=22,
            )
            optimization_strategy = proto.Field(
                proto.ENUM,
                number=23,
                enum="Model.OptimizationStrategy",
            )
            hidden_units = proto.RepeatedField(
                proto.INT64,
                number=24,
            )
            batch_size = proto.Field(
                proto.INT64,
                number=25,
            )
            dropout = proto.Field(
                proto.MESSAGE,
                number=26,
                message=wrappers_pb2.DoubleValue,
            )
            max_tree_depth = proto.Field(
                proto.INT64,
                number=27,
            )
            subsample = proto.Field(
                proto.DOUBLE,
                number=28,
            )
            min_split_loss = proto.Field(
                proto.MESSAGE,
                number=29,
                message=wrappers_pb2.DoubleValue,
            )
            num_factors = proto.Field(
                proto.INT64,
                number=30,
            )
            feedback_type = proto.Field(
                proto.ENUM,
                number=31,
                enum="Model.FeedbackType",
            )
            wals_alpha = proto.Field(
                proto.MESSAGE,
                number=32,
                message=wrappers_pb2.DoubleValue,
            )
            kmeans_initialization_method = proto.Field(
                proto.ENUM,
                number=33,
                enum="Model.KmeansEnums.KmeansInitializationMethod",
            )
            kmeans_initialization_column = proto.Field(
                proto.STRING,
                number=34,
            )
            time_series_timestamp_column = proto.Field(
                proto.STRING,
                number=35,
            )
            time_series_data_column = proto.Field(
                proto.STRING,
                number=36,
            )
            auto_arima = proto.Field(
                proto.BOOL,
                number=37,
            )
            non_seasonal_order = proto.Field(
                proto.MESSAGE,
                number=38,
                message="Model.ArimaOrder",
            )
            data_frequency = proto.Field(
                proto.ENUM,
                number=39,
                enum="Model.DataFrequency",
            )
            include_drift = proto.Field(
                proto.BOOL,
                number=41,
            )
            holiday_region = proto.Field(
                proto.ENUM,
                number=42,
                enum="Model.HolidayRegion",
            )
            time_series_id_column = proto.Field(
                proto.STRING,
                number=43,
            )
            time_series_id_columns = proto.RepeatedField(
                proto.STRING,
                number=51,
            )
            horizon = proto.Field(
                proto.INT64,
                number=44,
            )
            preserve_input_structs = proto.Field(
                proto.BOOL,
                number=45,
            )
            auto_arima_max_order = proto.Field(
                proto.INT64,
                number=46,
            )
            decompose_time_series = proto.Field(
                proto.MESSAGE,
                number=50,
                message=wrappers_pb2.BoolValue,
            )
            clean_spikes_and_dips = proto.Field(
                proto.MESSAGE,
                number=52,
                message=wrappers_pb2.BoolValue,
            )
            adjust_step_changes = proto.Field(
                proto.MESSAGE,
                number=53,
                message=wrappers_pb2.BoolValue,
            )

        class IterationResult(proto.Message):
            r

            class ClusterInfo(proto.Message):
                r

                centroid_id = proto.Field(
                    proto.INT64,
                    number=1,
                )
                cluster_radius = proto.Field(
                    proto.MESSAGE,
                    number=2,
                    message=wrappers_pb2.DoubleValue,
                )
                cluster_size = proto.Field(
                    proto.MESSAGE,
                    number=3,
                    message=wrappers_pb2.Int64Value,
                )

            class ArimaResult(proto.Message):
                r

                class ArimaCoefficients(proto.Message):
                    r

                    auto_regressive_coefficients = proto.RepeatedField(
                        proto.DOUBLE,
                        number=1,
                    )
                    moving_average_coefficients = proto.RepeatedField(
                        proto.DOUBLE,
                        number=2,
                    )
                    intercept_coefficient = proto.Field(
                        proto.DOUBLE,
                        number=3,
                    )

                class ArimaModelInfo(proto.Message):
                    r

                    non_seasonal_order = proto.Field(
                        proto.MESSAGE,
                        number=1,
                        message="Model.ArimaOrder",
                    )
                    arima_coefficients = proto.Field(
                        proto.MESSAGE,
                        number=2,
                        message="Model.TrainingRun.IterationResult.ArimaResult.ArimaCoefficients",
                    )
                    arima_fitting_metrics = proto.Field(
                        proto.MESSAGE,
                        number=3,
                        message="Model.ArimaFittingMetrics",
                    )
                    has_drift = proto.Field(
                        proto.BOOL,
                        number=4,
                    )
                    time_series_id = proto.Field(
                        proto.STRING,
                        number=5,
                    )
                    time_series_ids = proto.RepeatedField(
                        proto.STRING,
                        number=10,
                    )
                    seasonal_periods = proto.RepeatedField(
                        proto.ENUM,
                        number=6,
                        enum="Model.SeasonalPeriod.SeasonalPeriodType",
                    )
                    has_holiday_effect = proto.Field(
                        proto.MESSAGE,
                        number=7,
                        message=wrappers_pb2.BoolValue,
                    )
                    has_spikes_and_dips = proto.Field(
                        proto.MESSAGE,
                        number=8,
                        message=wrappers_pb2.BoolValue,
                    )
                    has_step_changes = proto.Field(
                        proto.MESSAGE,
                        number=9,
                        message=wrappers_pb2.BoolValue,
                    )

                arima_model_info = proto.RepeatedField(
                    proto.MESSAGE,
                    number=1,
                    message="Model.TrainingRun.IterationResult.ArimaResult.ArimaModelInfo",
                )
                seasonal_periods = proto.RepeatedField(
                    proto.ENUM,
                    number=2,
                    enum="Model.SeasonalPeriod.SeasonalPeriodType",
                )

            index = proto.Field(
                proto.MESSAGE,
                number=1,
                message=wrappers_pb2.Int32Value,
            )
            duration_ms = proto.Field(
                proto.MESSAGE,
                number=4,
                message=wrappers_pb2.Int64Value,
            )
            training_loss = proto.Field(
                proto.MESSAGE,
                number=5,
                message=wrappers_pb2.DoubleValue,
            )
            eval_loss = proto.Field(
                proto.MESSAGE,
                number=6,
                message=wrappers_pb2.DoubleValue,
            )
            learn_rate = proto.Field(
                proto.DOUBLE,
                number=7,
            )
            cluster_infos = proto.RepeatedField(
                proto.MESSAGE,
                number=8,
                message="Model.TrainingRun.IterationResult.ClusterInfo",
            )
            arima_result = proto.Field(
                proto.MESSAGE,
                number=9,
                message="Model.TrainingRun.IterationResult.ArimaResult",
            )

        training_options = proto.Field(
            proto.MESSAGE,
            number=1,
            message="Model.TrainingRun.TrainingOptions",
        )
        start_time = proto.Field(
            proto.MESSAGE,
            number=8,
            message=timestamp_pb2.Timestamp,
        )
        results = proto.RepeatedField(
            proto.MESSAGE,
            number=6,
            message="Model.TrainingRun.IterationResult",
        )
        evaluation_metrics = proto.Field(
            proto.MESSAGE,
            number=7,
            message="Model.EvaluationMetrics",
        )
        data_split_result = proto.Field(
            proto.MESSAGE,
            number=9,
            message="Model.DataSplitResult",
        )
        global_explanations = proto.RepeatedField(
            proto.MESSAGE,
            number=10,
            message="Model.GlobalExplanation",
        )

    etag = proto.Field(
        proto.STRING,
        number=1,
    )
    model_reference = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gcb_model_reference.ModelReference,
    )
    creation_time = proto.Field(
        proto.INT64,
        number=5,
    )
    last_modified_time = proto.Field(
        proto.INT64,
        number=6,
    )
    description = proto.Field(
        proto.STRING,
        number=12,
    )
    friendly_name = proto.Field(
        proto.STRING,
        number=14,
    )
    labels = proto.MapField(
        proto.STRING,
        proto.STRING,
        number=15,
    )
    expiration_time = proto.Field(
        proto.INT64,
        number=16,
    )
    location = proto.Field(
        proto.STRING,
        number=13,
    )
    encryption_configuration = proto.Field(
        proto.MESSAGE,
        number=17,
        message=encryption_config.EncryptionConfiguration,
    )
    model_type = proto.Field(
        proto.ENUM,
        number=7,
        enum=ModelType,
    )
    training_runs = proto.RepeatedField(
        proto.MESSAGE,
        number=9,
        message=TrainingRun,
    )
    feature_columns = proto.RepeatedField(
        proto.MESSAGE,
        number=10,
        message=standard_sql.StandardSqlField,
    )
    label_columns = proto.RepeatedField(
        proto.MESSAGE,
        number=11,
        message=standard_sql.StandardSqlField,
    )
    best_trial_id = proto.Field(
        proto.INT64,
        number=19,
    )


class GetModelRequest(proto.Message):
    r

    project_id = proto.Field(
        proto.STRING,
        number=1,
    )
    dataset_id = proto.Field(
        proto.STRING,
        number=2,
    )
    model_id = proto.Field(
        proto.STRING,
        number=3,
    )


class PatchModelRequest(proto.Message):
    r

    project_id = proto.Field(
        proto.STRING,
        number=1,
    )
    dataset_id = proto.Field(
        proto.STRING,
        number=2,
    )
    model_id = proto.Field(
        proto.STRING,
        number=3,
    )
    model = proto.Field(
        proto.MESSAGE,
        number=4,
        message="Model",
    )


class DeleteModelRequest(proto.Message):
    r

    project_id = proto.Field(
        proto.STRING,
        number=1,
    )
    dataset_id = proto.Field(
        proto.STRING,
        number=2,
    )
    model_id = proto.Field(
        proto.STRING,
        number=3,
    )


class ListModelsRequest(proto.Message):
    r

    project_id = proto.Field(
        proto.STRING,
        number=1,
    )
    dataset_id = proto.Field(
        proto.STRING,
        number=2,
    )
    max_results = proto.Field(
        proto.MESSAGE,
        number=3,
        message=wrappers_pb2.UInt32Value,
    )
    page_token = proto.Field(
        proto.STRING,
        number=4,
    )


class ListModelsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    models = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="Model",
    )
    next_page_token = proto.Field(
        proto.STRING,
        number=2,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
