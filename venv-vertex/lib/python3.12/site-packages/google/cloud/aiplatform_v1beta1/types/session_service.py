














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import operation
from google.cloud.aiplatform_v1beta1.types import session as gca_session
from google.protobuf import field_mask_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "CreateSessionRequest",
        "CreateSessionOperationMetadata",
        "GetSessionRequest",
        "ListSessionsRequest",
        "ListSessionsResponse",
        "UpdateSessionRequest",
        "DeleteSessionRequest",
        "ListEventsRequest",
        "ListEventsResponse",
        "AppendEventRequest",
        "AppendEventResponse",
    },
)


class CreateSessionRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    session: gca_session.Session = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_session.Session,
    )


class CreateSessionOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class GetSessionRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListSessionsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=4,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=5,
    )


class ListSessionsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    sessions: MutableSequence[gca_session.Session] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_session.Session,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class UpdateSessionRequest(proto.Message):
    r

    session: gca_session.Session = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_session.Session,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )


class DeleteSessionRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListEventsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )


class ListEventsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    session_events: MutableSequence[gca_session.SessionEvent] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_session.SessionEvent,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class AppendEventRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    event: gca_session.SessionEvent = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_session.SessionEvent,
    )


class AppendEventResponse(proto.Message):
    r


__all__ = tuple(sorted(__protobuf__.manifest))
