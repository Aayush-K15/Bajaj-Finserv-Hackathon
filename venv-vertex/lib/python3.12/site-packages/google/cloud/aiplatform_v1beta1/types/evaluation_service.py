














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import content
from google.cloud.aiplatform_v1beta1.types import io
from google.cloud.aiplatform_v1beta1.types import operation


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "PairwiseChoice",
        "EvaluateDatasetOperationMetadata",
        "EvaluateDatasetResponse",
        "OutputInfo",
        "AggregationOutput",
        "AggregationResult",
        "EvaluateDatasetRequest",
        "OutputConfig",
        "Metric",
        "EvaluationDataset",
        "AutoraterConfig",
        "EvaluateInstancesRequest",
        "EvaluateInstancesResponse",
        "ExactMatchInput",
        "ExactMatchInstance",
        "ExactMatchSpec",
        "ExactMatchResults",
        "ExactMatchMetricValue",
        "BleuInput",
        "BleuInstance",
        "BleuSpec",
        "BleuResults",
        "BleuMetricValue",
        "RougeInput",
        "RougeInstance",
        "RougeSpec",
        "RougeResults",
        "RougeMetricValue",
        "CoherenceInput",
        "CoherenceInstance",
        "CoherenceSpec",
        "CoherenceResult",
        "FluencyInput",
        "FluencyInstance",
        "FluencySpec",
        "FluencyResult",
        "SafetyInput",
        "SafetyInstance",
        "SafetySpec",
        "SafetyResult",
        "GroundednessInput",
        "GroundednessInstance",
        "GroundednessSpec",
        "GroundednessResult",
        "FulfillmentInput",
        "FulfillmentInstance",
        "FulfillmentSpec",
        "FulfillmentResult",
        "SummarizationQualityInput",
        "SummarizationQualityInstance",
        "SummarizationQualitySpec",
        "SummarizationQualityResult",
        "PairwiseSummarizationQualityInput",
        "PairwiseSummarizationQualityInstance",
        "PairwiseSummarizationQualitySpec",
        "PairwiseSummarizationQualityResult",
        "SummarizationHelpfulnessInput",
        "SummarizationHelpfulnessInstance",
        "SummarizationHelpfulnessSpec",
        "SummarizationHelpfulnessResult",
        "SummarizationVerbosityInput",
        "SummarizationVerbosityInstance",
        "SummarizationVerbositySpec",
        "SummarizationVerbosityResult",
        "QuestionAnsweringQualityInput",
        "QuestionAnsweringQualityInstance",
        "QuestionAnsweringQualitySpec",
        "QuestionAnsweringQualityResult",
        "PairwiseQuestionAnsweringQualityInput",
        "PairwiseQuestionAnsweringQualityInstance",
        "PairwiseQuestionAnsweringQualitySpec",
        "PairwiseQuestionAnsweringQualityResult",
        "QuestionAnsweringRelevanceInput",
        "QuestionAnsweringRelevanceInstance",
        "QuestionAnsweringRelevanceSpec",
        "QuestionAnsweringRelevanceResult",
        "QuestionAnsweringHelpfulnessInput",
        "QuestionAnsweringHelpfulnessInstance",
        "QuestionAnsweringHelpfulnessSpec",
        "QuestionAnsweringHelpfulnessResult",
        "QuestionAnsweringCorrectnessInput",
        "QuestionAnsweringCorrectnessInstance",
        "QuestionAnsweringCorrectnessSpec",
        "QuestionAnsweringCorrectnessResult",
        "PointwiseMetricInput",
        "PointwiseMetricInstance",
        "PointwiseMetricSpec",
        "CustomOutputFormatConfig",
        "PointwiseMetricResult",
        "CustomOutput",
        "RawOutput",
        "PairwiseMetricInput",
        "PairwiseMetricInstance",
        "PairwiseMetricSpec",
        "PairwiseMetricResult",
        "ToolCallValidInput",
        "ToolCallValidSpec",
        "ToolCallValidInstance",
        "ToolCallValidResults",
        "ToolCallValidMetricValue",
        "ToolNameMatchInput",
        "ToolNameMatchSpec",
        "ToolNameMatchInstance",
        "ToolNameMatchResults",
        "ToolNameMatchMetricValue",
        "ToolParameterKeyMatchInput",
        "ToolParameterKeyMatchSpec",
        "ToolParameterKeyMatchInstance",
        "ToolParameterKeyMatchResults",
        "ToolParameterKeyMatchMetricValue",
        "ToolParameterKVMatchInput",
        "ToolParameterKVMatchSpec",
        "ToolParameterKVMatchInstance",
        "ToolParameterKVMatchResults",
        "ToolParameterKVMatchMetricValue",
        "CometInput",
        "CometSpec",
        "CometInstance",
        "CometResult",
        "MetricxInput",
        "MetricxSpec",
        "MetricxInstance",
        "MetricxResult",
        "RubricBasedInstructionFollowingInput",
        "RubricBasedInstructionFollowingInstance",
        "RubricBasedInstructionFollowingSpec",
        "RubricBasedInstructionFollowingResult",
        "RubricCritiqueResult",
        "TrajectoryExactMatchInput",
        "TrajectoryExactMatchSpec",
        "TrajectoryExactMatchInstance",
        "TrajectoryExactMatchResults",
        "TrajectoryExactMatchMetricValue",
        "TrajectoryInOrderMatchInput",
        "TrajectoryInOrderMatchSpec",
        "TrajectoryInOrderMatchInstance",
        "TrajectoryInOrderMatchResults",
        "TrajectoryInOrderMatchMetricValue",
        "TrajectoryAnyOrderMatchInput",
        "TrajectoryAnyOrderMatchSpec",
        "TrajectoryAnyOrderMatchInstance",
        "TrajectoryAnyOrderMatchResults",
        "TrajectoryAnyOrderMatchMetricValue",
        "TrajectoryPrecisionInput",
        "TrajectoryPrecisionSpec",
        "TrajectoryPrecisionInstance",
        "TrajectoryPrecisionResults",
        "TrajectoryPrecisionMetricValue",
        "TrajectoryRecallInput",
        "TrajectoryRecallSpec",
        "TrajectoryRecallInstance",
        "TrajectoryRecallResults",
        "TrajectoryRecallMetricValue",
        "TrajectorySingleToolUseInput",
        "TrajectorySingleToolUseSpec",
        "TrajectorySingleToolUseInstance",
        "TrajectorySingleToolUseResults",
        "TrajectorySingleToolUseMetricValue",
        "Trajectory",
        "ToolCall",
        "ContentMap",
    },
)


class PairwiseChoice(proto.Enum):
    r
    PAIRWISE_CHOICE_UNSPECIFIED = 0
    BASELINE = 1
    CANDIDATE = 2
    TIE = 3


class EvaluateDatasetOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class EvaluateDatasetResponse(proto.Message):
    r

    aggregation_output: "AggregationOutput" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="AggregationOutput",
    )
    output_info: "OutputInfo" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="OutputInfo",
    )


class OutputInfo(proto.Message):
    r

    gcs_output_directory: str = proto.Field(
        proto.STRING,
        number=1,
        oneof="output_location",
    )


class AggregationOutput(proto.Message):
    r

    dataset: "EvaluationDataset" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="EvaluationDataset",
    )
    aggregation_results: MutableSequence["AggregationResult"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="AggregationResult",
    )


class AggregationResult(proto.Message):
    r

    pointwise_metric_result: "PointwiseMetricResult" = proto.Field(
        proto.MESSAGE,
        number=5,
        oneof="aggregation_result",
        message="PointwiseMetricResult",
    )
    pairwise_metric_result: "PairwiseMetricResult" = proto.Field(
        proto.MESSAGE,
        number=6,
        oneof="aggregation_result",
        message="PairwiseMetricResult",
    )
    exact_match_metric_value: "ExactMatchMetricValue" = proto.Field(
        proto.MESSAGE,
        number=7,
        oneof="aggregation_result",
        message="ExactMatchMetricValue",
    )
    bleu_metric_value: "BleuMetricValue" = proto.Field(
        proto.MESSAGE,
        number=8,
        oneof="aggregation_result",
        message="BleuMetricValue",
    )
    rouge_metric_value: "RougeMetricValue" = proto.Field(
        proto.MESSAGE,
        number=9,
        oneof="aggregation_result",
        message="RougeMetricValue",
    )
    aggregation_metric: "Metric.AggregationMetric" = proto.Field(
        proto.ENUM,
        number=4,
        enum="Metric.AggregationMetric",
    )


class EvaluateDatasetRequest(proto.Message):
    r

    location: str = proto.Field(
        proto.STRING,
        number=1,
    )
    dataset: "EvaluationDataset" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="EvaluationDataset",
    )
    metrics: MutableSequence["Metric"] = proto.RepeatedField(
        proto.MESSAGE,
        number=3,
        message="Metric",
    )
    output_config: "OutputConfig" = proto.Field(
        proto.MESSAGE,
        number=4,
        message="OutputConfig",
    )
    autorater_config: "AutoraterConfig" = proto.Field(
        proto.MESSAGE,
        number=5,
        message="AutoraterConfig",
    )


class OutputConfig(proto.Message):
    r

    gcs_destination: io.GcsDestination = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="destination",
        message=io.GcsDestination,
    )


class Metric(proto.Message):
    r

    class AggregationMetric(proto.Enum):
        r
        AGGREGATION_METRIC_UNSPECIFIED = 0
        AVERAGE = 1
        MODE = 2
        STANDARD_DEVIATION = 3
        VARIANCE = 4
        MINIMUM = 5
        MAXIMUM = 6
        MEDIAN = 7
        PERCENTILE_P90 = 8
        PERCENTILE_P95 = 9
        PERCENTILE_P99 = 10

    pointwise_metric_spec: "PointwiseMetricSpec" = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="metric_spec",
        message="PointwiseMetricSpec",
    )
    pairwise_metric_spec: "PairwiseMetricSpec" = proto.Field(
        proto.MESSAGE,
        number=3,
        oneof="metric_spec",
        message="PairwiseMetricSpec",
    )
    exact_match_spec: "ExactMatchSpec" = proto.Field(
        proto.MESSAGE,
        number=4,
        oneof="metric_spec",
        message="ExactMatchSpec",
    )
    bleu_spec: "BleuSpec" = proto.Field(
        proto.MESSAGE,
        number=5,
        oneof="metric_spec",
        message="BleuSpec",
    )
    rouge_spec: "RougeSpec" = proto.Field(
        proto.MESSAGE,
        number=6,
        oneof="metric_spec",
        message="RougeSpec",
    )
    aggregation_metrics: MutableSequence[AggregationMetric] = proto.RepeatedField(
        proto.ENUM,
        number=1,
        enum=AggregationMetric,
    )


class EvaluationDataset(proto.Message):
    r

    gcs_source: io.GcsSource = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="source",
        message=io.GcsSource,
    )
    bigquery_source: io.BigQuerySource = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="source",
        message=io.BigQuerySource,
    )


class AutoraterConfig(proto.Message):
    r

    sampling_count: int = proto.Field(
        proto.INT32,
        number=1,
        optional=True,
    )
    flip_enabled: bool = proto.Field(
        proto.BOOL,
        number=2,
        optional=True,
    )
    autorater_model: str = proto.Field(
        proto.STRING,
        number=3,
    )


class EvaluateInstancesRequest(proto.Message):
    r

    exact_match_input: "ExactMatchInput" = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="metric_inputs",
        message="ExactMatchInput",
    )
    bleu_input: "BleuInput" = proto.Field(
        proto.MESSAGE,
        number=3,
        oneof="metric_inputs",
        message="BleuInput",
    )
    rouge_input: "RougeInput" = proto.Field(
        proto.MESSAGE,
        number=4,
        oneof="metric_inputs",
        message="RougeInput",
    )
    fluency_input: "FluencyInput" = proto.Field(
        proto.MESSAGE,
        number=5,
        oneof="metric_inputs",
        message="FluencyInput",
    )
    coherence_input: "CoherenceInput" = proto.Field(
        proto.MESSAGE,
        number=6,
        oneof="metric_inputs",
        message="CoherenceInput",
    )
    safety_input: "SafetyInput" = proto.Field(
        proto.MESSAGE,
        number=8,
        oneof="metric_inputs",
        message="SafetyInput",
    )
    groundedness_input: "GroundednessInput" = proto.Field(
        proto.MESSAGE,
        number=9,
        oneof="metric_inputs",
        message="GroundednessInput",
    )
    fulfillment_input: "FulfillmentInput" = proto.Field(
        proto.MESSAGE,
        number=12,
        oneof="metric_inputs",
        message="FulfillmentInput",
    )
    summarization_quality_input: "SummarizationQualityInput" = proto.Field(
        proto.MESSAGE,
        number=7,
        oneof="metric_inputs",
        message="SummarizationQualityInput",
    )
    pairwise_summarization_quality_input: "PairwiseSummarizationQualityInput" = (
        proto.Field(
            proto.MESSAGE,
            number=23,
            oneof="metric_inputs",
            message="PairwiseSummarizationQualityInput",
        )
    )
    summarization_helpfulness_input: "SummarizationHelpfulnessInput" = proto.Field(
        proto.MESSAGE,
        number=14,
        oneof="metric_inputs",
        message="SummarizationHelpfulnessInput",
    )
    summarization_verbosity_input: "SummarizationVerbosityInput" = proto.Field(
        proto.MESSAGE,
        number=15,
        oneof="metric_inputs",
        message="SummarizationVerbosityInput",
    )
    question_answering_quality_input: "QuestionAnsweringQualityInput" = proto.Field(
        proto.MESSAGE,
        number=10,
        oneof="metric_inputs",
        message="QuestionAnsweringQualityInput",
    )
    pairwise_question_answering_quality_input: "PairwiseQuestionAnsweringQualityInput" = proto.Field(
        proto.MESSAGE,
        number=24,
        oneof="metric_inputs",
        message="PairwiseQuestionAnsweringQualityInput",
    )
    question_answering_relevance_input: "QuestionAnsweringRelevanceInput" = proto.Field(
        proto.MESSAGE,
        number=16,
        oneof="metric_inputs",
        message="QuestionAnsweringRelevanceInput",
    )
    question_answering_helpfulness_input: "QuestionAnsweringHelpfulnessInput" = (
        proto.Field(
            proto.MESSAGE,
            number=17,
            oneof="metric_inputs",
            message="QuestionAnsweringHelpfulnessInput",
        )
    )
    question_answering_correctness_input: "QuestionAnsweringCorrectnessInput" = (
        proto.Field(
            proto.MESSAGE,
            number=18,
            oneof="metric_inputs",
            message="QuestionAnsweringCorrectnessInput",
        )
    )
    pointwise_metric_input: "PointwiseMetricInput" = proto.Field(
        proto.MESSAGE,
        number=28,
        oneof="metric_inputs",
        message="PointwiseMetricInput",
    )
    pairwise_metric_input: "PairwiseMetricInput" = proto.Field(
        proto.MESSAGE,
        number=29,
        oneof="metric_inputs",
        message="PairwiseMetricInput",
    )
    tool_call_valid_input: "ToolCallValidInput" = proto.Field(
        proto.MESSAGE,
        number=19,
        oneof="metric_inputs",
        message="ToolCallValidInput",
    )
    tool_name_match_input: "ToolNameMatchInput" = proto.Field(
        proto.MESSAGE,
        number=20,
        oneof="metric_inputs",
        message="ToolNameMatchInput",
    )
    tool_parameter_key_match_input: "ToolParameterKeyMatchInput" = proto.Field(
        proto.MESSAGE,
        number=21,
        oneof="metric_inputs",
        message="ToolParameterKeyMatchInput",
    )
    tool_parameter_kv_match_input: "ToolParameterKVMatchInput" = proto.Field(
        proto.MESSAGE,
        number=22,
        oneof="metric_inputs",
        message="ToolParameterKVMatchInput",
    )
    comet_input: "CometInput" = proto.Field(
        proto.MESSAGE,
        number=31,
        oneof="metric_inputs",
        message="CometInput",
    )
    metricx_input: "MetricxInput" = proto.Field(
        proto.MESSAGE,
        number=32,
        oneof="metric_inputs",
        message="MetricxInput",
    )
    trajectory_exact_match_input: "TrajectoryExactMatchInput" = proto.Field(
        proto.MESSAGE,
        number=33,
        oneof="metric_inputs",
        message="TrajectoryExactMatchInput",
    )
    trajectory_in_order_match_input: "TrajectoryInOrderMatchInput" = proto.Field(
        proto.MESSAGE,
        number=34,
        oneof="metric_inputs",
        message="TrajectoryInOrderMatchInput",
    )
    trajectory_any_order_match_input: "TrajectoryAnyOrderMatchInput" = proto.Field(
        proto.MESSAGE,
        number=35,
        oneof="metric_inputs",
        message="TrajectoryAnyOrderMatchInput",
    )
    trajectory_precision_input: "TrajectoryPrecisionInput" = proto.Field(
        proto.MESSAGE,
        number=37,
        oneof="metric_inputs",
        message="TrajectoryPrecisionInput",
    )
    trajectory_recall_input: "TrajectoryRecallInput" = proto.Field(
        proto.MESSAGE,
        number=38,
        oneof="metric_inputs",
        message="TrajectoryRecallInput",
    )
    trajectory_single_tool_use_input: "TrajectorySingleToolUseInput" = proto.Field(
        proto.MESSAGE,
        number=39,
        oneof="metric_inputs",
        message="TrajectorySingleToolUseInput",
    )
    rubric_based_instruction_following_input: "RubricBasedInstructionFollowingInput" = (
        proto.Field(
            proto.MESSAGE,
            number=40,
            oneof="metric_inputs",
            message="RubricBasedInstructionFollowingInput",
        )
    )
    location: str = proto.Field(
        proto.STRING,
        number=1,
    )
    autorater_config: "AutoraterConfig" = proto.Field(
        proto.MESSAGE,
        number=30,
        message="AutoraterConfig",
    )


class EvaluateInstancesResponse(proto.Message):
    r

    exact_match_results: "ExactMatchResults" = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="evaluation_results",
        message="ExactMatchResults",
    )
    bleu_results: "BleuResults" = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="evaluation_results",
        message="BleuResults",
    )
    rouge_results: "RougeResults" = proto.Field(
        proto.MESSAGE,
        number=3,
        oneof="evaluation_results",
        message="RougeResults",
    )
    fluency_result: "FluencyResult" = proto.Field(
        proto.MESSAGE,
        number=4,
        oneof="evaluation_results",
        message="FluencyResult",
    )
    coherence_result: "CoherenceResult" = proto.Field(
        proto.MESSAGE,
        number=5,
        oneof="evaluation_results",
        message="CoherenceResult",
    )
    safety_result: "SafetyResult" = proto.Field(
        proto.MESSAGE,
        number=7,
        oneof="evaluation_results",
        message="SafetyResult",
    )
    groundedness_result: "GroundednessResult" = proto.Field(
        proto.MESSAGE,
        number=8,
        oneof="evaluation_results",
        message="GroundednessResult",
    )
    fulfillment_result: "FulfillmentResult" = proto.Field(
        proto.MESSAGE,
        number=11,
        oneof="evaluation_results",
        message="FulfillmentResult",
    )
    summarization_quality_result: "SummarizationQualityResult" = proto.Field(
        proto.MESSAGE,
        number=6,
        oneof="evaluation_results",
        message="SummarizationQualityResult",
    )
    pairwise_summarization_quality_result: "PairwiseSummarizationQualityResult" = (
        proto.Field(
            proto.MESSAGE,
            number=22,
            oneof="evaluation_results",
            message="PairwiseSummarizationQualityResult",
        )
    )
    summarization_helpfulness_result: "SummarizationHelpfulnessResult" = proto.Field(
        proto.MESSAGE,
        number=13,
        oneof="evaluation_results",
        message="SummarizationHelpfulnessResult",
    )
    summarization_verbosity_result: "SummarizationVerbosityResult" = proto.Field(
        proto.MESSAGE,
        number=14,
        oneof="evaluation_results",
        message="SummarizationVerbosityResult",
    )
    question_answering_quality_result: "QuestionAnsweringQualityResult" = proto.Field(
        proto.MESSAGE,
        number=9,
        oneof="evaluation_results",
        message="QuestionAnsweringQualityResult",
    )
    pairwise_question_answering_quality_result: "PairwiseQuestionAnsweringQualityResult" = proto.Field(
        proto.MESSAGE,
        number=23,
        oneof="evaluation_results",
        message="PairwiseQuestionAnsweringQualityResult",
    )
    question_answering_relevance_result: "QuestionAnsweringRelevanceResult" = (
        proto.Field(
            proto.MESSAGE,
            number=15,
            oneof="evaluation_results",
            message="QuestionAnsweringRelevanceResult",
        )
    )
    question_answering_helpfulness_result: "QuestionAnsweringHelpfulnessResult" = (
        proto.Field(
            proto.MESSAGE,
            number=16,
            oneof="evaluation_results",
            message="QuestionAnsweringHelpfulnessResult",
        )
    )
    question_answering_correctness_result: "QuestionAnsweringCorrectnessResult" = (
        proto.Field(
            proto.MESSAGE,
            number=17,
            oneof="evaluation_results",
            message="QuestionAnsweringCorrectnessResult",
        )
    )
    pointwise_metric_result: "PointwiseMetricResult" = proto.Field(
        proto.MESSAGE,
        number=27,
        oneof="evaluation_results",
        message="PointwiseMetricResult",
    )
    pairwise_metric_result: "PairwiseMetricResult" = proto.Field(
        proto.MESSAGE,
        number=28,
        oneof="evaluation_results",
        message="PairwiseMetricResult",
    )
    tool_call_valid_results: "ToolCallValidResults" = proto.Field(
        proto.MESSAGE,
        number=18,
        oneof="evaluation_results",
        message="ToolCallValidResults",
    )
    tool_name_match_results: "ToolNameMatchResults" = proto.Field(
        proto.MESSAGE,
        number=19,
        oneof="evaluation_results",
        message="ToolNameMatchResults",
    )
    tool_parameter_key_match_results: "ToolParameterKeyMatchResults" = proto.Field(
        proto.MESSAGE,
        number=20,
        oneof="evaluation_results",
        message="ToolParameterKeyMatchResults",
    )
    tool_parameter_kv_match_results: "ToolParameterKVMatchResults" = proto.Field(
        proto.MESSAGE,
        number=21,
        oneof="evaluation_results",
        message="ToolParameterKVMatchResults",
    )
    comet_result: "CometResult" = proto.Field(
        proto.MESSAGE,
        number=29,
        oneof="evaluation_results",
        message="CometResult",
    )
    metricx_result: "MetricxResult" = proto.Field(
        proto.MESSAGE,
        number=30,
        oneof="evaluation_results",
        message="MetricxResult",
    )
    trajectory_exact_match_results: "TrajectoryExactMatchResults" = proto.Field(
        proto.MESSAGE,
        number=31,
        oneof="evaluation_results",
        message="TrajectoryExactMatchResults",
    )
    trajectory_in_order_match_results: "TrajectoryInOrderMatchResults" = proto.Field(
        proto.MESSAGE,
        number=32,
        oneof="evaluation_results",
        message="TrajectoryInOrderMatchResults",
    )
    trajectory_any_order_match_results: "TrajectoryAnyOrderMatchResults" = proto.Field(
        proto.MESSAGE,
        number=33,
        oneof="evaluation_results",
        message="TrajectoryAnyOrderMatchResults",
    )
    trajectory_precision_results: "TrajectoryPrecisionResults" = proto.Field(
        proto.MESSAGE,
        number=35,
        oneof="evaluation_results",
        message="TrajectoryPrecisionResults",
    )
    trajectory_recall_results: "TrajectoryRecallResults" = proto.Field(
        proto.MESSAGE,
        number=36,
        oneof="evaluation_results",
        message="TrajectoryRecallResults",
    )
    trajectory_single_tool_use_results: "TrajectorySingleToolUseResults" = proto.Field(
        proto.MESSAGE,
        number=37,
        oneof="evaluation_results",
        message="TrajectorySingleToolUseResults",
    )
    rubric_based_instruction_following_result: "RubricBasedInstructionFollowingResult" = proto.Field(
        proto.MESSAGE,
        number=38,
        oneof="evaluation_results",
        message="RubricBasedInstructionFollowingResult",
    )


class ExactMatchInput(proto.Message):
    r

    metric_spec: "ExactMatchSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="ExactMatchSpec",
    )
    instances: MutableSequence["ExactMatchInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="ExactMatchInstance",
    )


class ExactMatchInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )


class ExactMatchSpec(proto.Message):
    r


class ExactMatchResults(proto.Message):
    r

    exact_match_metric_values: MutableSequence[
        "ExactMatchMetricValue"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="ExactMatchMetricValue",
    )


class ExactMatchMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class BleuInput(proto.Message):
    r

    metric_spec: "BleuSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="BleuSpec",
    )
    instances: MutableSequence["BleuInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="BleuInstance",
    )


class BleuInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )


class BleuSpec(proto.Message):
    r

    use_effective_order: bool = proto.Field(
        proto.BOOL,
        number=1,
    )


class BleuResults(proto.Message):
    r

    bleu_metric_values: MutableSequence["BleuMetricValue"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="BleuMetricValue",
    )


class BleuMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class RougeInput(proto.Message):
    r

    metric_spec: "RougeSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="RougeSpec",
    )
    instances: MutableSequence["RougeInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="RougeInstance",
    )


class RougeInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )


class RougeSpec(proto.Message):
    r

    rouge_type: str = proto.Field(
        proto.STRING,
        number=1,
    )
    use_stemmer: bool = proto.Field(
        proto.BOOL,
        number=2,
    )
    split_summaries: bool = proto.Field(
        proto.BOOL,
        number=3,
    )


class RougeResults(proto.Message):
    r

    rouge_metric_values: MutableSequence["RougeMetricValue"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="RougeMetricValue",
    )


class RougeMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class CoherenceInput(proto.Message):
    r

    metric_spec: "CoherenceSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="CoherenceSpec",
    )
    instance: "CoherenceInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="CoherenceInstance",
    )


class CoherenceInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )


class CoherenceSpec(proto.Message):
    r

    version: int = proto.Field(
        proto.INT32,
        number=1,
    )


class CoherenceResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class FluencyInput(proto.Message):
    r

    metric_spec: "FluencySpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="FluencySpec",
    )
    instance: "FluencyInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="FluencyInstance",
    )


class FluencyInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )


class FluencySpec(proto.Message):
    r

    version: int = proto.Field(
        proto.INT32,
        number=1,
    )


class FluencyResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class SafetyInput(proto.Message):
    r

    metric_spec: "SafetySpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="SafetySpec",
    )
    instance: "SafetyInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="SafetyInstance",
    )


class SafetyInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )


class SafetySpec(proto.Message):
    r

    version: int = proto.Field(
        proto.INT32,
        number=1,
    )


class SafetyResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class GroundednessInput(proto.Message):
    r

    metric_spec: "GroundednessSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="GroundednessSpec",
    )
    instance: "GroundednessInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="GroundednessInstance",
    )


class GroundednessInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    context: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )


class GroundednessSpec(proto.Message):
    r

    version: int = proto.Field(
        proto.INT32,
        number=1,
    )


class GroundednessResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class FulfillmentInput(proto.Message):
    r

    metric_spec: "FulfillmentSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="FulfillmentSpec",
    )
    instance: "FulfillmentInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="FulfillmentInstance",
    )


class FulfillmentInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    instruction: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )


class FulfillmentSpec(proto.Message):
    r

    version: int = proto.Field(
        proto.INT32,
        number=1,
    )


class FulfillmentResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class SummarizationQualityInput(proto.Message):
    r

    metric_spec: "SummarizationQualitySpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="SummarizationQualitySpec",
    )
    instance: "SummarizationQualityInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="SummarizationQualityInstance",
    )


class SummarizationQualityInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    context: str = proto.Field(
        proto.STRING,
        number=3,
        optional=True,
    )
    instruction: str = proto.Field(
        proto.STRING,
        number=4,
        optional=True,
    )


class SummarizationQualitySpec(proto.Message):
    r

    use_reference: bool = proto.Field(
        proto.BOOL,
        number=1,
    )
    version: int = proto.Field(
        proto.INT32,
        number=2,
    )


class SummarizationQualityResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class PairwiseSummarizationQualityInput(proto.Message):
    r

    metric_spec: "PairwiseSummarizationQualitySpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="PairwiseSummarizationQualitySpec",
    )
    instance: "PairwiseSummarizationQualityInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="PairwiseSummarizationQualityInstance",
    )


class PairwiseSummarizationQualityInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    baseline_prediction: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=3,
        optional=True,
    )
    context: str = proto.Field(
        proto.STRING,
        number=4,
        optional=True,
    )
    instruction: str = proto.Field(
        proto.STRING,
        number=5,
        optional=True,
    )


class PairwiseSummarizationQualitySpec(proto.Message):
    r

    use_reference: bool = proto.Field(
        proto.BOOL,
        number=1,
    )
    version: int = proto.Field(
        proto.INT32,
        number=2,
    )


class PairwiseSummarizationQualityResult(proto.Message):
    r

    pairwise_choice: "PairwiseChoice" = proto.Field(
        proto.ENUM,
        number=1,
        enum="PairwiseChoice",
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class SummarizationHelpfulnessInput(proto.Message):
    r

    metric_spec: "SummarizationHelpfulnessSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="SummarizationHelpfulnessSpec",
    )
    instance: "SummarizationHelpfulnessInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="SummarizationHelpfulnessInstance",
    )


class SummarizationHelpfulnessInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    context: str = proto.Field(
        proto.STRING,
        number=3,
        optional=True,
    )
    instruction: str = proto.Field(
        proto.STRING,
        number=4,
        optional=True,
    )


class SummarizationHelpfulnessSpec(proto.Message):
    r

    use_reference: bool = proto.Field(
        proto.BOOL,
        number=1,
    )
    version: int = proto.Field(
        proto.INT32,
        number=2,
    )


class SummarizationHelpfulnessResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class SummarizationVerbosityInput(proto.Message):
    r

    metric_spec: "SummarizationVerbositySpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="SummarizationVerbositySpec",
    )
    instance: "SummarizationVerbosityInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="SummarizationVerbosityInstance",
    )


class SummarizationVerbosityInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    context: str = proto.Field(
        proto.STRING,
        number=3,
        optional=True,
    )
    instruction: str = proto.Field(
        proto.STRING,
        number=4,
        optional=True,
    )


class SummarizationVerbositySpec(proto.Message):
    r

    use_reference: bool = proto.Field(
        proto.BOOL,
        number=1,
    )
    version: int = proto.Field(
        proto.INT32,
        number=2,
    )


class SummarizationVerbosityResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class QuestionAnsweringQualityInput(proto.Message):
    r

    metric_spec: "QuestionAnsweringQualitySpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="QuestionAnsweringQualitySpec",
    )
    instance: "QuestionAnsweringQualityInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="QuestionAnsweringQualityInstance",
    )


class QuestionAnsweringQualityInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    context: str = proto.Field(
        proto.STRING,
        number=3,
        optional=True,
    )
    instruction: str = proto.Field(
        proto.STRING,
        number=4,
        optional=True,
    )


class QuestionAnsweringQualitySpec(proto.Message):
    r

    use_reference: bool = proto.Field(
        proto.BOOL,
        number=1,
    )
    version: int = proto.Field(
        proto.INT32,
        number=2,
    )


class QuestionAnsweringQualityResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class PairwiseQuestionAnsweringQualityInput(proto.Message):
    r

    metric_spec: "PairwiseQuestionAnsweringQualitySpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="PairwiseQuestionAnsweringQualitySpec",
    )
    instance: "PairwiseQuestionAnsweringQualityInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="PairwiseQuestionAnsweringQualityInstance",
    )


class PairwiseQuestionAnsweringQualityInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    baseline_prediction: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=3,
        optional=True,
    )
    context: str = proto.Field(
        proto.STRING,
        number=4,
        optional=True,
    )
    instruction: str = proto.Field(
        proto.STRING,
        number=5,
        optional=True,
    )


class PairwiseQuestionAnsweringQualitySpec(proto.Message):
    r

    use_reference: bool = proto.Field(
        proto.BOOL,
        number=1,
    )
    version: int = proto.Field(
        proto.INT32,
        number=2,
    )


class PairwiseQuestionAnsweringQualityResult(proto.Message):
    r

    pairwise_choice: "PairwiseChoice" = proto.Field(
        proto.ENUM,
        number=1,
        enum="PairwiseChoice",
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class QuestionAnsweringRelevanceInput(proto.Message):
    r

    metric_spec: "QuestionAnsweringRelevanceSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="QuestionAnsweringRelevanceSpec",
    )
    instance: "QuestionAnsweringRelevanceInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="QuestionAnsweringRelevanceInstance",
    )


class QuestionAnsweringRelevanceInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    context: str = proto.Field(
        proto.STRING,
        number=3,
        optional=True,
    )
    instruction: str = proto.Field(
        proto.STRING,
        number=4,
        optional=True,
    )


class QuestionAnsweringRelevanceSpec(proto.Message):
    r

    use_reference: bool = proto.Field(
        proto.BOOL,
        number=1,
    )
    version: int = proto.Field(
        proto.INT32,
        number=2,
    )


class QuestionAnsweringRelevanceResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class QuestionAnsweringHelpfulnessInput(proto.Message):
    r

    metric_spec: "QuestionAnsweringHelpfulnessSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="QuestionAnsweringHelpfulnessSpec",
    )
    instance: "QuestionAnsweringHelpfulnessInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="QuestionAnsweringHelpfulnessInstance",
    )


class QuestionAnsweringHelpfulnessInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    context: str = proto.Field(
        proto.STRING,
        number=3,
        optional=True,
    )
    instruction: str = proto.Field(
        proto.STRING,
        number=4,
        optional=True,
    )


class QuestionAnsweringHelpfulnessSpec(proto.Message):
    r

    use_reference: bool = proto.Field(
        proto.BOOL,
        number=1,
    )
    version: int = proto.Field(
        proto.INT32,
        number=2,
    )


class QuestionAnsweringHelpfulnessResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class QuestionAnsweringCorrectnessInput(proto.Message):
    r

    metric_spec: "QuestionAnsweringCorrectnessSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="QuestionAnsweringCorrectnessSpec",
    )
    instance: "QuestionAnsweringCorrectnessInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="QuestionAnsweringCorrectnessInstance",
    )


class QuestionAnsweringCorrectnessInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    context: str = proto.Field(
        proto.STRING,
        number=3,
        optional=True,
    )
    instruction: str = proto.Field(
        proto.STRING,
        number=4,
        optional=True,
    )


class QuestionAnsweringCorrectnessSpec(proto.Message):
    r

    use_reference: bool = proto.Field(
        proto.BOOL,
        number=1,
    )
    version: int = proto.Field(
        proto.INT32,
        number=2,
    )


class QuestionAnsweringCorrectnessResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    confidence: float = proto.Field(
        proto.FLOAT,
        number=3,
        optional=True,
    )


class PointwiseMetricInput(proto.Message):
    r

    metric_spec: "PointwiseMetricSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="PointwiseMetricSpec",
    )
    instance: "PointwiseMetricInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="PointwiseMetricInstance",
    )


class PointwiseMetricInstance(proto.Message):
    r

    json_instance: str = proto.Field(
        proto.STRING,
        number=1,
        oneof="instance",
    )
    content_map_instance: "ContentMap" = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="instance",
        message="ContentMap",
    )


class PointwiseMetricSpec(proto.Message):
    r

    metric_prompt_template: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    system_instruction: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    custom_output_format_config: "CustomOutputFormatConfig" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="CustomOutputFormatConfig",
    )


class CustomOutputFormatConfig(proto.Message):
    r

    return_raw_output: bool = proto.Field(
        proto.BOOL,
        number=1,
        oneof="custom_output_format_config",
    )


class PointwiseMetricResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    custom_output: "CustomOutput" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="CustomOutput",
    )


class CustomOutput(proto.Message):
    r

    raw_outputs: "RawOutput" = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="custom_output",
        message="RawOutput",
    )


class RawOutput(proto.Message):
    r

    raw_output: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=1,
    )


class PairwiseMetricInput(proto.Message):
    r

    metric_spec: "PairwiseMetricSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="PairwiseMetricSpec",
    )
    instance: "PairwiseMetricInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="PairwiseMetricInstance",
    )


class PairwiseMetricInstance(proto.Message):
    r

    json_instance: str = proto.Field(
        proto.STRING,
        number=1,
        oneof="instance",
    )
    content_map_instance: "ContentMap" = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="instance",
        message="ContentMap",
    )


class PairwiseMetricSpec(proto.Message):
    r

    metric_prompt_template: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    candidate_response_field_name: str = proto.Field(
        proto.STRING,
        number=2,
    )
    baseline_response_field_name: str = proto.Field(
        proto.STRING,
        number=3,
    )
    system_instruction: str = proto.Field(
        proto.STRING,
        number=4,
        optional=True,
    )
    custom_output_format_config: "CustomOutputFormatConfig" = proto.Field(
        proto.MESSAGE,
        number=5,
        message="CustomOutputFormatConfig",
    )


class PairwiseMetricResult(proto.Message):
    r

    pairwise_choice: "PairwiseChoice" = proto.Field(
        proto.ENUM,
        number=1,
        enum="PairwiseChoice",
    )
    explanation: str = proto.Field(
        proto.STRING,
        number=2,
    )
    custom_output: "CustomOutput" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="CustomOutput",
    )


class ToolCallValidInput(proto.Message):
    r

    metric_spec: "ToolCallValidSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="ToolCallValidSpec",
    )
    instances: MutableSequence["ToolCallValidInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="ToolCallValidInstance",
    )


class ToolCallValidSpec(proto.Message):
    r


class ToolCallValidInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )


class ToolCallValidResults(proto.Message):
    r

    tool_call_valid_metric_values: MutableSequence[
        "ToolCallValidMetricValue"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="ToolCallValidMetricValue",
    )


class ToolCallValidMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class ToolNameMatchInput(proto.Message):
    r

    metric_spec: "ToolNameMatchSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="ToolNameMatchSpec",
    )
    instances: MutableSequence["ToolNameMatchInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="ToolNameMatchInstance",
    )


class ToolNameMatchSpec(proto.Message):
    r


class ToolNameMatchInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )


class ToolNameMatchResults(proto.Message):
    r

    tool_name_match_metric_values: MutableSequence[
        "ToolNameMatchMetricValue"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="ToolNameMatchMetricValue",
    )


class ToolNameMatchMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class ToolParameterKeyMatchInput(proto.Message):
    r

    metric_spec: "ToolParameterKeyMatchSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="ToolParameterKeyMatchSpec",
    )
    instances: MutableSequence["ToolParameterKeyMatchInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="ToolParameterKeyMatchInstance",
    )


class ToolParameterKeyMatchSpec(proto.Message):
    r


class ToolParameterKeyMatchInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )


class ToolParameterKeyMatchResults(proto.Message):
    r

    tool_parameter_key_match_metric_values: MutableSequence[
        "ToolParameterKeyMatchMetricValue"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="ToolParameterKeyMatchMetricValue",
    )


class ToolParameterKeyMatchMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class ToolParameterKVMatchInput(proto.Message):
    r

    metric_spec: "ToolParameterKVMatchSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="ToolParameterKVMatchSpec",
    )
    instances: MutableSequence["ToolParameterKVMatchInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="ToolParameterKVMatchInstance",
    )


class ToolParameterKVMatchSpec(proto.Message):
    r

    use_strict_string_match: bool = proto.Field(
        proto.BOOL,
        number=1,
    )


class ToolParameterKVMatchInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )


class ToolParameterKVMatchResults(proto.Message):
    r

    tool_parameter_kv_match_metric_values: MutableSequence[
        "ToolParameterKVMatchMetricValue"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="ToolParameterKVMatchMetricValue",
    )


class ToolParameterKVMatchMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class CometInput(proto.Message):
    r

    metric_spec: "CometSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="CometSpec",
    )
    instance: "CometInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="CometInstance",
    )


class CometSpec(proto.Message):
    r

    class CometVersion(proto.Enum):
        r
        COMET_VERSION_UNSPECIFIED = 0
        COMET_22_SRC_REF = 2

    version: CometVersion = proto.Field(
        proto.ENUM,
        number=1,
        optional=True,
        enum=CometVersion,
    )
    source_language: str = proto.Field(
        proto.STRING,
        number=2,
    )
    target_language: str = proto.Field(
        proto.STRING,
        number=3,
    )


class CometInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    source: str = proto.Field(
        proto.STRING,
        number=3,
        optional=True,
    )


class CometResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class MetricxInput(proto.Message):
    r

    metric_spec: "MetricxSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="MetricxSpec",
    )
    instance: "MetricxInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="MetricxInstance",
    )


class MetricxSpec(proto.Message):
    r

    class MetricxVersion(proto.Enum):
        r
        METRICX_VERSION_UNSPECIFIED = 0
        METRICX_24_REF = 1
        METRICX_24_SRC = 2
        METRICX_24_SRC_REF = 3

    version: MetricxVersion = proto.Field(
        proto.ENUM,
        number=1,
        optional=True,
        enum=MetricxVersion,
    )
    source_language: str = proto.Field(
        proto.STRING,
        number=2,
    )
    target_language: str = proto.Field(
        proto.STRING,
        number=3,
    )


class MetricxInstance(proto.Message):
    r

    prediction: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    reference: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    source: str = proto.Field(
        proto.STRING,
        number=3,
        optional=True,
    )


class MetricxResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class RubricBasedInstructionFollowingInput(proto.Message):
    r

    metric_spec: "RubricBasedInstructionFollowingSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="RubricBasedInstructionFollowingSpec",
    )
    instance: "RubricBasedInstructionFollowingInstance" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="RubricBasedInstructionFollowingInstance",
    )


class RubricBasedInstructionFollowingInstance(proto.Message):
    r

    json_instance: str = proto.Field(
        proto.STRING,
        number=1,
        oneof="instance",
    )


class RubricBasedInstructionFollowingSpec(proto.Message):
    r


class RubricBasedInstructionFollowingResult(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    rubric_critique_results: MutableSequence[
        "RubricCritiqueResult"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="RubricCritiqueResult",
    )


class RubricCritiqueResult(proto.Message):
    r

    rubric: str = proto.Field(
        proto.STRING,
        number=1,
    )
    verdict: bool = proto.Field(
        proto.BOOL,
        number=2,
    )


class TrajectoryExactMatchInput(proto.Message):
    r

    metric_spec: "TrajectoryExactMatchSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="TrajectoryExactMatchSpec",
    )
    instances: MutableSequence["TrajectoryExactMatchInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="TrajectoryExactMatchInstance",
    )


class TrajectoryExactMatchSpec(proto.Message):
    r


class TrajectoryExactMatchInstance(proto.Message):
    r

    predicted_trajectory: "Trajectory" = proto.Field(
        proto.MESSAGE,
        number=1,
        optional=True,
        message="Trajectory",
    )
    reference_trajectory: "Trajectory" = proto.Field(
        proto.MESSAGE,
        number=2,
        optional=True,
        message="Trajectory",
    )


class TrajectoryExactMatchResults(proto.Message):
    r

    trajectory_exact_match_metric_values: MutableSequence[
        "TrajectoryExactMatchMetricValue"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="TrajectoryExactMatchMetricValue",
    )


class TrajectoryExactMatchMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class TrajectoryInOrderMatchInput(proto.Message):
    r

    metric_spec: "TrajectoryInOrderMatchSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="TrajectoryInOrderMatchSpec",
    )
    instances: MutableSequence["TrajectoryInOrderMatchInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="TrajectoryInOrderMatchInstance",
    )


class TrajectoryInOrderMatchSpec(proto.Message):
    r


class TrajectoryInOrderMatchInstance(proto.Message):
    r

    predicted_trajectory: "Trajectory" = proto.Field(
        proto.MESSAGE,
        number=1,
        optional=True,
        message="Trajectory",
    )
    reference_trajectory: "Trajectory" = proto.Field(
        proto.MESSAGE,
        number=2,
        optional=True,
        message="Trajectory",
    )


class TrajectoryInOrderMatchResults(proto.Message):
    r

    trajectory_in_order_match_metric_values: MutableSequence[
        "TrajectoryInOrderMatchMetricValue"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="TrajectoryInOrderMatchMetricValue",
    )


class TrajectoryInOrderMatchMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class TrajectoryAnyOrderMatchInput(proto.Message):
    r

    metric_spec: "TrajectoryAnyOrderMatchSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="TrajectoryAnyOrderMatchSpec",
    )
    instances: MutableSequence["TrajectoryAnyOrderMatchInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="TrajectoryAnyOrderMatchInstance",
    )


class TrajectoryAnyOrderMatchSpec(proto.Message):
    r


class TrajectoryAnyOrderMatchInstance(proto.Message):
    r

    predicted_trajectory: "Trajectory" = proto.Field(
        proto.MESSAGE,
        number=1,
        optional=True,
        message="Trajectory",
    )
    reference_trajectory: "Trajectory" = proto.Field(
        proto.MESSAGE,
        number=2,
        optional=True,
        message="Trajectory",
    )


class TrajectoryAnyOrderMatchResults(proto.Message):
    r

    trajectory_any_order_match_metric_values: MutableSequence[
        "TrajectoryAnyOrderMatchMetricValue"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="TrajectoryAnyOrderMatchMetricValue",
    )


class TrajectoryAnyOrderMatchMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class TrajectoryPrecisionInput(proto.Message):
    r

    metric_spec: "TrajectoryPrecisionSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="TrajectoryPrecisionSpec",
    )
    instances: MutableSequence["TrajectoryPrecisionInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="TrajectoryPrecisionInstance",
    )


class TrajectoryPrecisionSpec(proto.Message):
    r


class TrajectoryPrecisionInstance(proto.Message):
    r

    predicted_trajectory: "Trajectory" = proto.Field(
        proto.MESSAGE,
        number=1,
        optional=True,
        message="Trajectory",
    )
    reference_trajectory: "Trajectory" = proto.Field(
        proto.MESSAGE,
        number=2,
        optional=True,
        message="Trajectory",
    )


class TrajectoryPrecisionResults(proto.Message):
    r

    trajectory_precision_metric_values: MutableSequence[
        "TrajectoryPrecisionMetricValue"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="TrajectoryPrecisionMetricValue",
    )


class TrajectoryPrecisionMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class TrajectoryRecallInput(proto.Message):
    r

    metric_spec: "TrajectoryRecallSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="TrajectoryRecallSpec",
    )
    instances: MutableSequence["TrajectoryRecallInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="TrajectoryRecallInstance",
    )


class TrajectoryRecallSpec(proto.Message):
    r


class TrajectoryRecallInstance(proto.Message):
    r

    predicted_trajectory: "Trajectory" = proto.Field(
        proto.MESSAGE,
        number=1,
        optional=True,
        message="Trajectory",
    )
    reference_trajectory: "Trajectory" = proto.Field(
        proto.MESSAGE,
        number=2,
        optional=True,
        message="Trajectory",
    )


class TrajectoryRecallResults(proto.Message):
    r

    trajectory_recall_metric_values: MutableSequence[
        "TrajectoryRecallMetricValue"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="TrajectoryRecallMetricValue",
    )


class TrajectoryRecallMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class TrajectorySingleToolUseInput(proto.Message):
    r

    metric_spec: "TrajectorySingleToolUseSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="TrajectorySingleToolUseSpec",
    )
    instances: MutableSequence["TrajectorySingleToolUseInstance"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="TrajectorySingleToolUseInstance",
    )


class TrajectorySingleToolUseSpec(proto.Message):
    r

    tool_name: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )


class TrajectorySingleToolUseInstance(proto.Message):
    r

    predicted_trajectory: "Trajectory" = proto.Field(
        proto.MESSAGE,
        number=1,
        optional=True,
        message="Trajectory",
    )


class TrajectorySingleToolUseResults(proto.Message):
    r

    trajectory_single_tool_use_metric_values: MutableSequence[
        "TrajectorySingleToolUseMetricValue"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="TrajectorySingleToolUseMetricValue",
    )


class TrajectorySingleToolUseMetricValue(proto.Message):
    r

    score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )


class Trajectory(proto.Message):
    r

    tool_calls: MutableSequence["ToolCall"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="ToolCall",
    )


class ToolCall(proto.Message):
    r

    tool_name: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    tool_input: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )


class ContentMap(proto.Message):
    r

    class Contents(proto.Message):
        r

        contents: MutableSequence[content.Content] = proto.RepeatedField(
            proto.MESSAGE,
            number=1,
            message=content.Content,
        )

    values: MutableMapping[str, Contents] = proto.MapField(
        proto.STRING,
        proto.MESSAGE,
        number=1,
        message=Contents,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
