














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import (
    batch_prediction_job as gca_batch_prediction_job,
)
from google.cloud.aiplatform_v1beta1.types import custom_job as gca_custom_job
from google.cloud.aiplatform_v1beta1.types import (
    data_labeling_job as gca_data_labeling_job,
)
from google.cloud.aiplatform_v1beta1.types import (
    hyperparameter_tuning_job as gca_hyperparameter_tuning_job,
)
from google.cloud.aiplatform_v1beta1.types import (
    model_deployment_monitoring_job as gca_model_deployment_monitoring_job,
)
from google.cloud.aiplatform_v1beta1.types import nas_job as gca_nas_job
from google.cloud.aiplatform_v1beta1.types import operation
from google.protobuf import field_mask_pb2  
from google.protobuf import timestamp_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "CreateCustomJobRequest",
        "GetCustomJobRequest",
        "ListCustomJobsRequest",
        "ListCustomJobsResponse",
        "DeleteCustomJobRequest",
        "CancelCustomJobRequest",
        "CreateDataLabelingJobRequest",
        "GetDataLabelingJobRequest",
        "ListDataLabelingJobsRequest",
        "ListDataLabelingJobsResponse",
        "DeleteDataLabelingJobRequest",
        "CancelDataLabelingJobRequest",
        "CreateHyperparameterTuningJobRequest",
        "GetHyperparameterTuningJobRequest",
        "ListHyperparameterTuningJobsRequest",
        "ListHyperparameterTuningJobsResponse",
        "DeleteHyperparameterTuningJobRequest",
        "CancelHyperparameterTuningJobRequest",
        "CreateNasJobRequest",
        "GetNasJobRequest",
        "ListNasJobsRequest",
        "ListNasJobsResponse",
        "DeleteNasJobRequest",
        "CancelNasJobRequest",
        "GetNasTrialDetailRequest",
        "ListNasTrialDetailsRequest",
        "ListNasTrialDetailsResponse",
        "CreateBatchPredictionJobRequest",
        "GetBatchPredictionJobRequest",
        "ListBatchPredictionJobsRequest",
        "ListBatchPredictionJobsResponse",
        "DeleteBatchPredictionJobRequest",
        "CancelBatchPredictionJobRequest",
        "CreateModelDeploymentMonitoringJobRequest",
        "SearchModelDeploymentMonitoringStatsAnomaliesRequest",
        "SearchModelDeploymentMonitoringStatsAnomaliesResponse",
        "GetModelDeploymentMonitoringJobRequest",
        "ListModelDeploymentMonitoringJobsRequest",
        "ListModelDeploymentMonitoringJobsResponse",
        "UpdateModelDeploymentMonitoringJobRequest",
        "DeleteModelDeploymentMonitoringJobRequest",
        "PauseModelDeploymentMonitoringJobRequest",
        "ResumeModelDeploymentMonitoringJobRequest",
        "UpdateModelDeploymentMonitoringJobOperationMetadata",
    },
)


class CreateCustomJobRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    custom_job: gca_custom_job.CustomJob = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_custom_job.CustomJob,
    )


class GetCustomJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListCustomJobsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )


class ListCustomJobsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    custom_jobs: MutableSequence[gca_custom_job.CustomJob] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_custom_job.CustomJob,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteCustomJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CancelCustomJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CreateDataLabelingJobRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    data_labeling_job: gca_data_labeling_job.DataLabelingJob = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_data_labeling_job.DataLabelingJob,
    )


class GetDataLabelingJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListDataLabelingJobsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=6,
    )


class ListDataLabelingJobsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    data_labeling_jobs: MutableSequence[
        gca_data_labeling_job.DataLabelingJob
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_data_labeling_job.DataLabelingJob,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteDataLabelingJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CancelDataLabelingJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CreateHyperparameterTuningJobRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    hyperparameter_tuning_job: gca_hyperparameter_tuning_job.HyperparameterTuningJob = (
        proto.Field(
            proto.MESSAGE,
            number=2,
            message=gca_hyperparameter_tuning_job.HyperparameterTuningJob,
        )
    )


class GetHyperparameterTuningJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListHyperparameterTuningJobsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )


class ListHyperparameterTuningJobsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    hyperparameter_tuning_jobs: MutableSequence[
        gca_hyperparameter_tuning_job.HyperparameterTuningJob
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_hyperparameter_tuning_job.HyperparameterTuningJob,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteHyperparameterTuningJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CancelHyperparameterTuningJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CreateNasJobRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    nas_job: gca_nas_job.NasJob = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_nas_job.NasJob,
    )


class GetNasJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListNasJobsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )


class ListNasJobsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    nas_jobs: MutableSequence[gca_nas_job.NasJob] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_nas_job.NasJob,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteNasJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CancelNasJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class GetNasTrialDetailRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListNasTrialDetailsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )


class ListNasTrialDetailsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    nas_trial_details: MutableSequence[
        gca_nas_job.NasTrialDetail
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_nas_job.NasTrialDetail,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class CreateBatchPredictionJobRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    batch_prediction_job: gca_batch_prediction_job.BatchPredictionJob = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_batch_prediction_job.BatchPredictionJob,
    )


class GetBatchPredictionJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListBatchPredictionJobsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )


class ListBatchPredictionJobsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    batch_prediction_jobs: MutableSequence[
        gca_batch_prediction_job.BatchPredictionJob
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_batch_prediction_job.BatchPredictionJob,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteBatchPredictionJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CancelBatchPredictionJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CreateModelDeploymentMonitoringJobRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    model_deployment_monitoring_job: gca_model_deployment_monitoring_job.ModelDeploymentMonitoringJob = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_model_deployment_monitoring_job.ModelDeploymentMonitoringJob,
    )


class SearchModelDeploymentMonitoringStatsAnomaliesRequest(proto.Message):
    r

    class StatsAnomaliesObjective(proto.Message):
        r

        type_: gca_model_deployment_monitoring_job.ModelDeploymentMonitoringObjectiveType = proto.Field(
            proto.ENUM,
            number=1,
            enum=gca_model_deployment_monitoring_job.ModelDeploymentMonitoringObjectiveType,
        )
        top_feature_count: int = proto.Field(
            proto.INT32,
            number=4,
        )

    model_deployment_monitoring_job: str = proto.Field(
        proto.STRING,
        number=1,
    )
    deployed_model_id: str = proto.Field(
        proto.STRING,
        number=2,
    )
    feature_display_name: str = proto.Field(
        proto.STRING,
        number=3,
    )
    objectives: MutableSequence[StatsAnomaliesObjective] = proto.RepeatedField(
        proto.MESSAGE,
        number=4,
        message=StatsAnomaliesObjective,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=5,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=6,
    )
    start_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=7,
        message=timestamp_pb2.Timestamp,
    )
    end_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=8,
        message=timestamp_pb2.Timestamp,
    )


class SearchModelDeploymentMonitoringStatsAnomaliesResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    monitoring_stats: MutableSequence[
        gca_model_deployment_monitoring_job.ModelMonitoringStatsAnomalies
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_model_deployment_monitoring_job.ModelMonitoringStatsAnomalies,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class GetModelDeploymentMonitoringJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListModelDeploymentMonitoringJobsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )


class ListModelDeploymentMonitoringJobsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    model_deployment_monitoring_jobs: MutableSequence[
        gca_model_deployment_monitoring_job.ModelDeploymentMonitoringJob
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_model_deployment_monitoring_job.ModelDeploymentMonitoringJob,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class UpdateModelDeploymentMonitoringJobRequest(proto.Message):
    r

    model_deployment_monitoring_job: gca_model_deployment_monitoring_job.ModelDeploymentMonitoringJob = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_model_deployment_monitoring_job.ModelDeploymentMonitoringJob,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )


class DeleteModelDeploymentMonitoringJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class PauseModelDeploymentMonitoringJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ResumeModelDeploymentMonitoringJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class UpdateModelDeploymentMonitoringJobOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
