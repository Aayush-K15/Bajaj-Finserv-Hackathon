














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import index


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "FindNeighborsRequest",
        "FindNeighborsResponse",
        "ReadIndexDatapointsRequest",
        "ReadIndexDatapointsResponse",
    },
)


class FindNeighborsRequest(proto.Message):
    r

    class Query(proto.Message):
        r

        class RRF(proto.Message):
            r

            alpha: float = proto.Field(
                proto.FLOAT,
                number=1,
            )

        rrf: "FindNeighborsRequest.Query.RRF" = proto.Field(
            proto.MESSAGE,
            number=6,
            oneof="ranking",
            message="FindNeighborsRequest.Query.RRF",
        )
        datapoint: index.IndexDatapoint = proto.Field(
            proto.MESSAGE,
            number=1,
            message=index.IndexDatapoint,
        )
        neighbor_count: int = proto.Field(
            proto.INT32,
            number=2,
        )
        per_crowding_attribute_neighbor_count: int = proto.Field(
            proto.INT32,
            number=3,
        )
        approximate_neighbor_count: int = proto.Field(
            proto.INT32,
            number=4,
        )
        fraction_leaf_nodes_to_search_override: float = proto.Field(
            proto.DOUBLE,
            number=5,
        )

    index_endpoint: str = proto.Field(
        proto.STRING,
        number=1,
    )
    deployed_index_id: str = proto.Field(
        proto.STRING,
        number=2,
    )
    queries: MutableSequence[Query] = proto.RepeatedField(
        proto.MESSAGE,
        number=3,
        message=Query,
    )
    return_full_datapoint: bool = proto.Field(
        proto.BOOL,
        number=4,
    )


class FindNeighborsResponse(proto.Message):
    r

    class Neighbor(proto.Message):
        r

        datapoint: index.IndexDatapoint = proto.Field(
            proto.MESSAGE,
            number=1,
            message=index.IndexDatapoint,
        )
        distance: float = proto.Field(
            proto.DOUBLE,
            number=2,
        )
        sparse_distance: float = proto.Field(
            proto.DOUBLE,
            number=3,
        )

    class NearestNeighbors(proto.Message):
        r

        id: str = proto.Field(
            proto.STRING,
            number=1,
        )
        neighbors: MutableSequence[
            "FindNeighborsResponse.Neighbor"
        ] = proto.RepeatedField(
            proto.MESSAGE,
            number=2,
            message="FindNeighborsResponse.Neighbor",
        )

    nearest_neighbors: MutableSequence[NearestNeighbors] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=NearestNeighbors,
    )


class ReadIndexDatapointsRequest(proto.Message):
    r

    index_endpoint: str = proto.Field(
        proto.STRING,
        number=1,
    )
    deployed_index_id: str = proto.Field(
        proto.STRING,
        number=2,
    )
    ids: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=3,
    )


class ReadIndexDatapointsResponse(proto.Message):
    r

    datapoints: MutableSequence[index.IndexDatapoint] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=index.IndexDatapoint,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
