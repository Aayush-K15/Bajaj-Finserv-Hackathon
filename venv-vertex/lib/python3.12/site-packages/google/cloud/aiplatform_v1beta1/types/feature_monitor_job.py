














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import feature_monitor
from google.protobuf import timestamp_pb2  
from google.rpc import status_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "FeatureMonitorJob",
    },
)


class FeatureMonitorJob(proto.Message):
    r

    class FeatureMonitorJobTrigger(proto.Enum):
        r
        FEATURE_MONITOR_JOB_TRIGGER_UNSPECIFIED = 0
        FEATURE_MONITOR_JOB_TRIGGER_PERIODIC = 1
        FEATURE_MONITOR_JOB_TRIGGER_ON_DEMAND = 2

    class JobSummary(proto.Message):
        r

        total_slot_ms: int = proto.Field(
            proto.INT64,
            number=1,
        )
        feature_stats_and_anomalies: MutableSequence[
            feature_monitor.FeatureStatsAndAnomaly
        ] = proto.RepeatedField(
            proto.MESSAGE,
            number=2,
            message=feature_monitor.FeatureStatsAndAnomaly,
        )

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    create_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=2,
        message=timestamp_pb2.Timestamp,
    )
    final_status: status_pb2.Status = proto.Field(
        proto.MESSAGE,
        number=3,
        message=status_pb2.Status,
    )
    job_summary: JobSummary = proto.Field(
        proto.MESSAGE,
        number=4,
        message=JobSummary,
    )
    labels: MutableMapping[str, str] = proto.MapField(
        proto.STRING,
        proto.STRING,
        number=5,
    )
    description: str = proto.Field(
        proto.STRING,
        number=6,
    )
    drift_base_feature_monitor_job_id: int = proto.Field(
        proto.INT64,
        number=7,
    )
    drift_base_snapshot_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=8,
        message=timestamp_pb2.Timestamp,
    )
    feature_selection_config: feature_monitor.FeatureSelectionConfig = proto.Field(
        proto.MESSAGE,
        number=9,
        message=feature_monitor.FeatureSelectionConfig,
    )
    trigger_type: FeatureMonitorJobTrigger = proto.Field(
        proto.ENUM,
        number=10,
        enum=FeatureMonitorJobTrigger,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
