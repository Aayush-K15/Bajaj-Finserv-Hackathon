














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.protobuf import struct_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "ExplanationMetadata",
    },
)


class ExplanationMetadata(proto.Message):
    r

    class InputMetadata(proto.Message):
        r

        class Encoding(proto.Enum):
            r
            ENCODING_UNSPECIFIED = 0
            IDENTITY = 1
            BAG_OF_FEATURES = 2
            BAG_OF_FEATURES_SPARSE = 3
            INDICATOR = 4
            COMBINED_EMBEDDING = 5
            CONCAT_EMBEDDING = 6

        class FeatureValueDomain(proto.Message):
            r

            min_value: float = proto.Field(
                proto.FLOAT,
                number=1,
            )
            max_value: float = proto.Field(
                proto.FLOAT,
                number=2,
            )
            original_mean: float = proto.Field(
                proto.FLOAT,
                number=3,
            )
            original_stddev: float = proto.Field(
                proto.FLOAT,
                number=4,
            )

        class Visualization(proto.Message):
            r

            class Type(proto.Enum):
                r
                TYPE_UNSPECIFIED = 0
                PIXELS = 1
                OUTLINES = 2

            class Polarity(proto.Enum):
                r
                POLARITY_UNSPECIFIED = 0
                POSITIVE = 1
                NEGATIVE = 2
                BOTH = 3

            class ColorMap(proto.Enum):
                r
                COLOR_MAP_UNSPECIFIED = 0
                PINK_GREEN = 1
                VIRIDIS = 2
                RED = 3
                GREEN = 4
                RED_GREEN = 6
                PINK_WHITE_GREEN = 5

            class OverlayType(proto.Enum):
                r
                OVERLAY_TYPE_UNSPECIFIED = 0
                NONE = 1
                ORIGINAL = 2
                GRAYSCALE = 3
                MASK_BLACK = 4

            type_: "ExplanationMetadata.InputMetadata.Visualization.Type" = proto.Field(
                proto.ENUM,
                number=1,
                enum="ExplanationMetadata.InputMetadata.Visualization.Type",
            )
            polarity: "ExplanationMetadata.InputMetadata.Visualization.Polarity" = (
                proto.Field(
                    proto.ENUM,
                    number=2,
                    enum="ExplanationMetadata.InputMetadata.Visualization.Polarity",
                )
            )
            color_map: "ExplanationMetadata.InputMetadata.Visualization.ColorMap" = (
                proto.Field(
                    proto.ENUM,
                    number=3,
                    enum="ExplanationMetadata.InputMetadata.Visualization.ColorMap",
                )
            )
            clip_percent_upperbound: float = proto.Field(
                proto.FLOAT,
                number=4,
            )
            clip_percent_lowerbound: float = proto.Field(
                proto.FLOAT,
                number=5,
            )
            overlay_type: "ExplanationMetadata.InputMetadata.Visualization.OverlayType" = proto.Field(
                proto.ENUM,
                number=6,
                enum="ExplanationMetadata.InputMetadata.Visualization.OverlayType",
            )

        input_baselines: MutableSequence[struct_pb2.Value] = proto.RepeatedField(
            proto.MESSAGE,
            number=1,
            message=struct_pb2.Value,
        )
        input_tensor_name: str = proto.Field(
            proto.STRING,
            number=2,
        )
        encoding: "ExplanationMetadata.InputMetadata.Encoding" = proto.Field(
            proto.ENUM,
            number=3,
            enum="ExplanationMetadata.InputMetadata.Encoding",
        )
        modality: str = proto.Field(
            proto.STRING,
            number=4,
        )
        feature_value_domain: "ExplanationMetadata.InputMetadata.FeatureValueDomain" = (
            proto.Field(
                proto.MESSAGE,
                number=5,
                message="ExplanationMetadata.InputMetadata.FeatureValueDomain",
            )
        )
        indices_tensor_name: str = proto.Field(
            proto.STRING,
            number=6,
        )
        dense_shape_tensor_name: str = proto.Field(
            proto.STRING,
            number=7,
        )
        index_feature_mapping: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=8,
        )
        encoded_tensor_name: str = proto.Field(
            proto.STRING,
            number=9,
        )
        encoded_baselines: MutableSequence[struct_pb2.Value] = proto.RepeatedField(
            proto.MESSAGE,
            number=10,
            message=struct_pb2.Value,
        )
        visualization: "ExplanationMetadata.InputMetadata.Visualization" = proto.Field(
            proto.MESSAGE,
            number=11,
            message="ExplanationMetadata.InputMetadata.Visualization",
        )
        group_name: str = proto.Field(
            proto.STRING,
            number=12,
        )

    class OutputMetadata(proto.Message):
        r

        index_display_name_mapping: struct_pb2.Value = proto.Field(
            proto.MESSAGE,
            number=1,
            oneof="display_name_mapping",
            message=struct_pb2.Value,
        )
        display_name_mapping_key: str = proto.Field(
            proto.STRING,
            number=2,
            oneof="display_name_mapping",
        )
        output_tensor_name: str = proto.Field(
            proto.STRING,
            number=3,
        )

    inputs: MutableMapping[str, InputMetadata] = proto.MapField(
        proto.STRING,
        proto.MESSAGE,
        number=1,
        message=InputMetadata,
    )
    outputs: MutableMapping[str, OutputMetadata] = proto.MapField(
        proto.STRING,
        proto.MESSAGE,
        number=2,
        message=OutputMetadata,
    )
    feature_attributions_schema_uri: str = proto.Field(
        proto.STRING,
        number=3,
    )
    latent_space_source: str = proto.Field(
        proto.STRING,
        number=5,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
