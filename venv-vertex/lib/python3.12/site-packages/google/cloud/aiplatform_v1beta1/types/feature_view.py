














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import machine_resources
from google.protobuf import timestamp_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "FeatureView",
    },
)


class FeatureView(proto.Message):
    r

    class ServiceAgentType(proto.Enum):
        r
        SERVICE_AGENT_TYPE_UNSPECIFIED = 0
        SERVICE_AGENT_TYPE_PROJECT = 1
        SERVICE_AGENT_TYPE_FEATURE_VIEW = 2

    class BigQuerySource(proto.Message):
        r

        uri: str = proto.Field(
            proto.STRING,
            number=1,
        )
        entity_id_columns: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=2,
        )

    class SyncConfig(proto.Message):
        r

        cron: str = proto.Field(
            proto.STRING,
            number=1,
        )

    class VectorSearchConfig(proto.Message):
        r

        class DistanceMeasureType(proto.Enum):
            r
            DISTANCE_MEASURE_TYPE_UNSPECIFIED = 0
            SQUARED_L2_DISTANCE = 1
            COSINE_DISTANCE = 2
            DOT_PRODUCT_DISTANCE = 3

        class BruteForceConfig(proto.Message):
            r

        class TreeAHConfig(proto.Message):
            r

            leaf_node_embedding_count: int = proto.Field(
                proto.INT64,
                number=1,
                optional=True,
            )

        tree_ah_config: "FeatureView.VectorSearchConfig.TreeAHConfig" = proto.Field(
            proto.MESSAGE,
            number=8,
            oneof="algorithm_config",
            message="FeatureView.VectorSearchConfig.TreeAHConfig",
        )
        brute_force_config: "FeatureView.VectorSearchConfig.BruteForceConfig" = (
            proto.Field(
                proto.MESSAGE,
                number=9,
                oneof="algorithm_config",
                message="FeatureView.VectorSearchConfig.BruteForceConfig",
            )
        )
        embedding_column: str = proto.Field(
            proto.STRING,
            number=3,
        )
        filter_columns: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=4,
        )
        crowding_column: str = proto.Field(
            proto.STRING,
            number=5,
        )
        embedding_dimension: int = proto.Field(
            proto.INT32,
            number=6,
            optional=True,
        )
        distance_measure_type: "FeatureView.VectorSearchConfig.DistanceMeasureType" = (
            proto.Field(
                proto.ENUM,
                number=7,
                enum="FeatureView.VectorSearchConfig.DistanceMeasureType",
            )
        )

    class IndexConfig(proto.Message):
        r

        class DistanceMeasureType(proto.Enum):
            r
            DISTANCE_MEASURE_TYPE_UNSPECIFIED = 0
            SQUARED_L2_DISTANCE = 1
            COSINE_DISTANCE = 2
            DOT_PRODUCT_DISTANCE = 3

        class BruteForceConfig(proto.Message):
            r

        class TreeAHConfig(proto.Message):
            r

            leaf_node_embedding_count: int = proto.Field(
                proto.INT64,
                number=1,
                optional=True,
            )

        tree_ah_config: "FeatureView.IndexConfig.TreeAHConfig" = proto.Field(
            proto.MESSAGE,
            number=6,
            oneof="algorithm_config",
            message="FeatureView.IndexConfig.TreeAHConfig",
        )
        brute_force_config: "FeatureView.IndexConfig.BruteForceConfig" = proto.Field(
            proto.MESSAGE,
            number=7,
            oneof="algorithm_config",
            message="FeatureView.IndexConfig.BruteForceConfig",
        )
        embedding_column: str = proto.Field(
            proto.STRING,
            number=1,
        )
        filter_columns: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=2,
        )
        crowding_column: str = proto.Field(
            proto.STRING,
            number=3,
        )
        embedding_dimension: int = proto.Field(
            proto.INT32,
            number=4,
            optional=True,
        )
        distance_measure_type: "FeatureView.IndexConfig.DistanceMeasureType" = (
            proto.Field(
                proto.ENUM,
                number=5,
                enum="FeatureView.IndexConfig.DistanceMeasureType",
            )
        )

    class FeatureRegistrySource(proto.Message):
        r

        class FeatureGroup(proto.Message):
            r

            feature_group_id: str = proto.Field(
                proto.STRING,
                number=1,
            )
            feature_ids: MutableSequence[str] = proto.RepeatedField(
                proto.STRING,
                number=2,
            )

        feature_groups: MutableSequence[
            "FeatureView.FeatureRegistrySource.FeatureGroup"
        ] = proto.RepeatedField(
            proto.MESSAGE,
            number=1,
            message="FeatureView.FeatureRegistrySource.FeatureGroup",
        )
        project_number: int = proto.Field(
            proto.INT64,
            number=2,
            optional=True,
        )

    class VertexRagSource(proto.Message):
        r

        uri: str = proto.Field(
            proto.STRING,
            number=1,
        )
        rag_corpus_id: int = proto.Field(
            proto.INT64,
            number=2,
        )

    class OptimizedConfig(proto.Message):
        r

        automatic_resources: machine_resources.AutomaticResources = proto.Field(
            proto.MESSAGE,
            number=7,
            message=machine_resources.AutomaticResources,
        )

    big_query_source: BigQuerySource = proto.Field(
        proto.MESSAGE,
        number=6,
        oneof="source",
        message=BigQuerySource,
    )
    feature_registry_source: FeatureRegistrySource = proto.Field(
        proto.MESSAGE,
        number=9,
        oneof="source",
        message=FeatureRegistrySource,
    )
    vertex_rag_source: VertexRagSource = proto.Field(
        proto.MESSAGE,
        number=18,
        oneof="source",
        message=VertexRagSource,
    )
    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    create_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=2,
        message=timestamp_pb2.Timestamp,
    )
    update_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=3,
        message=timestamp_pb2.Timestamp,
    )
    etag: str = proto.Field(
        proto.STRING,
        number=4,
    )
    labels: MutableMapping[str, str] = proto.MapField(
        proto.STRING,
        proto.STRING,
        number=5,
    )
    sync_config: SyncConfig = proto.Field(
        proto.MESSAGE,
        number=7,
        message=SyncConfig,
    )
    vector_search_config: VectorSearchConfig = proto.Field(
        proto.MESSAGE,
        number=8,
        message=VectorSearchConfig,
    )
    index_config: IndexConfig = proto.Field(
        proto.MESSAGE,
        number=15,
        message=IndexConfig,
    )
    optimized_config: OptimizedConfig = proto.Field(
        proto.MESSAGE,
        number=16,
        message=OptimizedConfig,
    )
    service_agent_type: ServiceAgentType = proto.Field(
        proto.ENUM,
        number=14,
        enum=ServiceAgentType,
    )
    service_account_email: str = proto.Field(
        proto.STRING,
        number=13,
    )
    satisfies_pzs: bool = proto.Field(
        proto.BOOL,
        number=19,
    )
    satisfies_pzi: bool = proto.Field(
        proto.BOOL,
        number=20,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
