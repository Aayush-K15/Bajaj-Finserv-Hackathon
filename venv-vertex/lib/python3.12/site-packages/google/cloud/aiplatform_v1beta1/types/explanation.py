














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import explanation_metadata
from google.cloud.aiplatform_v1beta1.types import io
from google.protobuf import struct_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "Explanation",
        "ModelExplanation",
        "Attribution",
        "Neighbor",
        "ExplanationSpec",
        "ExplanationParameters",
        "SampledShapleyAttribution",
        "IntegratedGradientsAttribution",
        "XraiAttribution",
        "SmoothGradConfig",
        "FeatureNoiseSigma",
        "BlurBaselineConfig",
        "Examples",
        "Presets",
        "ExplanationSpecOverride",
        "ExplanationMetadataOverride",
        "ExamplesOverride",
        "ExamplesRestrictionsNamespace",
    },
)


class Explanation(proto.Message):
    r

    attributions: MutableSequence["Attribution"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="Attribution",
    )
    neighbors: MutableSequence["Neighbor"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="Neighbor",
    )


class ModelExplanation(proto.Message):
    r

    mean_attributions: MutableSequence["Attribution"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="Attribution",
    )


class Attribution(proto.Message):
    r

    baseline_output_value: float = proto.Field(
        proto.DOUBLE,
        number=1,
    )
    instance_output_value: float = proto.Field(
        proto.DOUBLE,
        number=2,
    )
    feature_attributions: struct_pb2.Value = proto.Field(
        proto.MESSAGE,
        number=3,
        message=struct_pb2.Value,
    )
    output_index: MutableSequence[int] = proto.RepeatedField(
        proto.INT32,
        number=4,
    )
    output_display_name: str = proto.Field(
        proto.STRING,
        number=5,
    )
    approximation_error: float = proto.Field(
        proto.DOUBLE,
        number=6,
    )
    output_name: str = proto.Field(
        proto.STRING,
        number=7,
    )


class Neighbor(proto.Message):
    r

    neighbor_id: str = proto.Field(
        proto.STRING,
        number=1,
    )
    neighbor_distance: float = proto.Field(
        proto.DOUBLE,
        number=2,
    )


class ExplanationSpec(proto.Message):
    r

    parameters: "ExplanationParameters" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="ExplanationParameters",
    )
    metadata: explanation_metadata.ExplanationMetadata = proto.Field(
        proto.MESSAGE,
        number=2,
        message=explanation_metadata.ExplanationMetadata,
    )


class ExplanationParameters(proto.Message):
    r

    sampled_shapley_attribution: "SampledShapleyAttribution" = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="method",
        message="SampledShapleyAttribution",
    )
    integrated_gradients_attribution: "IntegratedGradientsAttribution" = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="method",
        message="IntegratedGradientsAttribution",
    )
    xrai_attribution: "XraiAttribution" = proto.Field(
        proto.MESSAGE,
        number=3,
        oneof="method",
        message="XraiAttribution",
    )
    examples: "Examples" = proto.Field(
        proto.MESSAGE,
        number=7,
        oneof="method",
        message="Examples",
    )
    top_k: int = proto.Field(
        proto.INT32,
        number=4,
    )
    output_indices: struct_pb2.ListValue = proto.Field(
        proto.MESSAGE,
        number=5,
        message=struct_pb2.ListValue,
    )


class SampledShapleyAttribution(proto.Message):
    r

    path_count: int = proto.Field(
        proto.INT32,
        number=1,
    )


class IntegratedGradientsAttribution(proto.Message):
    r

    step_count: int = proto.Field(
        proto.INT32,
        number=1,
    )
    smooth_grad_config: "SmoothGradConfig" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="SmoothGradConfig",
    )
    blur_baseline_config: "BlurBaselineConfig" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="BlurBaselineConfig",
    )


class XraiAttribution(proto.Message):
    r

    step_count: int = proto.Field(
        proto.INT32,
        number=1,
    )
    smooth_grad_config: "SmoothGradConfig" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="SmoothGradConfig",
    )
    blur_baseline_config: "BlurBaselineConfig" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="BlurBaselineConfig",
    )


class SmoothGradConfig(proto.Message):
    r

    noise_sigma: float = proto.Field(
        proto.FLOAT,
        number=1,
        oneof="GradientNoiseSigma",
    )
    feature_noise_sigma: "FeatureNoiseSigma" = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="GradientNoiseSigma",
        message="FeatureNoiseSigma",
    )
    noisy_sample_count: int = proto.Field(
        proto.INT32,
        number=3,
    )


class FeatureNoiseSigma(proto.Message):
    r

    class NoiseSigmaForFeature(proto.Message):
        r

        name: str = proto.Field(
            proto.STRING,
            number=1,
        )
        sigma: float = proto.Field(
            proto.FLOAT,
            number=2,
        )

    noise_sigma: MutableSequence[NoiseSigmaForFeature] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=NoiseSigmaForFeature,
    )


class BlurBaselineConfig(proto.Message):
    r

    max_blur_sigma: float = proto.Field(
        proto.FLOAT,
        number=1,
    )


class Examples(proto.Message):
    r

    class ExampleGcsSource(proto.Message):
        r

        class DataFormat(proto.Enum):
            r
            DATA_FORMAT_UNSPECIFIED = 0
            JSONL = 1

        data_format: "Examples.ExampleGcsSource.DataFormat" = proto.Field(
            proto.ENUM,
            number=1,
            enum="Examples.ExampleGcsSource.DataFormat",
        )
        gcs_source: io.GcsSource = proto.Field(
            proto.MESSAGE,
            number=2,
            message=io.GcsSource,
        )

    example_gcs_source: ExampleGcsSource = proto.Field(
        proto.MESSAGE,
        number=5,
        oneof="source",
        message=ExampleGcsSource,
    )
    nearest_neighbor_search_config: struct_pb2.Value = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="config",
        message=struct_pb2.Value,
    )
    presets: "Presets" = proto.Field(
        proto.MESSAGE,
        number=4,
        oneof="config",
        message="Presets",
    )
    gcs_source: io.GcsSource = proto.Field(
        proto.MESSAGE,
        number=1,
        message=io.GcsSource,
    )
    neighbor_count: int = proto.Field(
        proto.INT32,
        number=3,
    )


class Presets(proto.Message):
    r

    class Query(proto.Enum):
        r
        PRECISE = 0
        FAST = 1

    class Modality(proto.Enum):
        r
        MODALITY_UNSPECIFIED = 0
        IMAGE = 1
        TEXT = 2
        TABULAR = 3

    query: Query = proto.Field(
        proto.ENUM,
        number=1,
        optional=True,
        enum=Query,
    )
    modality: Modality = proto.Field(
        proto.ENUM,
        number=2,
        enum=Modality,
    )


class ExplanationSpecOverride(proto.Message):
    r

    parameters: "ExplanationParameters" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="ExplanationParameters",
    )
    metadata: "ExplanationMetadataOverride" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="ExplanationMetadataOverride",
    )
    examples_override: "ExamplesOverride" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="ExamplesOverride",
    )


class ExplanationMetadataOverride(proto.Message):
    r

    class InputMetadataOverride(proto.Message):
        r

        input_baselines: MutableSequence[struct_pb2.Value] = proto.RepeatedField(
            proto.MESSAGE,
            number=1,
            message=struct_pb2.Value,
        )

    inputs: MutableMapping[str, InputMetadataOverride] = proto.MapField(
        proto.STRING,
        proto.MESSAGE,
        number=1,
        message=InputMetadataOverride,
    )


class ExamplesOverride(proto.Message):
    r

    class DataFormat(proto.Enum):
        r
        DATA_FORMAT_UNSPECIFIED = 0
        INSTANCES = 1
        EMBEDDINGS = 2

    neighbor_count: int = proto.Field(
        proto.INT32,
        number=1,
    )
    crowding_count: int = proto.Field(
        proto.INT32,
        number=2,
    )
    restrictions: MutableSequence[
        "ExamplesRestrictionsNamespace"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=3,
        message="ExamplesRestrictionsNamespace",
    )
    return_embeddings: bool = proto.Field(
        proto.BOOL,
        number=4,
    )
    data_format: DataFormat = proto.Field(
        proto.ENUM,
        number=5,
        enum=DataFormat,
    )


class ExamplesRestrictionsNamespace(proto.Message):
    r

    namespace_name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    allow: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )
    deny: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=3,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
