














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import explanation
from google.cloud.aiplatform_v1beta1.types import io
from google.cloud.aiplatform_v1beta1.types import machine_resources
from google.cloud.aiplatform_v1beta1.types import model_monitoring_alert
from google.type import interval_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "ModelMonitoringSpec",
        "ModelMonitoringObjectiveSpec",
        "ModelMonitoringOutputSpec",
        "ModelMonitoringInput",
        "ModelMonitoringNotificationSpec",
    },
)


class ModelMonitoringSpec(proto.Message):
    r

    objective_spec: "ModelMonitoringObjectiveSpec" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="ModelMonitoringObjectiveSpec",
    )
    notification_spec: "ModelMonitoringNotificationSpec" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="ModelMonitoringNotificationSpec",
    )
    output_spec: "ModelMonitoringOutputSpec" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="ModelMonitoringOutputSpec",
    )


class ModelMonitoringObjectiveSpec(proto.Message):
    r

    class DataDriftSpec(proto.Message):
        r

        features: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=1,
        )
        categorical_metric_type: str = proto.Field(
            proto.STRING,
            number=2,
        )
        numeric_metric_type: str = proto.Field(
            proto.STRING,
            number=3,
        )
        default_categorical_alert_condition: model_monitoring_alert.ModelMonitoringAlertCondition = proto.Field(
            proto.MESSAGE,
            number=4,
            message=model_monitoring_alert.ModelMonitoringAlertCondition,
        )
        default_numeric_alert_condition: model_monitoring_alert.ModelMonitoringAlertCondition = proto.Field(
            proto.MESSAGE,
            number=5,
            message=model_monitoring_alert.ModelMonitoringAlertCondition,
        )
        feature_alert_conditions: MutableMapping[
            str, model_monitoring_alert.ModelMonitoringAlertCondition
        ] = proto.MapField(
            proto.STRING,
            proto.MESSAGE,
            number=6,
            message=model_monitoring_alert.ModelMonitoringAlertCondition,
        )

    class FeatureAttributionSpec(proto.Message):
        r

        features: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=1,
        )
        default_alert_condition: model_monitoring_alert.ModelMonitoringAlertCondition = proto.Field(
            proto.MESSAGE,
            number=2,
            message=model_monitoring_alert.ModelMonitoringAlertCondition,
        )
        feature_alert_conditions: MutableMapping[
            str, model_monitoring_alert.ModelMonitoringAlertCondition
        ] = proto.MapField(
            proto.STRING,
            proto.MESSAGE,
            number=3,
            message=model_monitoring_alert.ModelMonitoringAlertCondition,
        )
        batch_explanation_dedicated_resources: machine_resources.BatchDedicatedResources = proto.Field(
            proto.MESSAGE,
            number=4,
            message=machine_resources.BatchDedicatedResources,
        )

    class TabularObjective(proto.Message):
        r

        feature_drift_spec: "ModelMonitoringObjectiveSpec.DataDriftSpec" = proto.Field(
            proto.MESSAGE,
            number=10,
            message="ModelMonitoringObjectiveSpec.DataDriftSpec",
        )
        prediction_output_drift_spec: "ModelMonitoringObjectiveSpec.DataDriftSpec" = (
            proto.Field(
                proto.MESSAGE,
                number=11,
                message="ModelMonitoringObjectiveSpec.DataDriftSpec",
            )
        )
        feature_attribution_spec: "ModelMonitoringObjectiveSpec.FeatureAttributionSpec" = proto.Field(
            proto.MESSAGE,
            number=12,
            message="ModelMonitoringObjectiveSpec.FeatureAttributionSpec",
        )

    tabular_objective: TabularObjective = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="objective",
        message=TabularObjective,
    )
    explanation_spec: explanation.ExplanationSpec = proto.Field(
        proto.MESSAGE,
        number=3,
        message=explanation.ExplanationSpec,
    )
    baseline_dataset: "ModelMonitoringInput" = proto.Field(
        proto.MESSAGE,
        number=4,
        message="ModelMonitoringInput",
    )
    target_dataset: "ModelMonitoringInput" = proto.Field(
        proto.MESSAGE,
        number=5,
        message="ModelMonitoringInput",
    )


class ModelMonitoringOutputSpec(proto.Message):
    r

    gcs_base_directory: io.GcsDestination = proto.Field(
        proto.MESSAGE,
        number=1,
        message=io.GcsDestination,
    )


class ModelMonitoringInput(proto.Message):
    r

    class ModelMonitoringDataset(proto.Message):
        r

        class ModelMonitoringGcsSource(proto.Message):
            r

            class DataFormat(proto.Enum):
                r
                DATA_FORMAT_UNSPECIFIED = 0
                CSV = 1
                TF_RECORD = 2
                JSONL = 3

            gcs_uri: str = proto.Field(
                proto.STRING,
                number=1,
            )
            format_: "ModelMonitoringInput.ModelMonitoringDataset.ModelMonitoringGcsSource.DataFormat" = proto.Field(
                proto.ENUM,
                number=2,
                enum="ModelMonitoringInput.ModelMonitoringDataset.ModelMonitoringGcsSource.DataFormat",
            )

        class ModelMonitoringBigQuerySource(proto.Message):
            r

            table_uri: str = proto.Field(
                proto.STRING,
                number=1,
                oneof="connection",
            )
            query: str = proto.Field(
                proto.STRING,
                number=2,
                oneof="connection",
            )

        vertex_dataset: str = proto.Field(
            proto.STRING,
            number=1,
            oneof="data_location",
        )
        gcs_source: "ModelMonitoringInput.ModelMonitoringDataset.ModelMonitoringGcsSource" = proto.Field(
            proto.MESSAGE,
            number=2,
            oneof="data_location",
            message="ModelMonitoringInput.ModelMonitoringDataset.ModelMonitoringGcsSource",
        )
        bigquery_source: "ModelMonitoringInput.ModelMonitoringDataset.ModelMonitoringBigQuerySource" = proto.Field(
            proto.MESSAGE,
            number=6,
            oneof="data_location",
            message="ModelMonitoringInput.ModelMonitoringDataset.ModelMonitoringBigQuerySource",
        )
        timestamp_field: str = proto.Field(
            proto.STRING,
            number=7,
        )

    class BatchPredictionOutput(proto.Message):
        r

        batch_prediction_job: str = proto.Field(
            proto.STRING,
            number=1,
        )

    class VertexEndpointLogs(proto.Message):
        r

        endpoints: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=1,
        )

    class TimeOffset(proto.Message):
        r

        offset: str = proto.Field(
            proto.STRING,
            number=1,
        )
        window: str = proto.Field(
            proto.STRING,
            number=2,
        )

    columnized_dataset: ModelMonitoringDataset = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="dataset",
        message=ModelMonitoringDataset,
    )
    batch_prediction_output: BatchPredictionOutput = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="dataset",
        message=BatchPredictionOutput,
    )
    vertex_endpoint_logs: VertexEndpointLogs = proto.Field(
        proto.MESSAGE,
        number=3,
        oneof="dataset",
        message=VertexEndpointLogs,
    )
    time_interval: interval_pb2.Interval = proto.Field(
        proto.MESSAGE,
        number=6,
        oneof="time_spec",
        message=interval_pb2.Interval,
    )
    time_offset: TimeOffset = proto.Field(
        proto.MESSAGE,
        number=7,
        oneof="time_spec",
        message=TimeOffset,
    )


class ModelMonitoringNotificationSpec(proto.Message):
    r

    class EmailConfig(proto.Message):
        r

        user_emails: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=1,
        )

    class NotificationChannelConfig(proto.Message):
        r

        notification_channel: str = proto.Field(
            proto.STRING,
            number=1,
        )

    email_config: EmailConfig = proto.Field(
        proto.MESSAGE,
        number=1,
        message=EmailConfig,
    )
    enable_cloud_logging: bool = proto.Field(
        proto.BOOL,
        number=2,
    )
    notification_channel_configs: MutableSequence[
        NotificationChannelConfig
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=3,
        message=NotificationChannelConfig,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
