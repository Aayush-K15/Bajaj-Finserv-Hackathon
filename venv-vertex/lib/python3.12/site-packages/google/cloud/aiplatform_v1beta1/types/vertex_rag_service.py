














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import content as gca_content
from google.cloud.aiplatform_v1beta1.types import tool
from google.cloud.aiplatform_v1beta1.types import vertex_rag_data


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "RagQuery",
        "RetrieveContextsRequest",
        "RagContexts",
        "RetrieveContextsResponse",
        "AugmentPromptRequest",
        "AugmentPromptResponse",
        "CorroborateContentRequest",
        "CorroborateContentResponse",
        "Fact",
        "Claim",
    },
)


class RagQuery(proto.Message):
    r

    class Ranking(proto.Message):
        r

        alpha: float = proto.Field(
            proto.FLOAT,
            number=1,
            optional=True,
        )

    text: str = proto.Field(
        proto.STRING,
        number=1,
        oneof="query",
    )
    similarity_top_k: int = proto.Field(
        proto.INT32,
        number=2,
    )
    ranking: Ranking = proto.Field(
        proto.MESSAGE,
        number=4,
        message=Ranking,
    )
    rag_retrieval_config: tool.RagRetrievalConfig = proto.Field(
        proto.MESSAGE,
        number=6,
        message=tool.RagRetrievalConfig,
    )


class RetrieveContextsRequest(proto.Message):
    r

    class VertexRagStore(proto.Message):
        r

        class RagResource(proto.Message):
            r

            rag_corpus: str = proto.Field(
                proto.STRING,
                number=1,
            )
            rag_file_ids: MutableSequence[str] = proto.RepeatedField(
                proto.STRING,
                number=2,
            )

        rag_corpora: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=1,
        )
        rag_resources: MutableSequence[
            "RetrieveContextsRequest.VertexRagStore.RagResource"
        ] = proto.RepeatedField(
            proto.MESSAGE,
            number=3,
            message="RetrieveContextsRequest.VertexRagStore.RagResource",
        )
        vector_distance_threshold: float = proto.Field(
            proto.DOUBLE,
            number=2,
            optional=True,
        )

    vertex_rag_store: VertexRagStore = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="data_source",
        message=VertexRagStore,
    )
    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    query: "RagQuery" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="RagQuery",
    )


class RagContexts(proto.Message):
    r

    class Context(proto.Message):
        r

        source_uri: str = proto.Field(
            proto.STRING,
            number=1,
        )
        source_display_name: str = proto.Field(
            proto.STRING,
            number=5,
        )
        text: str = proto.Field(
            proto.STRING,
            number=2,
        )
        distance: float = proto.Field(
            proto.DOUBLE,
            number=3,
        )
        sparse_distance: float = proto.Field(
            proto.DOUBLE,
            number=4,
        )
        score: float = proto.Field(
            proto.DOUBLE,
            number=6,
            optional=True,
        )
        chunk: vertex_rag_data.RagChunk = proto.Field(
            proto.MESSAGE,
            number=7,
            message=vertex_rag_data.RagChunk,
        )

    contexts: MutableSequence[Context] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=Context,
    )


class RetrieveContextsResponse(proto.Message):
    r

    contexts: "RagContexts" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="RagContexts",
    )


class AugmentPromptRequest(proto.Message):
    r

    class Model(proto.Message):
        r

        model: str = proto.Field(
            proto.STRING,
            number=1,
        )
        model_version: str = proto.Field(
            proto.STRING,
            number=2,
        )

    vertex_rag_store: tool.VertexRagStore = proto.Field(
        proto.MESSAGE,
        number=4,
        oneof="data_source",
        message=tool.VertexRagStore,
    )
    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    contents: MutableSequence[gca_content.Content] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message=gca_content.Content,
    )
    model: Model = proto.Field(
        proto.MESSAGE,
        number=3,
        message=Model,
    )


class AugmentPromptResponse(proto.Message):
    r

    augmented_prompt: MutableSequence[gca_content.Content] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_content.Content,
    )
    facts: MutableSequence["Fact"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="Fact",
    )


class CorroborateContentRequest(proto.Message):
    r

    class Parameters(proto.Message):
        r

        citation_threshold: float = proto.Field(
            proto.DOUBLE,
            number=1,
        )

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    content: gca_content.Content = proto.Field(
        proto.MESSAGE,
        number=2,
        optional=True,
        message=gca_content.Content,
    )
    facts: MutableSequence["Fact"] = proto.RepeatedField(
        proto.MESSAGE,
        number=3,
        message="Fact",
    )
    parameters: Parameters = proto.Field(
        proto.MESSAGE,
        number=4,
        message=Parameters,
    )


class CorroborateContentResponse(proto.Message):
    r

    corroboration_score: float = proto.Field(
        proto.FLOAT,
        number=1,
        optional=True,
    )
    claims: MutableSequence["Claim"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="Claim",
    )


class Fact(proto.Message):
    r

    query: str = proto.Field(
        proto.STRING,
        number=1,
        optional=True,
    )
    title: str = proto.Field(
        proto.STRING,
        number=2,
        optional=True,
    )
    uri: str = proto.Field(
        proto.STRING,
        number=3,
        optional=True,
    )
    summary: str = proto.Field(
        proto.STRING,
        number=4,
        optional=True,
    )
    vector_distance: float = proto.Field(
        proto.DOUBLE,
        number=5,
        optional=True,
    )
    score: float = proto.Field(
        proto.DOUBLE,
        number=6,
        optional=True,
    )
    chunk: vertex_rag_data.RagChunk = proto.Field(
        proto.MESSAGE,
        number=7,
        optional=True,
        message=vertex_rag_data.RagChunk,
    )


class Claim(proto.Message):
    r

    start_index: int = proto.Field(
        proto.INT32,
        number=1,
        optional=True,
    )
    end_index: int = proto.Field(
        proto.INT32,
        number=2,
        optional=True,
    )
    fact_indexes: MutableSequence[int] = proto.RepeatedField(
        proto.INT32,
        number=3,
    )
    score: float = proto.Field(
        proto.FLOAT,
        number=4,
        optional=True,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
