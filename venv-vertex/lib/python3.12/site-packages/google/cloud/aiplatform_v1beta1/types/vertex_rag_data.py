














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import api_auth as gca_api_auth
from google.cloud.aiplatform_v1beta1.types import encryption_spec as gca_encryption_spec
from google.cloud.aiplatform_v1beta1.types import io
from google.protobuf import timestamp_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "RagEmbeddingModelConfig",
        "RagVectorDbConfig",
        "FileStatus",
        "VertexAiSearchConfig",
        "CorpusStatus",
        "RagCorpus",
        "RagFile",
        "RagChunk",
        "RagFileChunkingConfig",
        "RagFileTransformationConfig",
        "RagFileParsingConfig",
        "RagFileMetadataConfig",
        "UploadRagFileConfig",
        "ImportRagFilesConfig",
        "RagManagedDbConfig",
        "RagEngineConfig",
    },
)


class RagEmbeddingModelConfig(proto.Message):
    r

    class VertexPredictionEndpoint(proto.Message):
        r

        endpoint: str = proto.Field(
            proto.STRING,
            number=1,
        )
        model: str = proto.Field(
            proto.STRING,
            number=2,
        )
        model_version_id: str = proto.Field(
            proto.STRING,
            number=3,
        )

    class SparseEmbeddingConfig(proto.Message):
        r

        class Bm25(proto.Message):
            r

            multilingual: bool = proto.Field(
                proto.BOOL,
                number=1,
            )
            k1: float = proto.Field(
                proto.FLOAT,
                number=2,
                optional=True,
            )
            b: float = proto.Field(
                proto.FLOAT,
                number=3,
                optional=True,
            )

        bm25: "RagEmbeddingModelConfig.SparseEmbeddingConfig.Bm25" = proto.Field(
            proto.MESSAGE,
            number=1,
            oneof="model",
            message="RagEmbeddingModelConfig.SparseEmbeddingConfig.Bm25",
        )

    class HybridSearchConfig(proto.Message):
        r

        sparse_embedding_config: "RagEmbeddingModelConfig.SparseEmbeddingConfig" = (
            proto.Field(
                proto.MESSAGE,
                number=1,
                message="RagEmbeddingModelConfig.SparseEmbeddingConfig",
            )
        )
        dense_embedding_model_prediction_endpoint: "RagEmbeddingModelConfig.VertexPredictionEndpoint" = proto.Field(
            proto.MESSAGE,
            number=2,
            message="RagEmbeddingModelConfig.VertexPredictionEndpoint",
        )

    vertex_prediction_endpoint: VertexPredictionEndpoint = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="model_config",
        message=VertexPredictionEndpoint,
    )
    hybrid_search_config: HybridSearchConfig = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="model_config",
        message=HybridSearchConfig,
    )


class RagVectorDbConfig(proto.Message):
    r

    class RagManagedDb(proto.Message):
        r

        class KNN(proto.Message):
            r

        class ANN(proto.Message):
            r

            tree_depth: int = proto.Field(
                proto.INT32,
                number=1,
            )
            leaf_count: int = proto.Field(
                proto.INT32,
                number=2,
            )

        knn: "RagVectorDbConfig.RagManagedDb.KNN" = proto.Field(
            proto.MESSAGE,
            number=1,
            oneof="retrieval_strategy",
            message="RagVectorDbConfig.RagManagedDb.KNN",
        )
        ann: "RagVectorDbConfig.RagManagedDb.ANN" = proto.Field(
            proto.MESSAGE,
            number=2,
            oneof="retrieval_strategy",
            message="RagVectorDbConfig.RagManagedDb.ANN",
        )

    class Weaviate(proto.Message):
        r

        http_endpoint: str = proto.Field(
            proto.STRING,
            number=1,
        )
        collection_name: str = proto.Field(
            proto.STRING,
            number=2,
        )

    class Pinecone(proto.Message):
        r

        index_name: str = proto.Field(
            proto.STRING,
            number=1,
        )

    class VertexFeatureStore(proto.Message):
        r

        feature_view_resource_name: str = proto.Field(
            proto.STRING,
            number=1,
        )

    class VertexVectorSearch(proto.Message):
        r

        index_endpoint: str = proto.Field(
            proto.STRING,
            number=1,
        )
        index: str = proto.Field(
            proto.STRING,
            number=2,
        )

    rag_managed_db: RagManagedDb = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="vector_db",
        message=RagManagedDb,
    )
    weaviate: Weaviate = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="vector_db",
        message=Weaviate,
    )
    pinecone: Pinecone = proto.Field(
        proto.MESSAGE,
        number=3,
        oneof="vector_db",
        message=Pinecone,
    )
    vertex_feature_store: VertexFeatureStore = proto.Field(
        proto.MESSAGE,
        number=4,
        oneof="vector_db",
        message=VertexFeatureStore,
    )
    vertex_vector_search: VertexVectorSearch = proto.Field(
        proto.MESSAGE,
        number=6,
        oneof="vector_db",
        message=VertexVectorSearch,
    )
    api_auth: gca_api_auth.ApiAuth = proto.Field(
        proto.MESSAGE,
        number=5,
        message=gca_api_auth.ApiAuth,
    )
    rag_embedding_model_config: "RagEmbeddingModelConfig" = proto.Field(
        proto.MESSAGE,
        number=7,
        message="RagEmbeddingModelConfig",
    )


class FileStatus(proto.Message):
    r

    class State(proto.Enum):
        r
        STATE_UNSPECIFIED = 0
        ACTIVE = 1
        ERROR = 2

    state: State = proto.Field(
        proto.ENUM,
        number=1,
        enum=State,
    )
    error_status: str = proto.Field(
        proto.STRING,
        number=2,
    )


class VertexAiSearchConfig(proto.Message):
    r

    serving_config: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CorpusStatus(proto.Message):
    r

    class State(proto.Enum):
        r
        UNKNOWN = 0
        INITIALIZED = 1
        ACTIVE = 2
        ERROR = 3

    state: State = proto.Field(
        proto.ENUM,
        number=1,
        enum=State,
    )
    error_status: str = proto.Field(
        proto.STRING,
        number=2,
    )


class RagCorpus(proto.Message):
    r

    class CorpusTypeConfig(proto.Message):
        r

        class DocumentCorpus(proto.Message):
            r

        class MemoryCorpus(proto.Message):
            r

            llm_parser: "RagFileParsingConfig.LlmParser" = proto.Field(
                proto.MESSAGE,
                number=1,
                message="RagFileParsingConfig.LlmParser",
            )

        document_corpus: "RagCorpus.CorpusTypeConfig.DocumentCorpus" = proto.Field(
            proto.MESSAGE,
            number=1,
            oneof="corpus_type_config",
            message="RagCorpus.CorpusTypeConfig.DocumentCorpus",
        )
        memory_corpus: "RagCorpus.CorpusTypeConfig.MemoryCorpus" = proto.Field(
            proto.MESSAGE,
            number=2,
            oneof="corpus_type_config",
            message="RagCorpus.CorpusTypeConfig.MemoryCorpus",
        )

    vector_db_config: "RagVectorDbConfig" = proto.Field(
        proto.MESSAGE,
        number=9,
        oneof="backend_config",
        message="RagVectorDbConfig",
    )
    vertex_ai_search_config: "VertexAiSearchConfig" = proto.Field(
        proto.MESSAGE,
        number=10,
        oneof="backend_config",
        message="VertexAiSearchConfig",
    )
    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    display_name: str = proto.Field(
        proto.STRING,
        number=2,
    )
    description: str = proto.Field(
        proto.STRING,
        number=3,
    )
    rag_embedding_model_config: "RagEmbeddingModelConfig" = proto.Field(
        proto.MESSAGE,
        number=6,
        message="RagEmbeddingModelConfig",
    )
    rag_vector_db_config: "RagVectorDbConfig" = proto.Field(
        proto.MESSAGE,
        number=7,
        message="RagVectorDbConfig",
    )
    create_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=4,
        message=timestamp_pb2.Timestamp,
    )
    update_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=5,
        message=timestamp_pb2.Timestamp,
    )
    corpus_status: "CorpusStatus" = proto.Field(
        proto.MESSAGE,
        number=8,
        message="CorpusStatus",
    )
    rag_files_count: int = proto.Field(
        proto.INT32,
        number=11,
    )
    encryption_spec: gca_encryption_spec.EncryptionSpec = proto.Field(
        proto.MESSAGE,
        number=12,
        message=gca_encryption_spec.EncryptionSpec,
    )
    corpus_type_config: CorpusTypeConfig = proto.Field(
        proto.MESSAGE,
        number=13,
        message=CorpusTypeConfig,
    )


class RagFile(proto.Message):
    r

    class RagFileType(proto.Enum):
        r
        RAG_FILE_TYPE_UNSPECIFIED = 0
        RAG_FILE_TYPE_TXT = 1
        RAG_FILE_TYPE_PDF = 2

    gcs_source: io.GcsSource = proto.Field(
        proto.MESSAGE,
        number=8,
        oneof="rag_file_source",
        message=io.GcsSource,
    )
    google_drive_source: io.GoogleDriveSource = proto.Field(
        proto.MESSAGE,
        number=9,
        oneof="rag_file_source",
        message=io.GoogleDriveSource,
    )
    direct_upload_source: io.DirectUploadSource = proto.Field(
        proto.MESSAGE,
        number=10,
        oneof="rag_file_source",
        message=io.DirectUploadSource,
    )
    slack_source: io.SlackSource = proto.Field(
        proto.MESSAGE,
        number=11,
        oneof="rag_file_source",
        message=io.SlackSource,
    )
    jira_source: io.JiraSource = proto.Field(
        proto.MESSAGE,
        number=12,
        oneof="rag_file_source",
        message=io.JiraSource,
    )
    share_point_sources: io.SharePointSources = proto.Field(
        proto.MESSAGE,
        number=14,
        oneof="rag_file_source",
        message=io.SharePointSources,
    )
    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    display_name: str = proto.Field(
        proto.STRING,
        number=2,
    )
    description: str = proto.Field(
        proto.STRING,
        number=3,
    )
    size_bytes: int = proto.Field(
        proto.INT64,
        number=4,
    )
    rag_file_type: RagFileType = proto.Field(
        proto.ENUM,
        number=5,
        enum=RagFileType,
    )
    create_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=6,
        message=timestamp_pb2.Timestamp,
    )
    update_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=7,
        message=timestamp_pb2.Timestamp,
    )
    file_status: "FileStatus" = proto.Field(
        proto.MESSAGE,
        number=13,
        message="FileStatus",
    )
    user_metadata: str = proto.Field(
        proto.STRING,
        number=15,
    )


class RagChunk(proto.Message):
    r

    class PageSpan(proto.Message):
        r

        first_page: int = proto.Field(
            proto.INT32,
            number=1,
        )
        last_page: int = proto.Field(
            proto.INT32,
            number=2,
        )

    text: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_span: PageSpan = proto.Field(
        proto.MESSAGE,
        number=2,
        optional=True,
        message=PageSpan,
    )


class RagFileChunkingConfig(proto.Message):
    r

    class FixedLengthChunking(proto.Message):
        r

        chunk_size: int = proto.Field(
            proto.INT32,
            number=1,
        )
        chunk_overlap: int = proto.Field(
            proto.INT32,
            number=2,
        )

    fixed_length_chunking: FixedLengthChunking = proto.Field(
        proto.MESSAGE,
        number=3,
        oneof="chunking_config",
        message=FixedLengthChunking,
    )
    chunk_size: int = proto.Field(
        proto.INT32,
        number=1,
    )
    chunk_overlap: int = proto.Field(
        proto.INT32,
        number=2,
    )


class RagFileTransformationConfig(proto.Message):
    r

    rag_file_chunking_config: "RagFileChunkingConfig" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="RagFileChunkingConfig",
    )


class RagFileParsingConfig(proto.Message):
    r

    class AdvancedParser(proto.Message):
        r

        use_advanced_pdf_parsing: bool = proto.Field(
            proto.BOOL,
            number=1,
        )

    class LayoutParser(proto.Message):
        r

        processor_name: str = proto.Field(
            proto.STRING,
            number=1,
        )
        max_parsing_requests_per_min: int = proto.Field(
            proto.INT32,
            number=2,
        )
        global_max_parsing_requests_per_min: int = proto.Field(
            proto.INT32,
            number=3,
        )

    class LlmParser(proto.Message):
        r

        model_name: str = proto.Field(
            proto.STRING,
            number=1,
        )
        max_parsing_requests_per_min: int = proto.Field(
            proto.INT32,
            number=2,
        )
        global_max_parsing_requests_per_min: int = proto.Field(
            proto.INT32,
            number=4,
        )
        custom_parsing_prompt: str = proto.Field(
            proto.STRING,
            number=3,
        )

    advanced_parser: AdvancedParser = proto.Field(
        proto.MESSAGE,
        number=3,
        oneof="parser",
        message=AdvancedParser,
    )
    layout_parser: LayoutParser = proto.Field(
        proto.MESSAGE,
        number=4,
        oneof="parser",
        message=LayoutParser,
    )
    llm_parser: LlmParser = proto.Field(
        proto.MESSAGE,
        number=5,
        oneof="parser",
        message=LlmParser,
    )
    use_advanced_pdf_parsing: bool = proto.Field(
        proto.BOOL,
        number=2,
    )


class RagFileMetadataConfig(proto.Message):
    r

    gcs_metadata_schema_source: io.GcsSource = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="metadata_schema_source",
        message=io.GcsSource,
    )
    google_drive_metadata_schema_source: io.GoogleDriveSource = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="metadata_schema_source",
        message=io.GoogleDriveSource,
    )
    inline_metadata_schema_source: str = proto.Field(
        proto.STRING,
        number=3,
        oneof="metadata_schema_source",
    )
    gcs_metadata_source: io.GcsSource = proto.Field(
        proto.MESSAGE,
        number=4,
        oneof="metadata_source",
        message=io.GcsSource,
    )
    google_drive_metadata_source: io.GoogleDriveSource = proto.Field(
        proto.MESSAGE,
        number=5,
        oneof="metadata_source",
        message=io.GoogleDriveSource,
    )
    inline_metadata_source: str = proto.Field(
        proto.STRING,
        number=6,
        oneof="metadata_source",
    )


class UploadRagFileConfig(proto.Message):
    r

    rag_file_chunking_config: "RagFileChunkingConfig" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="RagFileChunkingConfig",
    )
    rag_file_transformation_config: "RagFileTransformationConfig" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="RagFileTransformationConfig",
    )
    rag_file_metadata_config: "RagFileMetadataConfig" = proto.Field(
        proto.MESSAGE,
        number=4,
        message="RagFileMetadataConfig",
    )
    rag_file_parsing_config: "RagFileParsingConfig" = proto.Field(
        proto.MESSAGE,
        number=5,
        message="RagFileParsingConfig",
    )


class ImportRagFilesConfig(proto.Message):
    r

    gcs_source: io.GcsSource = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="import_source",
        message=io.GcsSource,
    )
    google_drive_source: io.GoogleDriveSource = proto.Field(
        proto.MESSAGE,
        number=3,
        oneof="import_source",
        message=io.GoogleDriveSource,
    )
    slack_source: io.SlackSource = proto.Field(
        proto.MESSAGE,
        number=6,
        oneof="import_source",
        message=io.SlackSource,
    )
    jira_source: io.JiraSource = proto.Field(
        proto.MESSAGE,
        number=7,
        oneof="import_source",
        message=io.JiraSource,
    )
    share_point_sources: io.SharePointSources = proto.Field(
        proto.MESSAGE,
        number=13,
        oneof="import_source",
        message=io.SharePointSources,
    )
    partial_failure_gcs_sink: io.GcsDestination = proto.Field(
        proto.MESSAGE,
        number=11,
        oneof="partial_failure_sink",
        message=io.GcsDestination,
    )
    partial_failure_bigquery_sink: io.BigQueryDestination = proto.Field(
        proto.MESSAGE,
        number=12,
        oneof="partial_failure_sink",
        message=io.BigQueryDestination,
    )
    import_result_gcs_sink: io.GcsDestination = proto.Field(
        proto.MESSAGE,
        number=14,
        oneof="import_result_sink",
        message=io.GcsDestination,
    )
    import_result_bigquery_sink: io.BigQueryDestination = proto.Field(
        proto.MESSAGE,
        number=15,
        oneof="import_result_sink",
        message=io.BigQueryDestination,
    )
    rag_file_chunking_config: "RagFileChunkingConfig" = proto.Field(
        proto.MESSAGE,
        number=4,
        message="RagFileChunkingConfig",
    )
    rag_file_transformation_config: "RagFileTransformationConfig" = proto.Field(
        proto.MESSAGE,
        number=16,
        message="RagFileTransformationConfig",
    )
    rag_file_parsing_config: "RagFileParsingConfig" = proto.Field(
        proto.MESSAGE,
        number=8,
        message="RagFileParsingConfig",
    )
    rag_file_metadata_config: "RagFileMetadataConfig" = proto.Field(
        proto.MESSAGE,
        number=17,
        message="RagFileMetadataConfig",
    )
    max_embedding_requests_per_min: int = proto.Field(
        proto.INT32,
        number=5,
    )
    global_max_embedding_requests_per_min: int = proto.Field(
        proto.INT32,
        number=18,
    )
    rebuild_ann_index: bool = proto.Field(
        proto.BOOL,
        number=19,
    )


class RagManagedDbConfig(proto.Message):
    r

    class Enterprise(proto.Message):
        r

    class Scaled(proto.Message):
        r

    class Basic(proto.Message):
        r

    class Unprovisioned(proto.Message):
        r

    enterprise: Enterprise = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="tier",
        message=Enterprise,
    )
    scaled: Scaled = proto.Field(
        proto.MESSAGE,
        number=4,
        oneof="tier",
        message=Scaled,
    )
    basic: Basic = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="tier",
        message=Basic,
    )
    unprovisioned: Unprovisioned = proto.Field(
        proto.MESSAGE,
        number=3,
        oneof="tier",
        message=Unprovisioned,
    )


class RagEngineConfig(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    rag_managed_db_config: "RagManagedDbConfig" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="RagManagedDbConfig",
    )


__all__ = tuple(sorted(__protobuf__.manifest))
