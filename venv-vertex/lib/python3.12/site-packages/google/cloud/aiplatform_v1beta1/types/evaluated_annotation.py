














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import explanation as gca_explanation
from google.protobuf import struct_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "EvaluatedAnnotation",
        "EvaluatedAnnotationExplanation",
        "ErrorAnalysisAnnotation",
    },
)


class EvaluatedAnnotation(proto.Message):
    r

    class EvaluatedAnnotationType(proto.Enum):
        r
        EVALUATED_ANNOTATION_TYPE_UNSPECIFIED = 0
        TRUE_POSITIVE = 1
        FALSE_POSITIVE = 2
        FALSE_NEGATIVE = 3

    type_: EvaluatedAnnotationType = proto.Field(
        proto.ENUM,
        number=1,
        enum=EvaluatedAnnotationType,
    )
    predictions: MutableSequence[struct_pb2.Value] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message=struct_pb2.Value,
    )
    ground_truths: MutableSequence[struct_pb2.Value] = proto.RepeatedField(
        proto.MESSAGE,
        number=3,
        message=struct_pb2.Value,
    )
    data_item_payload: struct_pb2.Value = proto.Field(
        proto.MESSAGE,
        number=5,
        message=struct_pb2.Value,
    )
    evaluated_data_item_view_id: str = proto.Field(
        proto.STRING,
        number=6,
    )
    explanations: MutableSequence[
        "EvaluatedAnnotationExplanation"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=8,
        message="EvaluatedAnnotationExplanation",
    )
    error_analysis_annotations: MutableSequence[
        "ErrorAnalysisAnnotation"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=9,
        message="ErrorAnalysisAnnotation",
    )


class EvaluatedAnnotationExplanation(proto.Message):
    r

    explanation_type: str = proto.Field(
        proto.STRING,
        number=1,
    )
    explanation: gca_explanation.Explanation = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_explanation.Explanation,
    )


class ErrorAnalysisAnnotation(proto.Message):
    r

    class QueryType(proto.Enum):
        r
        QUERY_TYPE_UNSPECIFIED = 0
        ALL_SIMILAR = 1
        SAME_CLASS_SIMILAR = 2
        SAME_CLASS_DISSIMILAR = 3

    class AttributedItem(proto.Message):
        r

        annotation_resource_name: str = proto.Field(
            proto.STRING,
            number=1,
        )
        distance: float = proto.Field(
            proto.DOUBLE,
            number=2,
        )

    attributed_items: MutableSequence[AttributedItem] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=AttributedItem,
    )
    query_type: QueryType = proto.Field(
        proto.ENUM,
        number=2,
        enum=QueryType,
    )
    outlier_score: float = proto.Field(
        proto.DOUBLE,
        number=3,
    )
    outlier_threshold: float = proto.Field(
        proto.DOUBLE,
        number=4,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
