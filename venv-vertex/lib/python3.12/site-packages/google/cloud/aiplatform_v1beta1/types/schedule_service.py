














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import schedule as gca_schedule
from google.protobuf import field_mask_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "CreateScheduleRequest",
        "GetScheduleRequest",
        "ListSchedulesRequest",
        "ListSchedulesResponse",
        "DeleteScheduleRequest",
        "PauseScheduleRequest",
        "ResumeScheduleRequest",
        "UpdateScheduleRequest",
    },
)


class CreateScheduleRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    schedule: gca_schedule.Schedule = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_schedule.Schedule,
    )


class GetScheduleRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListSchedulesRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=5,
    )


class ListSchedulesResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    schedules: MutableSequence[gca_schedule.Schedule] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_schedule.Schedule,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteScheduleRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class PauseScheduleRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ResumeScheduleRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    catch_up: bool = proto.Field(
        proto.BOOL,
        number=2,
    )


class UpdateScheduleRequest(proto.Message):
    r

    schedule: gca_schedule.Schedule = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_schedule.Schedule,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
