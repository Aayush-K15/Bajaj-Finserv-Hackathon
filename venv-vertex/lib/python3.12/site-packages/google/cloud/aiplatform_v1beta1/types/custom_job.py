














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import encryption_spec as gca_encryption_spec
from google.cloud.aiplatform_v1beta1.types import env_var
from google.cloud.aiplatform_v1beta1.types import io
from google.cloud.aiplatform_v1beta1.types import job_state
from google.cloud.aiplatform_v1beta1.types import machine_resources
from google.cloud.aiplatform_v1beta1.types import service_networking
from google.protobuf import duration_pb2  
from google.protobuf import timestamp_pb2  
from google.rpc import status_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "CustomJob",
        "CustomJobSpec",
        "WorkerPoolSpec",
        "ContainerSpec",
        "PythonPackageSpec",
        "Scheduling",
    },
)


class CustomJob(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    display_name: str = proto.Field(
        proto.STRING,
        number=2,
    )
    job_spec: "CustomJobSpec" = proto.Field(
        proto.MESSAGE,
        number=4,
        message="CustomJobSpec",
    )
    state: job_state.JobState = proto.Field(
        proto.ENUM,
        number=5,
        enum=job_state.JobState,
    )
    create_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=6,
        message=timestamp_pb2.Timestamp,
    )
    start_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=7,
        message=timestamp_pb2.Timestamp,
    )
    end_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=8,
        message=timestamp_pb2.Timestamp,
    )
    update_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=9,
        message=timestamp_pb2.Timestamp,
    )
    error: status_pb2.Status = proto.Field(
        proto.MESSAGE,
        number=10,
        message=status_pb2.Status,
    )
    labels: MutableMapping[str, str] = proto.MapField(
        proto.STRING,
        proto.STRING,
        number=11,
    )
    encryption_spec: gca_encryption_spec.EncryptionSpec = proto.Field(
        proto.MESSAGE,
        number=12,
        message=gca_encryption_spec.EncryptionSpec,
    )
    web_access_uris: MutableMapping[str, str] = proto.MapField(
        proto.STRING,
        proto.STRING,
        number=16,
    )
    satisfies_pzs: bool = proto.Field(
        proto.BOOL,
        number=18,
    )
    satisfies_pzi: bool = proto.Field(
        proto.BOOL,
        number=19,
    )


class CustomJobSpec(proto.Message):
    r

    persistent_resource_id: str = proto.Field(
        proto.STRING,
        number=14,
    )
    worker_pool_specs: MutableSequence["WorkerPoolSpec"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="WorkerPoolSpec",
    )
    scheduling: "Scheduling" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="Scheduling",
    )
    service_account: str = proto.Field(
        proto.STRING,
        number=4,
    )
    network: str = proto.Field(
        proto.STRING,
        number=5,
    )
    reserved_ip_ranges: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=13,
    )
    psc_interface_config: service_networking.PscInterfaceConfig = proto.Field(
        proto.MESSAGE,
        number=21,
        message=service_networking.PscInterfaceConfig,
    )
    base_output_directory: io.GcsDestination = proto.Field(
        proto.MESSAGE,
        number=6,
        message=io.GcsDestination,
    )
    protected_artifact_location_id: str = proto.Field(
        proto.STRING,
        number=19,
    )
    tensorboard: str = proto.Field(
        proto.STRING,
        number=7,
    )
    enable_web_access: bool = proto.Field(
        proto.BOOL,
        number=10,
    )
    enable_dashboard_access: bool = proto.Field(
        proto.BOOL,
        number=16,
    )
    experiment: str = proto.Field(
        proto.STRING,
        number=17,
    )
    experiment_run: str = proto.Field(
        proto.STRING,
        number=18,
    )
    models: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=20,
    )


class WorkerPoolSpec(proto.Message):
    r

    container_spec: "ContainerSpec" = proto.Field(
        proto.MESSAGE,
        number=6,
        oneof="task",
        message="ContainerSpec",
    )
    python_package_spec: "PythonPackageSpec" = proto.Field(
        proto.MESSAGE,
        number=7,
        oneof="task",
        message="PythonPackageSpec",
    )
    machine_spec: machine_resources.MachineSpec = proto.Field(
        proto.MESSAGE,
        number=1,
        message=machine_resources.MachineSpec,
    )
    replica_count: int = proto.Field(
        proto.INT64,
        number=2,
    )
    nfs_mounts: MutableSequence[machine_resources.NfsMount] = proto.RepeatedField(
        proto.MESSAGE,
        number=4,
        message=machine_resources.NfsMount,
    )
    disk_spec: machine_resources.DiskSpec = proto.Field(
        proto.MESSAGE,
        number=5,
        message=machine_resources.DiskSpec,
    )


class ContainerSpec(proto.Message):
    r

    image_uri: str = proto.Field(
        proto.STRING,
        number=1,
    )
    command: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )
    args: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=3,
    )
    env: MutableSequence[env_var.EnvVar] = proto.RepeatedField(
        proto.MESSAGE,
        number=4,
        message=env_var.EnvVar,
    )


class PythonPackageSpec(proto.Message):
    r

    executor_image_uri: str = proto.Field(
        proto.STRING,
        number=1,
    )
    package_uris: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )
    python_module: str = proto.Field(
        proto.STRING,
        number=3,
    )
    args: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=4,
    )
    env: MutableSequence[env_var.EnvVar] = proto.RepeatedField(
        proto.MESSAGE,
        number=5,
        message=env_var.EnvVar,
    )


class Scheduling(proto.Message):
    r

    class Strategy(proto.Enum):
        r
        STRATEGY_UNSPECIFIED = 0
        ON_DEMAND = 1
        LOW_COST = 2
        STANDARD = 3
        SPOT = 4
        FLEX_START = 6

    timeout: duration_pb2.Duration = proto.Field(
        proto.MESSAGE,
        number=1,
        message=duration_pb2.Duration,
    )
    restart_job_on_worker_restart: bool = proto.Field(
        proto.BOOL,
        number=3,
    )
    strategy: Strategy = proto.Field(
        proto.ENUM,
        number=4,
        enum=Strategy,
    )
    disable_retries: bool = proto.Field(
        proto.BOOL,
        number=5,
    )
    max_wait_duration: duration_pb2.Duration = proto.Field(
        proto.MESSAGE,
        number=6,
        message=duration_pb2.Duration,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
