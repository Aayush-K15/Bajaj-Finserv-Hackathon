














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import operation
from google.cloud.aiplatform_v1beta1.types import vertex_rag_data
from google.rpc import status_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "CreateRagCorpusRequest",
        "GetRagCorpusRequest",
        "ListRagCorporaRequest",
        "ListRagCorporaResponse",
        "DeleteRagCorpusRequest",
        "UploadRagFileRequest",
        "UploadRagFileResponse",
        "ImportRagFilesRequest",
        "ImportRagFilesResponse",
        "GetRagFileRequest",
        "ListRagFilesRequest",
        "ListRagFilesResponse",
        "DeleteRagFileRequest",
        "CreateRagCorpusOperationMetadata",
        "GetRagEngineConfigRequest",
        "UpdateRagCorpusRequest",
        "UpdateRagCorpusOperationMetadata",
        "ImportRagFilesOperationMetadata",
        "UpdateRagEngineConfigRequest",
        "UpdateRagEngineConfigOperationMetadata",
    },
)


class CreateRagCorpusRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    rag_corpus: vertex_rag_data.RagCorpus = proto.Field(
        proto.MESSAGE,
        number=2,
        message=vertex_rag_data.RagCorpus,
    )


class GetRagCorpusRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListRagCorporaRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )


class ListRagCorporaResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    rag_corpora: MutableSequence[vertex_rag_data.RagCorpus] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=vertex_rag_data.RagCorpus,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteRagCorpusRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    force: bool = proto.Field(
        proto.BOOL,
        number=2,
    )


class UploadRagFileRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    rag_file: vertex_rag_data.RagFile = proto.Field(
        proto.MESSAGE,
        number=2,
        message=vertex_rag_data.RagFile,
    )
    upload_rag_file_config: vertex_rag_data.UploadRagFileConfig = proto.Field(
        proto.MESSAGE,
        number=5,
        message=vertex_rag_data.UploadRagFileConfig,
    )


class UploadRagFileResponse(proto.Message):
    r

    rag_file: vertex_rag_data.RagFile = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="result",
        message=vertex_rag_data.RagFile,
    )
    error: status_pb2.Status = proto.Field(
        proto.MESSAGE,
        number=4,
        oneof="result",
        message=status_pb2.Status,
    )


class ImportRagFilesRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    import_rag_files_config: vertex_rag_data.ImportRagFilesConfig = proto.Field(
        proto.MESSAGE,
        number=2,
        message=vertex_rag_data.ImportRagFilesConfig,
    )


class ImportRagFilesResponse(proto.Message):
    r

    partial_failures_gcs_path: str = proto.Field(
        proto.STRING,
        number=4,
        oneof="partial_failure_sink",
    )
    partial_failures_bigquery_table: str = proto.Field(
        proto.STRING,
        number=5,
        oneof="partial_failure_sink",
    )
    imported_rag_files_count: int = proto.Field(
        proto.INT64,
        number=1,
    )
    failed_rag_files_count: int = proto.Field(
        proto.INT64,
        number=2,
    )
    skipped_rag_files_count: int = proto.Field(
        proto.INT64,
        number=3,
    )


class GetRagFileRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListRagFilesRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )


class ListRagFilesResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    rag_files: MutableSequence[vertex_rag_data.RagFile] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=vertex_rag_data.RagFile,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteRagFileRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CreateRagCorpusOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class GetRagEngineConfigRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class UpdateRagCorpusRequest(proto.Message):
    r

    rag_corpus: vertex_rag_data.RagCorpus = proto.Field(
        proto.MESSAGE,
        number=1,
        message=vertex_rag_data.RagCorpus,
    )


class UpdateRagCorpusOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class ImportRagFilesOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )
    rag_corpus_id: int = proto.Field(
        proto.INT64,
        number=2,
    )
    import_rag_files_config: vertex_rag_data.ImportRagFilesConfig = proto.Field(
        proto.MESSAGE,
        number=3,
        message=vertex_rag_data.ImportRagFilesConfig,
    )
    progress_percentage: int = proto.Field(
        proto.INT32,
        number=4,
    )


class UpdateRagEngineConfigRequest(proto.Message):
    r

    rag_engine_config: vertex_rag_data.RagEngineConfig = proto.Field(
        proto.MESSAGE,
        number=1,
        message=vertex_rag_data.RagEngineConfig,
    )


class UpdateRagEngineConfigOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
