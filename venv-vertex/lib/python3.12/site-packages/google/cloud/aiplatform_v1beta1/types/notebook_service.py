














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import (
    notebook_execution_job as gca_notebook_execution_job,
)
from google.cloud.aiplatform_v1beta1.types import (
    notebook_runtime as gca_notebook_runtime,
)
from google.cloud.aiplatform_v1beta1.types import operation
from google.protobuf import field_mask_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "NotebookExecutionJobView",
        "CreateNotebookRuntimeTemplateRequest",
        "CreateNotebookRuntimeTemplateOperationMetadata",
        "GetNotebookRuntimeTemplateRequest",
        "ListNotebookRuntimeTemplatesRequest",
        "ListNotebookRuntimeTemplatesResponse",
        "DeleteNotebookRuntimeTemplateRequest",
        "UpdateNotebookRuntimeTemplateRequest",
        "AssignNotebookRuntimeRequest",
        "AssignNotebookRuntimeOperationMetadata",
        "GetNotebookRuntimeRequest",
        "ListNotebookRuntimesRequest",
        "ListNotebookRuntimesResponse",
        "DeleteNotebookRuntimeRequest",
        "UpgradeNotebookRuntimeRequest",
        "UpgradeNotebookRuntimeOperationMetadata",
        "UpgradeNotebookRuntimeResponse",
        "StartNotebookRuntimeRequest",
        "StartNotebookRuntimeOperationMetadata",
        "StartNotebookRuntimeResponse",
        "StopNotebookRuntimeRequest",
        "StopNotebookRuntimeOperationMetadata",
        "StopNotebookRuntimeResponse",
        "CreateNotebookExecutionJobRequest",
        "CreateNotebookExecutionJobOperationMetadata",
        "GetNotebookExecutionJobRequest",
        "ListNotebookExecutionJobsRequest",
        "ListNotebookExecutionJobsResponse",
        "DeleteNotebookExecutionJobRequest",
    },
)


class NotebookExecutionJobView(proto.Enum):
    r
    NOTEBOOK_EXECUTION_JOB_VIEW_UNSPECIFIED = 0
    NOTEBOOK_EXECUTION_JOB_VIEW_BASIC = 1
    NOTEBOOK_EXECUTION_JOB_VIEW_FULL = 2


class CreateNotebookRuntimeTemplateRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    notebook_runtime_template: gca_notebook_runtime.NotebookRuntimeTemplate = (
        proto.Field(
            proto.MESSAGE,
            number=2,
            message=gca_notebook_runtime.NotebookRuntimeTemplate,
        )
    )
    notebook_runtime_template_id: str = proto.Field(
        proto.STRING,
        number=3,
    )


class CreateNotebookRuntimeTemplateOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class GetNotebookRuntimeTemplateRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListNotebookRuntimeTemplatesRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=6,
    )


class ListNotebookRuntimeTemplatesResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    notebook_runtime_templates: MutableSequence[
        gca_notebook_runtime.NotebookRuntimeTemplate
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_notebook_runtime.NotebookRuntimeTemplate,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteNotebookRuntimeTemplateRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class UpdateNotebookRuntimeTemplateRequest(proto.Message):
    r

    notebook_runtime_template: gca_notebook_runtime.NotebookRuntimeTemplate = (
        proto.Field(
            proto.MESSAGE,
            number=1,
            message=gca_notebook_runtime.NotebookRuntimeTemplate,
        )
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )


class AssignNotebookRuntimeRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    notebook_runtime_template: str = proto.Field(
        proto.STRING,
        number=2,
    )
    notebook_runtime: gca_notebook_runtime.NotebookRuntime = proto.Field(
        proto.MESSAGE,
        number=3,
        message=gca_notebook_runtime.NotebookRuntime,
    )
    notebook_runtime_id: str = proto.Field(
        proto.STRING,
        number=4,
    )


class AssignNotebookRuntimeOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )
    progress_message: str = proto.Field(
        proto.STRING,
        number=2,
    )


class GetNotebookRuntimeRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListNotebookRuntimesRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=6,
    )


class ListNotebookRuntimesResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    notebook_runtimes: MutableSequence[
        gca_notebook_runtime.NotebookRuntime
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_notebook_runtime.NotebookRuntime,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteNotebookRuntimeRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class UpgradeNotebookRuntimeRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class UpgradeNotebookRuntimeOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )
    progress_message: str = proto.Field(
        proto.STRING,
        number=2,
    )


class UpgradeNotebookRuntimeResponse(proto.Message):
    r


class StartNotebookRuntimeRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class StartNotebookRuntimeOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )
    progress_message: str = proto.Field(
        proto.STRING,
        number=2,
    )


class StartNotebookRuntimeResponse(proto.Message):
    r


class StopNotebookRuntimeRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class StopNotebookRuntimeOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class StopNotebookRuntimeResponse(proto.Message):
    r


class CreateNotebookExecutionJobRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    notebook_execution_job: gca_notebook_execution_job.NotebookExecutionJob = (
        proto.Field(
            proto.MESSAGE,
            number=2,
            message=gca_notebook_execution_job.NotebookExecutionJob,
        )
    )
    notebook_execution_job_id: str = proto.Field(
        proto.STRING,
        number=3,
    )


class CreateNotebookExecutionJobOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )
    progress_message: str = proto.Field(
        proto.STRING,
        number=2,
    )


class GetNotebookExecutionJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    view: "NotebookExecutionJobView" = proto.Field(
        proto.ENUM,
        number=6,
        enum="NotebookExecutionJobView",
    )


class ListNotebookExecutionJobsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=5,
    )
    view: "NotebookExecutionJobView" = proto.Field(
        proto.ENUM,
        number=6,
        enum="NotebookExecutionJobView",
    )


class ListNotebookExecutionJobsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    notebook_execution_jobs: MutableSequence[
        gca_notebook_execution_job.NotebookExecutionJob
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_notebook_execution_job.NotebookExecutionJob,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteNotebookExecutionJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
