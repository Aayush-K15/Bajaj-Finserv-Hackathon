














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import index as gca_index
from google.cloud.aiplatform_v1beta1.types import operation
from google.protobuf import field_mask_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "CreateIndexRequest",
        "CreateIndexOperationMetadata",
        "GetIndexRequest",
        "ListIndexesRequest",
        "ListIndexesResponse",
        "UpdateIndexRequest",
        "UpdateIndexOperationMetadata",
        "ImportIndexRequest",
        "ImportIndexOperationMetadata",
        "DeleteIndexRequest",
        "UpsertDatapointsRequest",
        "UpsertDatapointsResponse",
        "RemoveDatapointsRequest",
        "RemoveDatapointsResponse",
        "NearestNeighborSearchOperationMetadata",
    },
)


class CreateIndexRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    index: gca_index.Index = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_index.Index,
    )


class CreateIndexOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )
    nearest_neighbor_search_operation_metadata: "NearestNeighborSearchOperationMetadata" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="NearestNeighborSearchOperationMetadata",
    )


class GetIndexRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListIndexesRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )


class ListIndexesResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    indexes: MutableSequence[gca_index.Index] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_index.Index,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class UpdateIndexRequest(proto.Message):
    r

    index: gca_index.Index = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_index.Index,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )


class UpdateIndexOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )
    nearest_neighbor_search_operation_metadata: "NearestNeighborSearchOperationMetadata" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="NearestNeighborSearchOperationMetadata",
    )


class ImportIndexRequest(proto.Message):
    r

    class ConnectorConfig(proto.Message):
        r

        class DatapointFieldMapping(proto.Message):
            r

            class Restrict(proto.Message):
                r

                namespace: str = proto.Field(
                    proto.STRING,
                    number=1,
                )
                allow_column: MutableSequence[str] = proto.RepeatedField(
                    proto.STRING,
                    number=2,
                )
                deny_column: MutableSequence[str] = proto.RepeatedField(
                    proto.STRING,
                    number=3,
                )

            class NumericRestrict(proto.Message):
                r

                class ValueType(proto.Enum):
                    r
                    VALUE_TYPE_UNSPECIFIED = 0
                    INT = 1
                    FLOAT = 2
                    DOUBLE = 3

                namespace: str = proto.Field(
                    proto.STRING,
                    number=1,
                )
                value_column: str = proto.Field(
                    proto.STRING,
                    number=2,
                )
                value_type: "ImportIndexRequest.ConnectorConfig.DatapointFieldMapping.NumericRestrict.ValueType" = proto.Field(
                    proto.ENUM,
                    number=3,
                    enum="ImportIndexRequest.ConnectorConfig.DatapointFieldMapping.NumericRestrict.ValueType",
                )

            id_column: str = proto.Field(
                proto.STRING,
                number=1,
            )
            embedding_column: str = proto.Field(
                proto.STRING,
                number=2,
            )
            restricts: MutableSequence[
                "ImportIndexRequest.ConnectorConfig.DatapointFieldMapping.Restrict"
            ] = proto.RepeatedField(
                proto.MESSAGE,
                number=3,
                message="ImportIndexRequest.ConnectorConfig.DatapointFieldMapping.Restrict",
            )
            numeric_restricts: MutableSequence[
                "ImportIndexRequest.ConnectorConfig.DatapointFieldMapping.NumericRestrict"
            ] = proto.RepeatedField(
                proto.MESSAGE,
                number=4,
                message="ImportIndexRequest.ConnectorConfig.DatapointFieldMapping.NumericRestrict",
            )
            metadata_columns: MutableSequence[str] = proto.RepeatedField(
                proto.STRING,
                number=5,
            )

        class BigQuerySourceConfig(proto.Message):
            r

            table_path: str = proto.Field(
                proto.STRING,
                number=1,
            )
            datapoint_field_mapping: "ImportIndexRequest.ConnectorConfig.DatapointFieldMapping" = proto.Field(
                proto.MESSAGE,
                number=2,
                message="ImportIndexRequest.ConnectorConfig.DatapointFieldMapping",
            )

        big_query_source_config: "ImportIndexRequest.ConnectorConfig.BigQuerySourceConfig" = proto.Field(
            proto.MESSAGE,
            number=1,
            oneof="source",
            message="ImportIndexRequest.ConnectorConfig.BigQuerySourceConfig",
        )

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    is_complete_overwrite: bool = proto.Field(
        proto.BOOL,
        number=2,
    )
    config: ConnectorConfig = proto.Field(
        proto.MESSAGE,
        number=3,
        message=ConnectorConfig,
    )


class ImportIndexOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class DeleteIndexRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class UpsertDatapointsRequest(proto.Message):
    r

    index: str = proto.Field(
        proto.STRING,
        number=1,
    )
    datapoints: MutableSequence[gca_index.IndexDatapoint] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message=gca_index.IndexDatapoint,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=3,
        message=field_mask_pb2.FieldMask,
    )


class UpsertDatapointsResponse(proto.Message):
    r


class RemoveDatapointsRequest(proto.Message):
    r

    index: str = proto.Field(
        proto.STRING,
        number=1,
    )
    datapoint_ids: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )


class RemoveDatapointsResponse(proto.Message):
    r


class NearestNeighborSearchOperationMetadata(proto.Message):
    r

    class RecordError(proto.Message):
        r

        class RecordErrorType(proto.Enum):
            r
            ERROR_TYPE_UNSPECIFIED = 0
            EMPTY_LINE = 1
            INVALID_JSON_SYNTAX = 2
            INVALID_CSV_SYNTAX = 3
            INVALID_AVRO_SYNTAX = 4
            INVALID_EMBEDDING_ID = 5
            EMBEDDING_SIZE_MISMATCH = 6
            NAMESPACE_MISSING = 7
            PARSING_ERROR = 8
            DUPLICATE_NAMESPACE = 9
            OP_IN_DATAPOINT = 10
            MULTIPLE_VALUES = 11
            INVALID_NUMERIC_VALUE = 12
            INVALID_ENCODING = 13
            INVALID_SPARSE_DIMENSIONS = 14
            INVALID_TOKEN_VALUE = 15
            INVALID_SPARSE_EMBEDDING = 16
            INVALID_EMBEDDING = 17
            INVALID_EMBEDDING_METADATA = 18
            EMBEDDING_METADATA_EXCEEDS_SIZE_LIMIT = 19

        error_type: "NearestNeighborSearchOperationMetadata.RecordError.RecordErrorType" = proto.Field(
            proto.ENUM,
            number=1,
            enum="NearestNeighborSearchOperationMetadata.RecordError.RecordErrorType",
        )
        error_message: str = proto.Field(
            proto.STRING,
            number=2,
        )
        source_gcs_uri: str = proto.Field(
            proto.STRING,
            number=3,
        )
        embedding_id: str = proto.Field(
            proto.STRING,
            number=4,
        )
        raw_record: str = proto.Field(
            proto.STRING,
            number=5,
        )

    class ContentValidationStats(proto.Message):
        r

        source_gcs_uri: str = proto.Field(
            proto.STRING,
            number=1,
        )
        valid_record_count: int = proto.Field(
            proto.INT64,
            number=2,
        )
        invalid_record_count: int = proto.Field(
            proto.INT64,
            number=3,
        )
        partial_errors: MutableSequence[
            "NearestNeighborSearchOperationMetadata.RecordError"
        ] = proto.RepeatedField(
            proto.MESSAGE,
            number=4,
            message="NearestNeighborSearchOperationMetadata.RecordError",
        )
        valid_sparse_record_count: int = proto.Field(
            proto.INT64,
            number=5,
        )
        invalid_sparse_record_count: int = proto.Field(
            proto.INT64,
            number=6,
        )

    content_validation_stats: MutableSequence[
        ContentValidationStats
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=ContentValidationStats,
    )
    data_bytes_count: int = proto.Field(
        proto.INT64,
        number=2,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
