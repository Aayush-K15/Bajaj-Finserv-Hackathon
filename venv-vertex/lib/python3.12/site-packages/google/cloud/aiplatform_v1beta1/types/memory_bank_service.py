














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import content as gca_content
from google.cloud.aiplatform_v1beta1.types import memory_bank
from google.cloud.aiplatform_v1beta1.types import operation
from google.protobuf import field_mask_pb2  
from google.protobuf import timestamp_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "CreateMemoryRequest",
        "CreateMemoryOperationMetadata",
        "GetMemoryRequest",
        "UpdateMemoryRequest",
        "UpdateMemoryOperationMetadata",
        "ListMemoriesRequest",
        "ListMemoriesResponse",
        "DeleteMemoryRequest",
        "DeleteMemoryOperationMetadata",
        "GenerateMemoriesRequest",
        "GenerateMemoriesResponse",
        "GenerateMemoriesOperationMetadata",
        "RetrieveMemoriesRequest",
        "RetrieveMemoriesResponse",
    },
)


class CreateMemoryRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    memory: memory_bank.Memory = proto.Field(
        proto.MESSAGE,
        number=2,
        message=memory_bank.Memory,
    )


class CreateMemoryOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class GetMemoryRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class UpdateMemoryRequest(proto.Message):
    r

    memory: memory_bank.Memory = proto.Field(
        proto.MESSAGE,
        number=1,
        message=memory_bank.Memory,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )


class UpdateMemoryOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class ListMemoriesRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )


class ListMemoriesResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    memories: MutableSequence[memory_bank.Memory] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=memory_bank.Memory,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteMemoryRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class DeleteMemoryOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class GenerateMemoriesRequest(proto.Message):
    r

    class VertexSessionSource(proto.Message):
        r

        session: str = proto.Field(
            proto.STRING,
            number=1,
        )
        start_time: timestamp_pb2.Timestamp = proto.Field(
            proto.MESSAGE,
            number=2,
            message=timestamp_pb2.Timestamp,
        )
        end_time: timestamp_pb2.Timestamp = proto.Field(
            proto.MESSAGE,
            number=3,
            message=timestamp_pb2.Timestamp,
        )

    class DirectContentsSource(proto.Message):
        r

        class Event(proto.Message):
            r

            content: gca_content.Content = proto.Field(
                proto.MESSAGE,
                number=1,
                message=gca_content.Content,
            )

        events: MutableSequence[
            "GenerateMemoriesRequest.DirectContentsSource.Event"
        ] = proto.RepeatedField(
            proto.MESSAGE,
            number=1,
            message="GenerateMemoriesRequest.DirectContentsSource.Event",
        )

    vertex_session_source: VertexSessionSource = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="source",
        message=VertexSessionSource,
    )
    direct_contents_source: DirectContentsSource = proto.Field(
        proto.MESSAGE,
        number=3,
        oneof="source",
        message=DirectContentsSource,
    )
    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    disable_consolidation: bool = proto.Field(
        proto.BOOL,
        number=4,
    )
    scope: MutableMapping[str, str] = proto.MapField(
        proto.STRING,
        proto.STRING,
        number=8,
    )


class GenerateMemoriesResponse(proto.Message):
    r

    class GeneratedMemory(proto.Message):
        r

        class Action(proto.Enum):
            r
            ACTION_UNSPECIFIED = 0
            CREATED = 1
            UPDATED = 2
            DELETED = 3

        memory: memory_bank.Memory = proto.Field(
            proto.MESSAGE,
            number=1,
            message=memory_bank.Memory,
        )
        action: "GenerateMemoriesResponse.GeneratedMemory.Action" = proto.Field(
            proto.ENUM,
            number=2,
            enum="GenerateMemoriesResponse.GeneratedMemory.Action",
        )

    generated_memories: MutableSequence[GeneratedMemory] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=GeneratedMemory,
    )


class GenerateMemoriesOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class RetrieveMemoriesRequest(proto.Message):
    r

    class SimilaritySearchParams(proto.Message):
        r

        search_query: str = proto.Field(
            proto.STRING,
            number=1,
        )
        top_k: int = proto.Field(
            proto.INT32,
            number=2,
        )

    class SimpleRetrievalParams(proto.Message):
        r

        page_size: int = proto.Field(
            proto.INT32,
            number=1,
        )
        page_token: str = proto.Field(
            proto.STRING,
            number=2,
        )

    similarity_search_params: SimilaritySearchParams = proto.Field(
        proto.MESSAGE,
        number=6,
        oneof="retrieval_params",
        message=SimilaritySearchParams,
    )
    simple_retrieval_params: SimpleRetrievalParams = proto.Field(
        proto.MESSAGE,
        number=7,
        oneof="retrieval_params",
        message=SimpleRetrievalParams,
    )
    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    scope: MutableMapping[str, str] = proto.MapField(
        proto.STRING,
        proto.STRING,
        number=8,
    )


class RetrieveMemoriesResponse(proto.Message):
    r

    class RetrievedMemory(proto.Message):
        r

        memory: memory_bank.Memory = proto.Field(
            proto.MESSAGE,
            number=1,
            message=memory_bank.Memory,
        )
        distance: float = proto.Field(
            proto.DOUBLE,
            number=2,
        )

    @property
    def raw_page(self):
        return self

    retrieved_memories: MutableSequence[RetrievedMemory] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=RetrievedMemory,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
