














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import model_monitor as gca_model_monitor
from google.cloud.aiplatform_v1beta1.types import model_monitoring_alert
from google.cloud.aiplatform_v1beta1.types import (
    model_monitoring_job as gca_model_monitoring_job,
)
from google.cloud.aiplatform_v1beta1.types import model_monitoring_stats
from google.cloud.aiplatform_v1beta1.types import operation
from google.protobuf import field_mask_pb2  
from google.type import interval_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "CreateModelMonitorRequest",
        "CreateModelMonitorOperationMetadata",
        "UpdateModelMonitorRequest",
        "UpdateModelMonitorOperationMetadata",
        "GetModelMonitorRequest",
        "ListModelMonitorsRequest",
        "ListModelMonitorsResponse",
        "DeleteModelMonitorRequest",
        "CreateModelMonitoringJobRequest",
        "GetModelMonitoringJobRequest",
        "ListModelMonitoringJobsRequest",
        "ListModelMonitoringJobsResponse",
        "DeleteModelMonitoringJobRequest",
        "SearchModelMonitoringStatsRequest",
        "SearchModelMonitoringStatsResponse",
        "SearchModelMonitoringAlertsRequest",
        "SearchModelMonitoringAlertsResponse",
    },
)


class CreateModelMonitorRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    model_monitor: gca_model_monitor.ModelMonitor = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_model_monitor.ModelMonitor,
    )
    model_monitor_id: str = proto.Field(
        proto.STRING,
        number=3,
    )


class CreateModelMonitorOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class UpdateModelMonitorRequest(proto.Message):
    r

    model_monitor: gca_model_monitor.ModelMonitor = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_model_monitor.ModelMonitor,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )


class UpdateModelMonitorOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class GetModelMonitorRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListModelMonitorsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )


class ListModelMonitorsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    model_monitors: MutableSequence[
        gca_model_monitor.ModelMonitor
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_model_monitor.ModelMonitor,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteModelMonitorRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    force: bool = proto.Field(
        proto.BOOL,
        number=2,
    )


class CreateModelMonitoringJobRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    model_monitoring_job: gca_model_monitoring_job.ModelMonitoringJob = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_model_monitoring_job.ModelMonitoringJob,
    )
    model_monitoring_job_id: str = proto.Field(
        proto.STRING,
        number=3,
    )


class GetModelMonitoringJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListModelMonitoringJobsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )


class ListModelMonitoringJobsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    model_monitoring_jobs: MutableSequence[
        gca_model_monitoring_job.ModelMonitoringJob
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_model_monitoring_job.ModelMonitoringJob,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteModelMonitoringJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class SearchModelMonitoringStatsRequest(proto.Message):
    r

    model_monitor: str = proto.Field(
        proto.STRING,
        number=1,
    )
    stats_filter: model_monitoring_stats.SearchModelMonitoringStatsFilter = proto.Field(
        proto.MESSAGE,
        number=2,
        message=model_monitoring_stats.SearchModelMonitoringStatsFilter,
    )
    time_interval: interval_pb2.Interval = proto.Field(
        proto.MESSAGE,
        number=3,
        message=interval_pb2.Interval,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=4,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=5,
    )


class SearchModelMonitoringStatsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    monitoring_stats: MutableSequence[
        model_monitoring_stats.ModelMonitoringStats
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=model_monitoring_stats.ModelMonitoringStats,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class SearchModelMonitoringAlertsRequest(proto.Message):
    r

    model_monitor: str = proto.Field(
        proto.STRING,
        number=1,
    )
    model_monitoring_job: str = proto.Field(
        proto.STRING,
        number=2,
    )
    alert_time_interval: interval_pb2.Interval = proto.Field(
        proto.MESSAGE,
        number=3,
        message=interval_pb2.Interval,
    )
    stats_name: str = proto.Field(
        proto.STRING,
        number=4,
    )
    objective_type: str = proto.Field(
        proto.STRING,
        number=5,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=6,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=7,
    )


class SearchModelMonitoringAlertsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    model_monitoring_alerts: MutableSequence[
        model_monitoring_alert.ModelMonitoringAlert
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=model_monitoring_alert.ModelMonitoringAlert,
    )
    total_number_alerts: int = proto.Field(
        proto.INT64,
        number=2,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
