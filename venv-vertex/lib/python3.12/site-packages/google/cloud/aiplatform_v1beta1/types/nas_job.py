














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import custom_job
from google.cloud.aiplatform_v1beta1.types import encryption_spec as gca_encryption_spec
from google.cloud.aiplatform_v1beta1.types import job_state
from google.cloud.aiplatform_v1beta1.types import study
from google.protobuf import timestamp_pb2  
from google.rpc import status_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "NasJob",
        "NasTrialDetail",
        "NasJobSpec",
        "NasJobOutput",
        "NasTrial",
    },
)


class NasJob(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    display_name: str = proto.Field(
        proto.STRING,
        number=2,
    )
    nas_job_spec: "NasJobSpec" = proto.Field(
        proto.MESSAGE,
        number=4,
        message="NasJobSpec",
    )
    nas_job_output: "NasJobOutput" = proto.Field(
        proto.MESSAGE,
        number=5,
        message="NasJobOutput",
    )
    state: job_state.JobState = proto.Field(
        proto.ENUM,
        number=6,
        enum=job_state.JobState,
    )
    create_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=7,
        message=timestamp_pb2.Timestamp,
    )
    start_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=8,
        message=timestamp_pb2.Timestamp,
    )
    end_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=9,
        message=timestamp_pb2.Timestamp,
    )
    update_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=10,
        message=timestamp_pb2.Timestamp,
    )
    error: status_pb2.Status = proto.Field(
        proto.MESSAGE,
        number=11,
        message=status_pb2.Status,
    )
    labels: MutableMapping[str, str] = proto.MapField(
        proto.STRING,
        proto.STRING,
        number=12,
    )
    encryption_spec: gca_encryption_spec.EncryptionSpec = proto.Field(
        proto.MESSAGE,
        number=13,
        message=gca_encryption_spec.EncryptionSpec,
    )
    enable_restricted_image_training: bool = proto.Field(
        proto.BOOL,
        number=14,
    )
    satisfies_pzs: bool = proto.Field(
        proto.BOOL,
        number=15,
    )
    satisfies_pzi: bool = proto.Field(
        proto.BOOL,
        number=16,
    )


class NasTrialDetail(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    parameters: str = proto.Field(
        proto.STRING,
        number=2,
    )
    search_trial: "NasTrial" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="NasTrial",
    )
    train_trial: "NasTrial" = proto.Field(
        proto.MESSAGE,
        number=4,
        message="NasTrial",
    )


class NasJobSpec(proto.Message):
    r

    class MultiTrialAlgorithmSpec(proto.Message):
        r

        class MultiTrialAlgorithm(proto.Enum):
            r
            MULTI_TRIAL_ALGORITHM_UNSPECIFIED = 0
            REINFORCEMENT_LEARNING = 1
            GRID_SEARCH = 2

        class MetricSpec(proto.Message):
            r

            class GoalType(proto.Enum):
                r
                GOAL_TYPE_UNSPECIFIED = 0
                MAXIMIZE = 1
                MINIMIZE = 2

            metric_id: str = proto.Field(
                proto.STRING,
                number=1,
            )
            goal: "NasJobSpec.MultiTrialAlgorithmSpec.MetricSpec.GoalType" = (
                proto.Field(
                    proto.ENUM,
                    number=2,
                    enum="NasJobSpec.MultiTrialAlgorithmSpec.MetricSpec.GoalType",
                )
            )

        class SearchTrialSpec(proto.Message):
            r

            search_trial_job_spec: custom_job.CustomJobSpec = proto.Field(
                proto.MESSAGE,
                number=1,
                message=custom_job.CustomJobSpec,
            )
            max_trial_count: int = proto.Field(
                proto.INT32,
                number=2,
            )
            max_parallel_trial_count: int = proto.Field(
                proto.INT32,
                number=3,
            )
            max_failed_trial_count: int = proto.Field(
                proto.INT32,
                number=4,
            )

        class TrainTrialSpec(proto.Message):
            r

            train_trial_job_spec: custom_job.CustomJobSpec = proto.Field(
                proto.MESSAGE,
                number=1,
                message=custom_job.CustomJobSpec,
            )
            max_parallel_trial_count: int = proto.Field(
                proto.INT32,
                number=2,
            )
            frequency: int = proto.Field(
                proto.INT32,
                number=3,
            )

        multi_trial_algorithm: "NasJobSpec.MultiTrialAlgorithmSpec.MultiTrialAlgorithm" = proto.Field(
            proto.ENUM,
            number=1,
            enum="NasJobSpec.MultiTrialAlgorithmSpec.MultiTrialAlgorithm",
        )
        metric: "NasJobSpec.MultiTrialAlgorithmSpec.MetricSpec" = proto.Field(
            proto.MESSAGE,
            number=2,
            message="NasJobSpec.MultiTrialAlgorithmSpec.MetricSpec",
        )
        search_trial_spec: "NasJobSpec.MultiTrialAlgorithmSpec.SearchTrialSpec" = (
            proto.Field(
                proto.MESSAGE,
                number=3,
                message="NasJobSpec.MultiTrialAlgorithmSpec.SearchTrialSpec",
            )
        )
        train_trial_spec: "NasJobSpec.MultiTrialAlgorithmSpec.TrainTrialSpec" = (
            proto.Field(
                proto.MESSAGE,
                number=4,
                message="NasJobSpec.MultiTrialAlgorithmSpec.TrainTrialSpec",
            )
        )

    multi_trial_algorithm_spec: MultiTrialAlgorithmSpec = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="nas_algorithm_spec",
        message=MultiTrialAlgorithmSpec,
    )
    resume_nas_job_id: str = proto.Field(
        proto.STRING,
        number=3,
    )
    search_space_spec: str = proto.Field(
        proto.STRING,
        number=1,
    )


class NasJobOutput(proto.Message):
    r

    class MultiTrialJobOutput(proto.Message):
        r

        search_trials: MutableSequence["NasTrial"] = proto.RepeatedField(
            proto.MESSAGE,
            number=1,
            message="NasTrial",
        )
        train_trials: MutableSequence["NasTrial"] = proto.RepeatedField(
            proto.MESSAGE,
            number=2,
            message="NasTrial",
        )

    multi_trial_job_output: MultiTrialJobOutput = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="output",
        message=MultiTrialJobOutput,
    )


class NasTrial(proto.Message):
    r

    class State(proto.Enum):
        r
        STATE_UNSPECIFIED = 0
        REQUESTED = 1
        ACTIVE = 2
        STOPPING = 3
        SUCCEEDED = 4
        INFEASIBLE = 5

    id: str = proto.Field(
        proto.STRING,
        number=1,
    )
    state: State = proto.Field(
        proto.ENUM,
        number=2,
        enum=State,
    )
    final_measurement: study.Measurement = proto.Field(
        proto.MESSAGE,
        number=3,
        message=study.Measurement,
    )
    start_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=4,
        message=timestamp_pb2.Timestamp,
    )
    end_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=5,
        message=timestamp_pb2.Timestamp,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
