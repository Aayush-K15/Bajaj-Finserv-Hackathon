














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1beta1.types import feature_group as gca_feature_group
from google.cloud.aiplatform_v1beta1.types import feature_monitor as gca_feature_monitor
from google.cloud.aiplatform_v1beta1.types import (
    feature_monitor_job as gca_feature_monitor_job,
)
from google.cloud.aiplatform_v1beta1.types import operation
from google.protobuf import field_mask_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1",
    manifest={
        "CreateFeatureGroupRequest",
        "GetFeatureGroupRequest",
        "ListFeatureGroupsRequest",
        "ListFeatureGroupsResponse",
        "UpdateFeatureGroupRequest",
        "DeleteFeatureGroupRequest",
        "CreateFeatureMonitorRequest",
        "GetFeatureMonitorRequest",
        "ListFeatureMonitorsRequest",
        "UpdateFeatureMonitorRequest",
        "DeleteFeatureMonitorRequest",
        "ListFeatureMonitorsResponse",
        "CreateFeatureGroupOperationMetadata",
        "UpdateFeatureGroupOperationMetadata",
        "CreateRegistryFeatureOperationMetadata",
        "UpdateFeatureOperationMetadata",
        "CreateFeatureMonitorOperationMetadata",
        "UpdateFeatureMonitorOperationMetadata",
        "CreateFeatureMonitorJobRequest",
        "GetFeatureMonitorJobRequest",
        "ListFeatureMonitorJobsRequest",
        "ListFeatureMonitorJobsResponse",
    },
)


class CreateFeatureGroupRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    feature_group: gca_feature_group.FeatureGroup = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_feature_group.FeatureGroup,
    )
    feature_group_id: str = proto.Field(
        proto.STRING,
        number=3,
    )


class GetFeatureGroupRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListFeatureGroupsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=5,
    )


class ListFeatureGroupsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    feature_groups: MutableSequence[
        gca_feature_group.FeatureGroup
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_feature_group.FeatureGroup,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class UpdateFeatureGroupRequest(proto.Message):
    r

    feature_group: gca_feature_group.FeatureGroup = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_feature_group.FeatureGroup,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )


class DeleteFeatureGroupRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    force: bool = proto.Field(
        proto.BOOL,
        number=2,
    )


class CreateFeatureMonitorRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    feature_monitor: gca_feature_monitor.FeatureMonitor = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_feature_monitor.FeatureMonitor,
    )
    feature_monitor_id: str = proto.Field(
        proto.STRING,
        number=3,
    )


class GetFeatureMonitorRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListFeatureMonitorsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=5,
    )


class UpdateFeatureMonitorRequest(proto.Message):
    r

    feature_monitor: gca_feature_monitor.FeatureMonitor = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_feature_monitor.FeatureMonitor,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )


class DeleteFeatureMonitorRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListFeatureMonitorsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    feature_monitors: MutableSequence[
        gca_feature_monitor.FeatureMonitor
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_feature_monitor.FeatureMonitor,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class CreateFeatureGroupOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class UpdateFeatureGroupOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class CreateRegistryFeatureOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class UpdateFeatureOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class CreateFeatureMonitorOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class UpdateFeatureMonitorOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class CreateFeatureMonitorJobRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    feature_monitor_job: gca_feature_monitor_job.FeatureMonitorJob = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_feature_monitor_job.FeatureMonitorJob,
    )
    feature_monitor_job_id: int = proto.Field(
        proto.INT64,
        number=3,
    )


class GetFeatureMonitorJobRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListFeatureMonitorJobsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=5,
    )


class ListFeatureMonitorJobsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    feature_monitor_jobs: MutableSequence[
        gca_feature_monitor_job.FeatureMonitorJob
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_feature_monitor_job.FeatureMonitorJob,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
