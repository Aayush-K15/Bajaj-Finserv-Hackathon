














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import MemoryBankServiceTransport
from .grpc import MemoryBankServiceGrpcTransport
from .grpc_asyncio import MemoryBankServiceGrpcAsyncIOTransport
from .rest import MemoryBankServiceRestTransport
from .rest import MemoryBankServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncMemoryBankServiceRestTransport
    from .rest_asyncio import AsyncMemoryBankServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncMemoryBankServiceRestTransport",
        "AsyncMemoryBankServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = MemoryBankServiceGrpcTransport
_transport_registry["grpc_asyncio"] = MemoryBankServiceGrpcAsyncIOTransport
_transport_registry["rest"] = MemoryBankServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncMemoryBankServiceRestTransport

__all__ = (
    "MemoryBankServiceTransport",
    "MemoryBankServiceGrpcTransport",
    "MemoryBankServiceGrpcAsyncIOTransport",
    "MemoryBankServiceRestTransport",
    "MemoryBankServiceRestInterceptor",
) + ASYNC_REST_CLASSES
