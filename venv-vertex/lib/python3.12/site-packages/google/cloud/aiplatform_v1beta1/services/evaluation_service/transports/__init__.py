














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import EvaluationServiceTransport
from .grpc import EvaluationServiceGrpcTransport
from .grpc_asyncio import EvaluationServiceGrpcAsyncIOTransport
from .rest import EvaluationServiceRestTransport
from .rest import EvaluationServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncEvaluationServiceRestTransport
    from .rest_asyncio import AsyncEvaluationServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncEvaluationServiceRestTransport",
        "AsyncEvaluationServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = EvaluationServiceGrpcTransport
_transport_registry["grpc_asyncio"] = EvaluationServiceGrpcAsyncIOTransport
_transport_registry["rest"] = EvaluationServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncEvaluationServiceRestTransport

__all__ = (
    "EvaluationServiceTransport",
    "EvaluationServiceGrpcTransport",
    "EvaluationServiceGrpcAsyncIOTransport",
    "EvaluationServiceRestTransport",
    "EvaluationServiceRestInterceptor",
) + ASYNC_REST_CLASSES
