














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import SessionServiceTransport
from .grpc import SessionServiceGrpcTransport
from .grpc_asyncio import SessionServiceGrpcAsyncIOTransport
from .rest import SessionServiceRestTransport
from .rest import SessionServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncSessionServiceRestTransport
    from .rest_asyncio import AsyncSessionServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncSessionServiceRestTransport",
        "AsyncSessionServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = SessionServiceGrpcTransport
_transport_registry["grpc_asyncio"] = SessionServiceGrpcAsyncIOTransport
_transport_registry["rest"] = SessionServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncSessionServiceRestTransport

__all__ = (
    "SessionServiceTransport",
    "SessionServiceGrpcTransport",
    "SessionServiceGrpcAsyncIOTransport",
    "SessionServiceRestTransport",
    "SessionServiceRestInterceptor",
) + ASYNC_REST_CLASSES
