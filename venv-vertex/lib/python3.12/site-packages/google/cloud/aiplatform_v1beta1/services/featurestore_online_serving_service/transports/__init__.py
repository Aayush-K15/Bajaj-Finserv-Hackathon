














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import FeaturestoreOnlineServingServiceTransport
from .grpc import FeaturestoreOnlineServingServiceGrpcTransport
from .grpc_asyncio import FeaturestoreOnlineServingServiceGrpcAsyncIOTransport
from .rest import FeaturestoreOnlineServingServiceRestTransport
from .rest import FeaturestoreOnlineServingServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncFeaturestoreOnlineServingServiceRestTransport
    from .rest_asyncio import AsyncFeaturestoreOnlineServingServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncFeaturestoreOnlineServingServiceRestTransport",
        "AsyncFeaturestoreOnlineServingServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = (
    OrderedDict()
)  
_transport_registry["grpc"] = FeaturestoreOnlineServingServiceGrpcTransport
_transport_registry[
    "grpc_asyncio"
] = FeaturestoreOnlineServingServiceGrpcAsyncIOTransport
_transport_registry["rest"] = FeaturestoreOnlineServingServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry[
        "rest_asyncio"
    ] = AsyncFeaturestoreOnlineServingServiceRestTransport

__all__ = (
    "FeaturestoreOnlineServingServiceTransport",
    "FeaturestoreOnlineServingServiceGrpcTransport",
    "FeaturestoreOnlineServingServiceGrpcAsyncIOTransport",
    "FeaturestoreOnlineServingServiceRestTransport",
    "FeaturestoreOnlineServingServiceRestInterceptor",
) + ASYNC_REST_CLASSES
