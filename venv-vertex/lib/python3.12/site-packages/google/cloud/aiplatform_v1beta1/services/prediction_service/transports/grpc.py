














import json
import logging as std_logging
import pickle
import warnings
from typing import Callable, Dict, Optional, Sequence, Tuple, Union

from google.api_core import grpc_helpers
from google.api_core import gapic_v1
import google.auth  
from google.auth import credentials as ga_credentials  
from google.auth.transport.grpc import SslCredentials  
from google.protobuf.json_format import MessageToJson
import google.protobuf.message

import grpc  
import proto  

from google.api import httpbody_pb2  
from google.cloud.aiplatform_v1beta1.types import prediction_service
from google.cloud.location import locations_pb2  
from google.iam.v1 import iam_policy_pb2  
from google.iam.v1 import policy_pb2  
from google.longrunning import operations_pb2  
from .base import PredictionServiceTransport, DEFAULT_CLIENT_INFO

try:
    from google.api_core import client_logging  

    CLIENT_LOGGING_SUPPORTED = True  
except ImportError:  
    CLIENT_LOGGING_SUPPORTED = False

_LOGGER = std_logging.getLogger(__name__)


class _LoggingClientInterceptor(grpc.UnaryUnaryClientInterceptor):  
    def intercept_unary_unary(self, continuation, client_call_details, request):
        logging_enabled = CLIENT_LOGGING_SUPPORTED and _LOGGER.isEnabledFor(
            std_logging.DEBUG
        )
        if logging_enabled:  
            request_metadata = client_call_details.metadata
            if isinstance(request, proto.Message):
                request_payload = type(request).to_json(request)
            elif isinstance(request, google.protobuf.message.Message):
                request_payload = MessageToJson(request)
            else:
                request_payload = f"{type(request).__name__}: {pickle.dumps(request)}"

            request_metadata = {
                key: value.decode("utf-8") if isinstance(value, bytes) else value
                for key, value in request_metadata
            }
            grpc_request = {
                "payload": request_payload,
                "requestMethod": "grpc",
                "metadata": dict(request_metadata),
            }
            _LOGGER.debug(
                f"Sending request for {client_call_details.method}",
                extra={
                    "serviceName": "google.cloud.aiplatform.v1beta1.PredictionService",
                    "rpcName": str(client_call_details.method),
                    "request": grpc_request,
                    "metadata": grpc_request["metadata"],
                },
            )
        response = continuation(client_call_details, request)
        if logging_enabled:  
            response_metadata = response.trailing_metadata()
            
            metadata = (
                dict([(k, str(v)) for k, v in response_metadata])
                if response_metadata
                else None
            )
            result = response.result()
            if isinstance(result, proto.Message):
                response_payload = type(result).to_json(result)
            elif isinstance(result, google.protobuf.message.Message):
                response_payload = MessageToJson(result)
            else:
                response_payload = f"{type(result).__name__}: {pickle.dumps(result)}"
            grpc_response = {
                "payload": response_payload,
                "metadata": metadata,
                "status": "OK",
            }
            _LOGGER.debug(
                f"Received response for {client_call_details.method}.",
                extra={
                    "serviceName": "google.cloud.aiplatform.v1beta1.PredictionService",
                    "rpcName": client_call_details.method,
                    "response": grpc_response,
                    "metadata": grpc_response["metadata"],
                },
            )
        return response


class PredictionServiceGrpcTransport(PredictionServiceTransport):
    

    _stubs: Dict[str, Callable]

    def __init__(
        self,
        *,
        host: str = "aiplatform.googleapis.com",
        credentials: Optional[ga_credentials.Credentials] = None,
        credentials_file: Optional[str] = None,
        scopes: Optional[Sequence[str]] = None,
        channel: Optional[Union[grpc.Channel, Callable[..., grpc.Channel]]] = None,
        api_mtls_endpoint: Optional[str] = None,
        client_cert_source: Optional[Callable[[], Tuple[bytes, bytes]]] = None,
        ssl_channel_credentials: Optional[grpc.ChannelCredentials] = None,
        client_cert_source_for_mtls: Optional[Callable[[], Tuple[bytes, bytes]]] = None,
        quota_project_id: Optional[str] = None,
        client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
        always_use_jwt_access: Optional[bool] = False,
        api_audience: Optional[str] = None,
    ) -> None:
        
        self._grpc_channel = None
        self._ssl_channel_credentials = ssl_channel_credentials
        self._stubs: Dict[str, Callable] = {}

        if api_mtls_endpoint:
            warnings.warn("api_mtls_endpoint is deprecated", DeprecationWarning)
        if client_cert_source:
            warnings.warn("client_cert_source is deprecated", DeprecationWarning)

        if isinstance(channel, grpc.Channel):
            
            credentials = None
            self._ignore_credentials = True
            
            self._grpc_channel = channel
            self._ssl_channel_credentials = None

        else:
            if api_mtls_endpoint:
                host = api_mtls_endpoint

                
                
                if client_cert_source:
                    cert, key = client_cert_source()
                    self._ssl_channel_credentials = grpc.ssl_channel_credentials(
                        certificate_chain=cert, private_key=key
                    )
                else:
                    self._ssl_channel_credentials = SslCredentials().ssl_credentials

            else:
                if client_cert_source_for_mtls and not ssl_channel_credentials:
                    cert, key = client_cert_source_for_mtls()
                    self._ssl_channel_credentials = grpc.ssl_channel_credentials(
                        certificate_chain=cert, private_key=key
                    )

        
        super().__init__(
            host=host,
            credentials=credentials,
            credentials_file=credentials_file,
            scopes=scopes,
            quota_project_id=quota_project_id,
            client_info=client_info,
            always_use_jwt_access=always_use_jwt_access,
            api_audience=api_audience,
        )

        if not self._grpc_channel:
            
            channel_init = channel or type(self).create_channel
            self._grpc_channel = channel_init(
                self._host,
                
                credentials=self._credentials,
                
                
                credentials_file=None,
                scopes=self._scopes,
                ssl_credentials=self._ssl_channel_credentials,
                quota_project_id=quota_project_id,
                options=[
                    ("grpc.max_send_message_length", -1),
                    ("grpc.max_receive_message_length", -1),
                ],
            )

        self._interceptor = _LoggingClientInterceptor()
        self._logged_channel = grpc.intercept_channel(
            self._grpc_channel, self._interceptor
        )

        
        self._prep_wrapped_messages(client_info)

    @classmethod
    def create_channel(
        cls,
        host: str = "aiplatform.googleapis.com",
        credentials: Optional[ga_credentials.Credentials] = None,
        credentials_file: Optional[str] = None,
        scopes: Optional[Sequence[str]] = None,
        quota_project_id: Optional[str] = None,
        **kwargs,
    ) -> grpc.Channel:
        

        return grpc_helpers.create_channel(
            host,
            credentials=credentials,
            credentials_file=credentials_file,
            quota_project_id=quota_project_id,
            default_scopes=cls.AUTH_SCOPES,
            scopes=scopes,
            default_host=cls.DEFAULT_HOST,
            **kwargs,
        )

    @property
    def grpc_channel(self) -> grpc.Channel:
        
        return self._grpc_channel

    @property
    def predict(
        self,
    ) -> Callable[
        [prediction_service.PredictRequest], prediction_service.PredictResponse
    ]:
        r
        
        
        
        
        if "predict" not in self._stubs:
            self._stubs["predict"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.PredictionService/Predict",
                request_serializer=prediction_service.PredictRequest.serialize,
                response_deserializer=prediction_service.PredictResponse.deserialize,
            )
        return self._stubs["predict"]

    @property
    def raw_predict(
        self,
    ) -> Callable[[prediction_service.RawPredictRequest], httpbody_pb2.HttpBody]:
        r
        
        
        
        
        if "raw_predict" not in self._stubs:
            self._stubs["raw_predict"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.PredictionService/RawPredict",
                request_serializer=prediction_service.RawPredictRequest.serialize,
                response_deserializer=httpbody_pb2.HttpBody.FromString,
            )
        return self._stubs["raw_predict"]

    @property
    def stream_raw_predict(
        self,
    ) -> Callable[[prediction_service.StreamRawPredictRequest], httpbody_pb2.HttpBody]:
        r
        
        
        
        
        if "stream_raw_predict" not in self._stubs:
            self._stubs["stream_raw_predict"] = self._logged_channel.unary_stream(
                "/google.cloud.aiplatform.v1beta1.PredictionService/StreamRawPredict",
                request_serializer=prediction_service.StreamRawPredictRequest.serialize,
                response_deserializer=httpbody_pb2.HttpBody.FromString,
            )
        return self._stubs["stream_raw_predict"]

    @property
    def direct_predict(
        self,
    ) -> Callable[
        [prediction_service.DirectPredictRequest],
        prediction_service.DirectPredictResponse,
    ]:
        r
        
        
        
        
        if "direct_predict" not in self._stubs:
            self._stubs["direct_predict"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.PredictionService/DirectPredict",
                request_serializer=prediction_service.DirectPredictRequest.serialize,
                response_deserializer=prediction_service.DirectPredictResponse.deserialize,
            )
        return self._stubs["direct_predict"]

    @property
    def direct_raw_predict(
        self,
    ) -> Callable[
        [prediction_service.DirectRawPredictRequest],
        prediction_service.DirectRawPredictResponse,
    ]:
        r
        
        
        
        
        if "direct_raw_predict" not in self._stubs:
            self._stubs["direct_raw_predict"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.PredictionService/DirectRawPredict",
                request_serializer=prediction_service.DirectRawPredictRequest.serialize,
                response_deserializer=prediction_service.DirectRawPredictResponse.deserialize,
            )
        return self._stubs["direct_raw_predict"]

    @property
    def stream_direct_predict(
        self,
    ) -> Callable[
        [prediction_service.StreamDirectPredictRequest],
        prediction_service.StreamDirectPredictResponse,
    ]:
        r
        
        
        
        
        if "stream_direct_predict" not in self._stubs:
            self._stubs["stream_direct_predict"] = self._logged_channel.stream_stream(
                "/google.cloud.aiplatform.v1beta1.PredictionService/StreamDirectPredict",
                request_serializer=prediction_service.StreamDirectPredictRequest.serialize,
                response_deserializer=prediction_service.StreamDirectPredictResponse.deserialize,
            )
        return self._stubs["stream_direct_predict"]

    @property
    def stream_direct_raw_predict(
        self,
    ) -> Callable[
        [prediction_service.StreamDirectRawPredictRequest],
        prediction_service.StreamDirectRawPredictResponse,
    ]:
        r
        
        
        
        
        if "stream_direct_raw_predict" not in self._stubs:
            self._stubs[
                "stream_direct_raw_predict"
            ] = self._logged_channel.stream_stream(
                "/google.cloud.aiplatform.v1beta1.PredictionService/StreamDirectRawPredict",
                request_serializer=prediction_service.StreamDirectRawPredictRequest.serialize,
                response_deserializer=prediction_service.StreamDirectRawPredictResponse.deserialize,
            )
        return self._stubs["stream_direct_raw_predict"]

    @property
    def streaming_predict(
        self,
    ) -> Callable[
        [prediction_service.StreamingPredictRequest],
        prediction_service.StreamingPredictResponse,
    ]:
        r
        
        
        
        
        if "streaming_predict" not in self._stubs:
            self._stubs["streaming_predict"] = self._logged_channel.stream_stream(
                "/google.cloud.aiplatform.v1beta1.PredictionService/StreamingPredict",
                request_serializer=prediction_service.StreamingPredictRequest.serialize,
                response_deserializer=prediction_service.StreamingPredictResponse.deserialize,
            )
        return self._stubs["streaming_predict"]

    @property
    def server_streaming_predict(
        self,
    ) -> Callable[
        [prediction_service.StreamingPredictRequest],
        prediction_service.StreamingPredictResponse,
    ]:
        r
        
        
        
        
        if "server_streaming_predict" not in self._stubs:
            self._stubs["server_streaming_predict"] = self._logged_channel.unary_stream(
                "/google.cloud.aiplatform.v1beta1.PredictionService/ServerStreamingPredict",
                request_serializer=prediction_service.StreamingPredictRequest.serialize,
                response_deserializer=prediction_service.StreamingPredictResponse.deserialize,
            )
        return self._stubs["server_streaming_predict"]

    @property
    def streaming_raw_predict(
        self,
    ) -> Callable[
        [prediction_service.StreamingRawPredictRequest],
        prediction_service.StreamingRawPredictResponse,
    ]:
        r
        
        
        
        
        if "streaming_raw_predict" not in self._stubs:
            self._stubs["streaming_raw_predict"] = self._logged_channel.stream_stream(
                "/google.cloud.aiplatform.v1beta1.PredictionService/StreamingRawPredict",
                request_serializer=prediction_service.StreamingRawPredictRequest.serialize,
                response_deserializer=prediction_service.StreamingRawPredictResponse.deserialize,
            )
        return self._stubs["streaming_raw_predict"]

    @property
    def explain(
        self,
    ) -> Callable[
        [prediction_service.ExplainRequest], prediction_service.ExplainResponse
    ]:
        r
        
        
        
        
        if "explain" not in self._stubs:
            self._stubs["explain"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.PredictionService/Explain",
                request_serializer=prediction_service.ExplainRequest.serialize,
                response_deserializer=prediction_service.ExplainResponse.deserialize,
            )
        return self._stubs["explain"]

    @property
    def count_tokens(
        self,
    ) -> Callable[
        [prediction_service.CountTokensRequest], prediction_service.CountTokensResponse
    ]:
        r
        
        
        
        
        if "count_tokens" not in self._stubs:
            self._stubs["count_tokens"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.PredictionService/CountTokens",
                request_serializer=prediction_service.CountTokensRequest.serialize,
                response_deserializer=prediction_service.CountTokensResponse.deserialize,
            )
        return self._stubs["count_tokens"]

    @property
    def generate_content(
        self,
    ) -> Callable[
        [prediction_service.GenerateContentRequest],
        prediction_service.GenerateContentResponse,
    ]:
        r
        
        
        
        
        if "generate_content" not in self._stubs:
            self._stubs["generate_content"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.PredictionService/GenerateContent",
                request_serializer=prediction_service.GenerateContentRequest.serialize,
                response_deserializer=prediction_service.GenerateContentResponse.deserialize,
            )
        return self._stubs["generate_content"]

    @property
    def stream_generate_content(
        self,
    ) -> Callable[
        [prediction_service.GenerateContentRequest],
        prediction_service.GenerateContentResponse,
    ]:
        r
        
        
        
        
        if "stream_generate_content" not in self._stubs:
            self._stubs["stream_generate_content"] = self._logged_channel.unary_stream(
                "/google.cloud.aiplatform.v1beta1.PredictionService/StreamGenerateContent",
                request_serializer=prediction_service.GenerateContentRequest.serialize,
                response_deserializer=prediction_service.GenerateContentResponse.deserialize,
            )
        return self._stubs["stream_generate_content"]

    @property
    def chat_completions(
        self,
    ) -> Callable[[prediction_service.ChatCompletionsRequest], httpbody_pb2.HttpBody]:
        r
        
        
        
        
        if "chat_completions" not in self._stubs:
            self._stubs["chat_completions"] = self._logged_channel.unary_stream(
                "/google.cloud.aiplatform.v1beta1.PredictionService/ChatCompletions",
                request_serializer=prediction_service.ChatCompletionsRequest.serialize,
                response_deserializer=httpbody_pb2.HttpBody.FromString,
            )
        return self._stubs["chat_completions"]

    def close(self):
        self._logged_channel.close()

    @property
    def delete_operation(
        self,
    ) -> Callable[[operations_pb2.DeleteOperationRequest], None]:
        r
        
        
        
        
        if "delete_operation" not in self._stubs:
            self._stubs["delete_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/DeleteOperation",
                request_serializer=operations_pb2.DeleteOperationRequest.SerializeToString,
                response_deserializer=None,
            )
        return self._stubs["delete_operation"]

    @property
    def cancel_operation(
        self,
    ) -> Callable[[operations_pb2.CancelOperationRequest], None]:
        r
        
        
        
        
        if "cancel_operation" not in self._stubs:
            self._stubs["cancel_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/CancelOperation",
                request_serializer=operations_pb2.CancelOperationRequest.SerializeToString,
                response_deserializer=None,
            )
        return self._stubs["cancel_operation"]

    @property
    def wait_operation(
        self,
    ) -> Callable[[operations_pb2.WaitOperationRequest], None]:
        r
        
        
        
        
        if "wait_operation" not in self._stubs:
            self._stubs["wait_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/WaitOperation",
                request_serializer=operations_pb2.WaitOperationRequest.SerializeToString,
                response_deserializer=None,
            )
        return self._stubs["wait_operation"]

    @property
    def get_operation(
        self,
    ) -> Callable[[operations_pb2.GetOperationRequest], operations_pb2.Operation]:
        r
        
        
        
        
        if "get_operation" not in self._stubs:
            self._stubs["get_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/GetOperation",
                request_serializer=operations_pb2.GetOperationRequest.SerializeToString,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["get_operation"]

    @property
    def list_operations(
        self,
    ) -> Callable[
        [operations_pb2.ListOperationsRequest], operations_pb2.ListOperationsResponse
    ]:
        r
        
        
        
        
        if "list_operations" not in self._stubs:
            self._stubs["list_operations"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/ListOperations",
                request_serializer=operations_pb2.ListOperationsRequest.SerializeToString,
                response_deserializer=operations_pb2.ListOperationsResponse.FromString,
            )
        return self._stubs["list_operations"]

    @property
    def list_locations(
        self,
    ) -> Callable[
        [locations_pb2.ListLocationsRequest], locations_pb2.ListLocationsResponse
    ]:
        r
        
        
        
        
        if "list_locations" not in self._stubs:
            self._stubs["list_locations"] = self._logged_channel.unary_unary(
                "/google.cloud.location.Locations/ListLocations",
                request_serializer=locations_pb2.ListLocationsRequest.SerializeToString,
                response_deserializer=locations_pb2.ListLocationsResponse.FromString,
            )
        return self._stubs["list_locations"]

    @property
    def get_location(
        self,
    ) -> Callable[[locations_pb2.GetLocationRequest], locations_pb2.Location]:
        r
        
        
        
        
        if "get_location" not in self._stubs:
            self._stubs["get_location"] = self._logged_channel.unary_unary(
                "/google.cloud.location.Locations/GetLocation",
                request_serializer=locations_pb2.GetLocationRequest.SerializeToString,
                response_deserializer=locations_pb2.Location.FromString,
            )
        return self._stubs["get_location"]

    @property
    def set_iam_policy(
        self,
    ) -> Callable[[iam_policy_pb2.SetIamPolicyRequest], policy_pb2.Policy]:
        r
        
        
        
        
        if "set_iam_policy" not in self._stubs:
            self._stubs["set_iam_policy"] = self._logged_channel.unary_unary(
                "/google.iam.v1.IAMPolicy/SetIamPolicy",
                request_serializer=iam_policy_pb2.SetIamPolicyRequest.SerializeToString,
                response_deserializer=policy_pb2.Policy.FromString,
            )
        return self._stubs["set_iam_policy"]

    @property
    def get_iam_policy(
        self,
    ) -> Callable[[iam_policy_pb2.GetIamPolicyRequest], policy_pb2.Policy]:
        r
        
        
        
        
        if "get_iam_policy" not in self._stubs:
            self._stubs["get_iam_policy"] = self._logged_channel.unary_unary(
                "/google.iam.v1.IAMPolicy/GetIamPolicy",
                request_serializer=iam_policy_pb2.GetIamPolicyRequest.SerializeToString,
                response_deserializer=policy_pb2.Policy.FromString,
            )
        return self._stubs["get_iam_policy"]

    @property
    def test_iam_permissions(
        self,
    ) -> Callable[
        [iam_policy_pb2.TestIamPermissionsRequest],
        iam_policy_pb2.TestIamPermissionsResponse,
    ]:
        r
        
        
        
        
        if "test_iam_permissions" not in self._stubs:
            self._stubs["test_iam_permissions"] = self._logged_channel.unary_unary(
                "/google.iam.v1.IAMPolicy/TestIamPermissions",
                request_serializer=iam_policy_pb2.TestIamPermissionsRequest.SerializeToString,
                response_deserializer=iam_policy_pb2.TestIamPermissionsResponse.FromString,
            )
        return self._stubs["test_iam_permissions"]

    @property
    def kind(self) -> str:
        return "grpc"


__all__ = ("PredictionServiceGrpcTransport",)
