














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import ReasoningEngineExecutionServiceTransport
from .grpc import ReasoningEngineExecutionServiceGrpcTransport
from .grpc_asyncio import ReasoningEngineExecutionServiceGrpcAsyncIOTransport
from .rest import ReasoningEngineExecutionServiceRestTransport
from .rest import ReasoningEngineExecutionServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncReasoningEngineExecutionServiceRestTransport
    from .rest_asyncio import AsyncReasoningEngineExecutionServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncReasoningEngineExecutionServiceRestTransport",
        "AsyncReasoningEngineExecutionServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = (
    OrderedDict()
)  
_transport_registry["grpc"] = ReasoningEngineExecutionServiceGrpcTransport
_transport_registry[
    "grpc_asyncio"
] = ReasoningEngineExecutionServiceGrpcAsyncIOTransport
_transport_registry["rest"] = ReasoningEngineExecutionServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry[
        "rest_asyncio"
    ] = AsyncReasoningEngineExecutionServiceRestTransport

__all__ = (
    "ReasoningEngineExecutionServiceTransport",
    "ReasoningEngineExecutionServiceGrpcTransport",
    "ReasoningEngineExecutionServiceGrpcAsyncIOTransport",
    "ReasoningEngineExecutionServiceRestTransport",
    "ReasoningEngineExecutionServiceRestInterceptor",
) + ASYNC_REST_CLASSES
