














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import VizierServiceTransport
from .grpc import VizierServiceGrpcTransport
from .grpc_asyncio import VizierServiceGrpcAsyncIOTransport
from .rest import VizierServiceRestTransport
from .rest import VizierServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncVizierServiceRestTransport
    from .rest_asyncio import AsyncVizierServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncVizierServiceRestTransport",
        "AsyncVizierServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = VizierServiceGrpcTransport
_transport_registry["grpc_asyncio"] = VizierServiceGrpcAsyncIOTransport
_transport_registry["rest"] = VizierServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncVizierServiceRestTransport

__all__ = (
    "VizierServiceTransport",
    "VizierServiceGrpcTransport",
    "VizierServiceGrpcAsyncIOTransport",
    "VizierServiceRestTransport",
    "VizierServiceRestInterceptor",
) + ASYNC_REST_CLASSES
