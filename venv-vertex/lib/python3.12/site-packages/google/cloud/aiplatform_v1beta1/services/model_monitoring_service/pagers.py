














from google.api_core import gapic_v1
from google.api_core import retry as retries
from google.api_core import retry_async as retries_async
from typing import (
    Any,
    AsyncIterator,
    Awaitable,
    Callable,
    Sequence,
    Tuple,
    Optional,
    Iterator,
    Union,
)

try:
    OptionalRetry = Union[retries.Retry, gapic_v1.method._MethodDefault, None]
    OptionalAsyncRetry = Union[
        retries_async.AsyncRetry, gapic_v1.method._MethodDefault, None
    ]
except AttributeError:  
    OptionalRetry = Union[retries.Retry, object, None]  
    OptionalAsyncRetry = Union[retries_async.AsyncRetry, object, None]  

from google.cloud.aiplatform_v1beta1.types import model_monitor
from google.cloud.aiplatform_v1beta1.types import model_monitoring_alert
from google.cloud.aiplatform_v1beta1.types import model_monitoring_job
from google.cloud.aiplatform_v1beta1.types import model_monitoring_service
from google.cloud.aiplatform_v1beta1.types import model_monitoring_stats


class ListModelMonitorsPager:
    

    def __init__(
        self,
        method: Callable[..., model_monitoring_service.ListModelMonitorsResponse],
        request: model_monitoring_service.ListModelMonitorsRequest,
        response: model_monitoring_service.ListModelMonitorsResponse,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = ()
    ):
        
        self._method = method
        self._request = model_monitoring_service.ListModelMonitorsRequest(request)
        self._response = response
        self._retry = retry
        self._timeout = timeout
        self._metadata = metadata

    def __getattr__(self, name: str) -> Any:
        return getattr(self._response, name)

    @property
    def pages(self) -> Iterator[model_monitoring_service.ListModelMonitorsResponse]:
        yield self._response
        while self._response.next_page_token:
            self._request.page_token = self._response.next_page_token
            self._response = self._method(
                self._request,
                retry=self._retry,
                timeout=self._timeout,
                metadata=self._metadata,
            )
            yield self._response

    def __iter__(self) -> Iterator[model_monitor.ModelMonitor]:
        for page in self.pages:
            yield from page.model_monitors

    def __repr__(self) -> str:
        return "{0}<{1!r}>".format(self.__class__.__name__, self._response)


class ListModelMonitorsAsyncPager:
    

    def __init__(
        self,
        method: Callable[
            ..., Awaitable[model_monitoring_service.ListModelMonitorsResponse]
        ],
        request: model_monitoring_service.ListModelMonitorsRequest,
        response: model_monitoring_service.ListModelMonitorsResponse,
        *,
        retry: OptionalAsyncRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = ()
    ):
        
        self._method = method
        self._request = model_monitoring_service.ListModelMonitorsRequest(request)
        self._response = response
        self._retry = retry
        self._timeout = timeout
        self._metadata = metadata

    def __getattr__(self, name: str) -> Any:
        return getattr(self._response, name)

    @property
    async def pages(
        self,
    ) -> AsyncIterator[model_monitoring_service.ListModelMonitorsResponse]:
        yield self._response
        while self._response.next_page_token:
            self._request.page_token = self._response.next_page_token
            self._response = await self._method(
                self._request,
                retry=self._retry,
                timeout=self._timeout,
                metadata=self._metadata,
            )
            yield self._response

    def __aiter__(self) -> AsyncIterator[model_monitor.ModelMonitor]:
        async def async_generator():
            async for page in self.pages:
                for response in page.model_monitors:
                    yield response

        return async_generator()

    def __repr__(self) -> str:
        return "{0}<{1!r}>".format(self.__class__.__name__, self._response)


class ListModelMonitoringJobsPager:
    

    def __init__(
        self,
        method: Callable[..., model_monitoring_service.ListModelMonitoringJobsResponse],
        request: model_monitoring_service.ListModelMonitoringJobsRequest,
        response: model_monitoring_service.ListModelMonitoringJobsResponse,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = ()
    ):
        
        self._method = method
        self._request = model_monitoring_service.ListModelMonitoringJobsRequest(request)
        self._response = response
        self._retry = retry
        self._timeout = timeout
        self._metadata = metadata

    def __getattr__(self, name: str) -> Any:
        return getattr(self._response, name)

    @property
    def pages(
        self,
    ) -> Iterator[model_monitoring_service.ListModelMonitoringJobsResponse]:
        yield self._response
        while self._response.next_page_token:
            self._request.page_token = self._response.next_page_token
            self._response = self._method(
                self._request,
                retry=self._retry,
                timeout=self._timeout,
                metadata=self._metadata,
            )
            yield self._response

    def __iter__(self) -> Iterator[model_monitoring_job.ModelMonitoringJob]:
        for page in self.pages:
            yield from page.model_monitoring_jobs

    def __repr__(self) -> str:
        return "{0}<{1!r}>".format(self.__class__.__name__, self._response)


class ListModelMonitoringJobsAsyncPager:
    

    def __init__(
        self,
        method: Callable[
            ..., Awaitable[model_monitoring_service.ListModelMonitoringJobsResponse]
        ],
        request: model_monitoring_service.ListModelMonitoringJobsRequest,
        response: model_monitoring_service.ListModelMonitoringJobsResponse,
        *,
        retry: OptionalAsyncRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = ()
    ):
        
        self._method = method
        self._request = model_monitoring_service.ListModelMonitoringJobsRequest(request)
        self._response = response
        self._retry = retry
        self._timeout = timeout
        self._metadata = metadata

    def __getattr__(self, name: str) -> Any:
        return getattr(self._response, name)

    @property
    async def pages(
        self,
    ) -> AsyncIterator[model_monitoring_service.ListModelMonitoringJobsResponse]:
        yield self._response
        while self._response.next_page_token:
            self._request.page_token = self._response.next_page_token
            self._response = await self._method(
                self._request,
                retry=self._retry,
                timeout=self._timeout,
                metadata=self._metadata,
            )
            yield self._response

    def __aiter__(self) -> AsyncIterator[model_monitoring_job.ModelMonitoringJob]:
        async def async_generator():
            async for page in self.pages:
                for response in page.model_monitoring_jobs:
                    yield response

        return async_generator()

    def __repr__(self) -> str:
        return "{0}<{1!r}>".format(self.__class__.__name__, self._response)


class SearchModelMonitoringStatsPager:
    

    def __init__(
        self,
        method: Callable[
            ..., model_monitoring_service.SearchModelMonitoringStatsResponse
        ],
        request: model_monitoring_service.SearchModelMonitoringStatsRequest,
        response: model_monitoring_service.SearchModelMonitoringStatsResponse,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = ()
    ):
        
        self._method = method
        self._request = model_monitoring_service.SearchModelMonitoringStatsRequest(
            request
        )
        self._response = response
        self._retry = retry
        self._timeout = timeout
        self._metadata = metadata

    def __getattr__(self, name: str) -> Any:
        return getattr(self._response, name)

    @property
    def pages(
        self,
    ) -> Iterator[model_monitoring_service.SearchModelMonitoringStatsResponse]:
        yield self._response
        while self._response.next_page_token:
            self._request.page_token = self._response.next_page_token
            self._response = self._method(
                self._request,
                retry=self._retry,
                timeout=self._timeout,
                metadata=self._metadata,
            )
            yield self._response

    def __iter__(self) -> Iterator[model_monitoring_stats.ModelMonitoringStats]:
        for page in self.pages:
            yield from page.monitoring_stats

    def __repr__(self) -> str:
        return "{0}<{1!r}>".format(self.__class__.__name__, self._response)


class SearchModelMonitoringStatsAsyncPager:
    

    def __init__(
        self,
        method: Callable[
            ..., Awaitable[model_monitoring_service.SearchModelMonitoringStatsResponse]
        ],
        request: model_monitoring_service.SearchModelMonitoringStatsRequest,
        response: model_monitoring_service.SearchModelMonitoringStatsResponse,
        *,
        retry: OptionalAsyncRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = ()
    ):
        
        self._method = method
        self._request = model_monitoring_service.SearchModelMonitoringStatsRequest(
            request
        )
        self._response = response
        self._retry = retry
        self._timeout = timeout
        self._metadata = metadata

    def __getattr__(self, name: str) -> Any:
        return getattr(self._response, name)

    @property
    async def pages(
        self,
    ) -> AsyncIterator[model_monitoring_service.SearchModelMonitoringStatsResponse]:
        yield self._response
        while self._response.next_page_token:
            self._request.page_token = self._response.next_page_token
            self._response = await self._method(
                self._request,
                retry=self._retry,
                timeout=self._timeout,
                metadata=self._metadata,
            )
            yield self._response

    def __aiter__(self) -> AsyncIterator[model_monitoring_stats.ModelMonitoringStats]:
        async def async_generator():
            async for page in self.pages:
                for response in page.monitoring_stats:
                    yield response

        return async_generator()

    def __repr__(self) -> str:
        return "{0}<{1!r}>".format(self.__class__.__name__, self._response)


class SearchModelMonitoringAlertsPager:
    

    def __init__(
        self,
        method: Callable[
            ..., model_monitoring_service.SearchModelMonitoringAlertsResponse
        ],
        request: model_monitoring_service.SearchModelMonitoringAlertsRequest,
        response: model_monitoring_service.SearchModelMonitoringAlertsResponse,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = ()
    ):
        
        self._method = method
        self._request = model_monitoring_service.SearchModelMonitoringAlertsRequest(
            request
        )
        self._response = response
        self._retry = retry
        self._timeout = timeout
        self._metadata = metadata

    def __getattr__(self, name: str) -> Any:
        return getattr(self._response, name)

    @property
    def pages(
        self,
    ) -> Iterator[model_monitoring_service.SearchModelMonitoringAlertsResponse]:
        yield self._response
        while self._response.next_page_token:
            self._request.page_token = self._response.next_page_token
            self._response = self._method(
                self._request,
                retry=self._retry,
                timeout=self._timeout,
                metadata=self._metadata,
            )
            yield self._response

    def __iter__(self) -> Iterator[model_monitoring_alert.ModelMonitoringAlert]:
        for page in self.pages:
            yield from page.model_monitoring_alerts

    def __repr__(self) -> str:
        return "{0}<{1!r}>".format(self.__class__.__name__, self._response)


class SearchModelMonitoringAlertsAsyncPager:
    

    def __init__(
        self,
        method: Callable[
            ..., Awaitable[model_monitoring_service.SearchModelMonitoringAlertsResponse]
        ],
        request: model_monitoring_service.SearchModelMonitoringAlertsRequest,
        response: model_monitoring_service.SearchModelMonitoringAlertsResponse,
        *,
        retry: OptionalAsyncRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = ()
    ):
        
        self._method = method
        self._request = model_monitoring_service.SearchModelMonitoringAlertsRequest(
            request
        )
        self._response = response
        self._retry = retry
        self._timeout = timeout
        self._metadata = metadata

    def __getattr__(self, name: str) -> Any:
        return getattr(self._response, name)

    @property
    async def pages(
        self,
    ) -> AsyncIterator[model_monitoring_service.SearchModelMonitoringAlertsResponse]:
        yield self._response
        while self._response.next_page_token:
            self._request.page_token = self._response.next_page_token
            self._response = await self._method(
                self._request,
                retry=self._retry,
                timeout=self._timeout,
                metadata=self._metadata,
            )
            yield self._response

    def __aiter__(self) -> AsyncIterator[model_monitoring_alert.ModelMonitoringAlert]:
        async def async_generator():
            async for page in self.pages:
                for response in page.model_monitoring_alerts:
                    yield response

        return async_generator()

    def __repr__(self) -> str:
        return "{0}<{1!r}>".format(self.__class__.__name__, self._response)
