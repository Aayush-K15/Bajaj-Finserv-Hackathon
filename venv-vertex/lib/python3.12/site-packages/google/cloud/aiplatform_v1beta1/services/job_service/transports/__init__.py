














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import JobServiceTransport
from .grpc import JobServiceGrpcTransport
from .grpc_asyncio import JobServiceGrpcAsyncIOTransport
from .rest import JobServiceRestTransport
from .rest import JobServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncJobServiceRestTransport
    from .rest_asyncio import AsyncJobServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncJobServiceRestTransport",
        "AsyncJobServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = JobServiceGrpcTransport
_transport_registry["grpc_asyncio"] = JobServiceGrpcAsyncIOTransport
_transport_registry["rest"] = JobServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncJobServiceRestTransport

__all__ = (
    "JobServiceTransport",
    "JobServiceGrpcTransport",
    "JobServiceGrpcAsyncIOTransport",
    "JobServiceRestTransport",
    "JobServiceRestInterceptor",
) + ASYNC_REST_CLASSES
