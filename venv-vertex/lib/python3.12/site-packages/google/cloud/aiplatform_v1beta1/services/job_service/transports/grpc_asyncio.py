














import inspect
import json
import pickle
import logging as std_logging
import warnings
from typing import Awaitable, Callable, Dict, Optional, Sequence, Tuple, Union

from google.api_core import gapic_v1
from google.api_core import grpc_helpers_async
from google.api_core import exceptions as core_exceptions
from google.api_core import retry_async as retries
from google.api_core import operations_v1
from google.auth import credentials as ga_credentials  
from google.auth.transport.grpc import SslCredentials  
from google.protobuf.json_format import MessageToJson
import google.protobuf.message

import grpc  
import proto  
from grpc.experimental import aio  

from google.cloud.aiplatform_v1beta1.types import batch_prediction_job
from google.cloud.aiplatform_v1beta1.types import (
    batch_prediction_job as gca_batch_prediction_job,
)
from google.cloud.aiplatform_v1beta1.types import custom_job
from google.cloud.aiplatform_v1beta1.types import custom_job as gca_custom_job
from google.cloud.aiplatform_v1beta1.types import data_labeling_job
from google.cloud.aiplatform_v1beta1.types import (
    data_labeling_job as gca_data_labeling_job,
)
from google.cloud.aiplatform_v1beta1.types import hyperparameter_tuning_job
from google.cloud.aiplatform_v1beta1.types import (
    hyperparameter_tuning_job as gca_hyperparameter_tuning_job,
)
from google.cloud.aiplatform_v1beta1.types import job_service
from google.cloud.aiplatform_v1beta1.types import model_deployment_monitoring_job
from google.cloud.aiplatform_v1beta1.types import (
    model_deployment_monitoring_job as gca_model_deployment_monitoring_job,
)
from google.cloud.aiplatform_v1beta1.types import nas_job
from google.cloud.aiplatform_v1beta1.types import nas_job as gca_nas_job
from google.cloud.location import locations_pb2  
from google.iam.v1 import iam_policy_pb2  
from google.iam.v1 import policy_pb2  
from google.longrunning import operations_pb2  
from google.protobuf import empty_pb2  
from .base import JobServiceTransport, DEFAULT_CLIENT_INFO
from .grpc import JobServiceGrpcTransport

try:
    from google.api_core import client_logging  

    CLIENT_LOGGING_SUPPORTED = True  
except ImportError:  
    CLIENT_LOGGING_SUPPORTED = False

_LOGGER = std_logging.getLogger(__name__)


class _LoggingClientAIOInterceptor(
    grpc.aio.UnaryUnaryClientInterceptor
):  
    async def intercept_unary_unary(self, continuation, client_call_details, request):
        logging_enabled = CLIENT_LOGGING_SUPPORTED and _LOGGER.isEnabledFor(
            std_logging.DEBUG
        )
        if logging_enabled:  
            request_metadata = client_call_details.metadata
            if isinstance(request, proto.Message):
                request_payload = type(request).to_json(request)
            elif isinstance(request, google.protobuf.message.Message):
                request_payload = MessageToJson(request)
            else:
                request_payload = f"{type(request).__name__}: {pickle.dumps(request)}"

            request_metadata = {
                key: value.decode("utf-8") if isinstance(value, bytes) else value
                for key, value in request_metadata
            }
            grpc_request = {
                "payload": request_payload,
                "requestMethod": "grpc",
                "metadata": dict(request_metadata),
            }
            _LOGGER.debug(
                f"Sending request for {client_call_details.method}",
                extra={
                    "serviceName": "google.cloud.aiplatform.v1beta1.JobService",
                    "rpcName": str(client_call_details.method),
                    "request": grpc_request,
                    "metadata": grpc_request["metadata"],
                },
            )
        response = await continuation(client_call_details, request)
        if logging_enabled:  
            response_metadata = await response.trailing_metadata()
            
            metadata = (
                dict([(k, str(v)) for k, v in response_metadata])
                if response_metadata
                else None
            )
            result = await response
            if isinstance(result, proto.Message):
                response_payload = type(result).to_json(result)
            elif isinstance(result, google.protobuf.message.Message):
                response_payload = MessageToJson(result)
            else:
                response_payload = f"{type(result).__name__}: {pickle.dumps(result)}"
            grpc_response = {
                "payload": response_payload,
                "metadata": metadata,
                "status": "OK",
            }
            _LOGGER.debug(
                f"Received response to rpc {client_call_details.method}.",
                extra={
                    "serviceName": "google.cloud.aiplatform.v1beta1.JobService",
                    "rpcName": str(client_call_details.method),
                    "response": grpc_response,
                    "metadata": grpc_response["metadata"],
                },
            )
        return response


class JobServiceGrpcAsyncIOTransport(JobServiceTransport):
    

    _grpc_channel: aio.Channel
    _stubs: Dict[str, Callable] = {}

    @classmethod
    def create_channel(
        cls,
        host: str = "aiplatform.googleapis.com",
        credentials: Optional[ga_credentials.Credentials] = None,
        credentials_file: Optional[str] = None,
        scopes: Optional[Sequence[str]] = None,
        quota_project_id: Optional[str] = None,
        **kwargs,
    ) -> aio.Channel:
        

        return grpc_helpers_async.create_channel(
            host,
            credentials=credentials,
            credentials_file=credentials_file,
            quota_project_id=quota_project_id,
            default_scopes=cls.AUTH_SCOPES,
            scopes=scopes,
            default_host=cls.DEFAULT_HOST,
            **kwargs,
        )

    def __init__(
        self,
        *,
        host: str = "aiplatform.googleapis.com",
        credentials: Optional[ga_credentials.Credentials] = None,
        credentials_file: Optional[str] = None,
        scopes: Optional[Sequence[str]] = None,
        channel: Optional[Union[aio.Channel, Callable[..., aio.Channel]]] = None,
        api_mtls_endpoint: Optional[str] = None,
        client_cert_source: Optional[Callable[[], Tuple[bytes, bytes]]] = None,
        ssl_channel_credentials: Optional[grpc.ChannelCredentials] = None,
        client_cert_source_for_mtls: Optional[Callable[[], Tuple[bytes, bytes]]] = None,
        quota_project_id: Optional[str] = None,
        client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
        always_use_jwt_access: Optional[bool] = False,
        api_audience: Optional[str] = None,
    ) -> None:
        
        self._grpc_channel = None
        self._ssl_channel_credentials = ssl_channel_credentials
        self._stubs: Dict[str, Callable] = {}
        self._operations_client: Optional[operations_v1.OperationsAsyncClient] = None

        if api_mtls_endpoint:
            warnings.warn("api_mtls_endpoint is deprecated", DeprecationWarning)
        if client_cert_source:
            warnings.warn("client_cert_source is deprecated", DeprecationWarning)

        if isinstance(channel, aio.Channel):
            
            credentials = None
            self._ignore_credentials = True
            
            self._grpc_channel = channel
            self._ssl_channel_credentials = None
        else:
            if api_mtls_endpoint:
                host = api_mtls_endpoint

                
                
                if client_cert_source:
                    cert, key = client_cert_source()
                    self._ssl_channel_credentials = grpc.ssl_channel_credentials(
                        certificate_chain=cert, private_key=key
                    )
                else:
                    self._ssl_channel_credentials = SslCredentials().ssl_credentials

            else:
                if client_cert_source_for_mtls and not ssl_channel_credentials:
                    cert, key = client_cert_source_for_mtls()
                    self._ssl_channel_credentials = grpc.ssl_channel_credentials(
                        certificate_chain=cert, private_key=key
                    )

        
        super().__init__(
            host=host,
            credentials=credentials,
            credentials_file=credentials_file,
            scopes=scopes,
            quota_project_id=quota_project_id,
            client_info=client_info,
            always_use_jwt_access=always_use_jwt_access,
            api_audience=api_audience,
        )

        if not self._grpc_channel:
            
            channel_init = channel or type(self).create_channel
            self._grpc_channel = channel_init(
                self._host,
                
                credentials=self._credentials,
                
                
                credentials_file=None,
                scopes=self._scopes,
                ssl_credentials=self._ssl_channel_credentials,
                quota_project_id=quota_project_id,
                options=[
                    ("grpc.max_send_message_length", -1),
                    ("grpc.max_receive_message_length", -1),
                ],
            )

        self._interceptor = _LoggingClientAIOInterceptor()
        self._grpc_channel._unary_unary_interceptors.append(self._interceptor)
        self._logged_channel = self._grpc_channel
        self._wrap_with_kind = (
            "kind" in inspect.signature(gapic_v1.method_async.wrap_method).parameters
        )
        
        self._prep_wrapped_messages(client_info)

    @property
    def grpc_channel(self) -> aio.Channel:
        
        
        return self._grpc_channel

    @property
    def operations_client(self) -> operations_v1.OperationsAsyncClient:
        
        
        if self._operations_client is None:
            self._operations_client = operations_v1.OperationsAsyncClient(
                self._logged_channel
            )

        
        return self._operations_client

    @property
    def create_custom_job(
        self,
    ) -> Callable[
        [job_service.CreateCustomJobRequest], Awaitable[gca_custom_job.CustomJob]
    ]:
        r
        
        
        
        
        if "create_custom_job" not in self._stubs:
            self._stubs["create_custom_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/CreateCustomJob",
                request_serializer=job_service.CreateCustomJobRequest.serialize,
                response_deserializer=gca_custom_job.CustomJob.deserialize,
            )
        return self._stubs["create_custom_job"]

    @property
    def get_custom_job(
        self,
    ) -> Callable[[job_service.GetCustomJobRequest], Awaitable[custom_job.CustomJob]]:
        r
        
        
        
        
        if "get_custom_job" not in self._stubs:
            self._stubs["get_custom_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/GetCustomJob",
                request_serializer=job_service.GetCustomJobRequest.serialize,
                response_deserializer=custom_job.CustomJob.deserialize,
            )
        return self._stubs["get_custom_job"]

    @property
    def list_custom_jobs(
        self,
    ) -> Callable[
        [job_service.ListCustomJobsRequest],
        Awaitable[job_service.ListCustomJobsResponse],
    ]:
        r
        
        
        
        
        if "list_custom_jobs" not in self._stubs:
            self._stubs["list_custom_jobs"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/ListCustomJobs",
                request_serializer=job_service.ListCustomJobsRequest.serialize,
                response_deserializer=job_service.ListCustomJobsResponse.deserialize,
            )
        return self._stubs["list_custom_jobs"]

    @property
    def delete_custom_job(
        self,
    ) -> Callable[
        [job_service.DeleteCustomJobRequest], Awaitable[operations_pb2.Operation]
    ]:
        r
        
        
        
        
        if "delete_custom_job" not in self._stubs:
            self._stubs["delete_custom_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/DeleteCustomJob",
                request_serializer=job_service.DeleteCustomJobRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["delete_custom_job"]

    @property
    def cancel_custom_job(
        self,
    ) -> Callable[[job_service.CancelCustomJobRequest], Awaitable[empty_pb2.Empty]]:
        r
        
        
        
        
        if "cancel_custom_job" not in self._stubs:
            self._stubs["cancel_custom_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/CancelCustomJob",
                request_serializer=job_service.CancelCustomJobRequest.serialize,
                response_deserializer=empty_pb2.Empty.FromString,
            )
        return self._stubs["cancel_custom_job"]

    @property
    def create_data_labeling_job(
        self,
    ) -> Callable[
        [job_service.CreateDataLabelingJobRequest],
        Awaitable[gca_data_labeling_job.DataLabelingJob],
    ]:
        r
        
        
        
        
        if "create_data_labeling_job" not in self._stubs:
            self._stubs["create_data_labeling_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/CreateDataLabelingJob",
                request_serializer=job_service.CreateDataLabelingJobRequest.serialize,
                response_deserializer=gca_data_labeling_job.DataLabelingJob.deserialize,
            )
        return self._stubs["create_data_labeling_job"]

    @property
    def get_data_labeling_job(
        self,
    ) -> Callable[
        [job_service.GetDataLabelingJobRequest],
        Awaitable[data_labeling_job.DataLabelingJob],
    ]:
        r
        
        
        
        
        if "get_data_labeling_job" not in self._stubs:
            self._stubs["get_data_labeling_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/GetDataLabelingJob",
                request_serializer=job_service.GetDataLabelingJobRequest.serialize,
                response_deserializer=data_labeling_job.DataLabelingJob.deserialize,
            )
        return self._stubs["get_data_labeling_job"]

    @property
    def list_data_labeling_jobs(
        self,
    ) -> Callable[
        [job_service.ListDataLabelingJobsRequest],
        Awaitable[job_service.ListDataLabelingJobsResponse],
    ]:
        r
        
        
        
        
        if "list_data_labeling_jobs" not in self._stubs:
            self._stubs["list_data_labeling_jobs"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/ListDataLabelingJobs",
                request_serializer=job_service.ListDataLabelingJobsRequest.serialize,
                response_deserializer=job_service.ListDataLabelingJobsResponse.deserialize,
            )
        return self._stubs["list_data_labeling_jobs"]

    @property
    def delete_data_labeling_job(
        self,
    ) -> Callable[
        [job_service.DeleteDataLabelingJobRequest], Awaitable[operations_pb2.Operation]
    ]:
        r
        
        
        
        
        if "delete_data_labeling_job" not in self._stubs:
            self._stubs["delete_data_labeling_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/DeleteDataLabelingJob",
                request_serializer=job_service.DeleteDataLabelingJobRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["delete_data_labeling_job"]

    @property
    def cancel_data_labeling_job(
        self,
    ) -> Callable[
        [job_service.CancelDataLabelingJobRequest], Awaitable[empty_pb2.Empty]
    ]:
        r
        
        
        
        
        if "cancel_data_labeling_job" not in self._stubs:
            self._stubs["cancel_data_labeling_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/CancelDataLabelingJob",
                request_serializer=job_service.CancelDataLabelingJobRequest.serialize,
                response_deserializer=empty_pb2.Empty.FromString,
            )
        return self._stubs["cancel_data_labeling_job"]

    @property
    def create_hyperparameter_tuning_job(
        self,
    ) -> Callable[
        [job_service.CreateHyperparameterTuningJobRequest],
        Awaitable[gca_hyperparameter_tuning_job.HyperparameterTuningJob],
    ]:
        r
        
        
        
        
        if "create_hyperparameter_tuning_job" not in self._stubs:
            self._stubs[
                "create_hyperparameter_tuning_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/CreateHyperparameterTuningJob",
                request_serializer=job_service.CreateHyperparameterTuningJobRequest.serialize,
                response_deserializer=gca_hyperparameter_tuning_job.HyperparameterTuningJob.deserialize,
            )
        return self._stubs["create_hyperparameter_tuning_job"]

    @property
    def get_hyperparameter_tuning_job(
        self,
    ) -> Callable[
        [job_service.GetHyperparameterTuningJobRequest],
        Awaitable[hyperparameter_tuning_job.HyperparameterTuningJob],
    ]:
        r
        
        
        
        
        if "get_hyperparameter_tuning_job" not in self._stubs:
            self._stubs[
                "get_hyperparameter_tuning_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/GetHyperparameterTuningJob",
                request_serializer=job_service.GetHyperparameterTuningJobRequest.serialize,
                response_deserializer=hyperparameter_tuning_job.HyperparameterTuningJob.deserialize,
            )
        return self._stubs["get_hyperparameter_tuning_job"]

    @property
    def list_hyperparameter_tuning_jobs(
        self,
    ) -> Callable[
        [job_service.ListHyperparameterTuningJobsRequest],
        Awaitable[job_service.ListHyperparameterTuningJobsResponse],
    ]:
        r
        
        
        
        
        if "list_hyperparameter_tuning_jobs" not in self._stubs:
            self._stubs[
                "list_hyperparameter_tuning_jobs"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/ListHyperparameterTuningJobs",
                request_serializer=job_service.ListHyperparameterTuningJobsRequest.serialize,
                response_deserializer=job_service.ListHyperparameterTuningJobsResponse.deserialize,
            )
        return self._stubs["list_hyperparameter_tuning_jobs"]

    @property
    def delete_hyperparameter_tuning_job(
        self,
    ) -> Callable[
        [job_service.DeleteHyperparameterTuningJobRequest],
        Awaitable[operations_pb2.Operation],
    ]:
        r
        
        
        
        
        if "delete_hyperparameter_tuning_job" not in self._stubs:
            self._stubs[
                "delete_hyperparameter_tuning_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/DeleteHyperparameterTuningJob",
                request_serializer=job_service.DeleteHyperparameterTuningJobRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["delete_hyperparameter_tuning_job"]

    @property
    def cancel_hyperparameter_tuning_job(
        self,
    ) -> Callable[
        [job_service.CancelHyperparameterTuningJobRequest], Awaitable[empty_pb2.Empty]
    ]:
        r
        
        
        
        
        if "cancel_hyperparameter_tuning_job" not in self._stubs:
            self._stubs[
                "cancel_hyperparameter_tuning_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/CancelHyperparameterTuningJob",
                request_serializer=job_service.CancelHyperparameterTuningJobRequest.serialize,
                response_deserializer=empty_pb2.Empty.FromString,
            )
        return self._stubs["cancel_hyperparameter_tuning_job"]

    @property
    def create_nas_job(
        self,
    ) -> Callable[[job_service.CreateNasJobRequest], Awaitable[gca_nas_job.NasJob]]:
        r
        
        
        
        
        if "create_nas_job" not in self._stubs:
            self._stubs["create_nas_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/CreateNasJob",
                request_serializer=job_service.CreateNasJobRequest.serialize,
                response_deserializer=gca_nas_job.NasJob.deserialize,
            )
        return self._stubs["create_nas_job"]

    @property
    def get_nas_job(
        self,
    ) -> Callable[[job_service.GetNasJobRequest], Awaitable[nas_job.NasJob]]:
        r
        
        
        
        
        if "get_nas_job" not in self._stubs:
            self._stubs["get_nas_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/GetNasJob",
                request_serializer=job_service.GetNasJobRequest.serialize,
                response_deserializer=nas_job.NasJob.deserialize,
            )
        return self._stubs["get_nas_job"]

    @property
    def list_nas_jobs(
        self,
    ) -> Callable[
        [job_service.ListNasJobsRequest], Awaitable[job_service.ListNasJobsResponse]
    ]:
        r
        
        
        
        
        if "list_nas_jobs" not in self._stubs:
            self._stubs["list_nas_jobs"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/ListNasJobs",
                request_serializer=job_service.ListNasJobsRequest.serialize,
                response_deserializer=job_service.ListNasJobsResponse.deserialize,
            )
        return self._stubs["list_nas_jobs"]

    @property
    def delete_nas_job(
        self,
    ) -> Callable[
        [job_service.DeleteNasJobRequest], Awaitable[operations_pb2.Operation]
    ]:
        r
        
        
        
        
        if "delete_nas_job" not in self._stubs:
            self._stubs["delete_nas_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/DeleteNasJob",
                request_serializer=job_service.DeleteNasJobRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["delete_nas_job"]

    @property
    def cancel_nas_job(
        self,
    ) -> Callable[[job_service.CancelNasJobRequest], Awaitable[empty_pb2.Empty]]:
        r
        
        
        
        
        if "cancel_nas_job" not in self._stubs:
            self._stubs["cancel_nas_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/CancelNasJob",
                request_serializer=job_service.CancelNasJobRequest.serialize,
                response_deserializer=empty_pb2.Empty.FromString,
            )
        return self._stubs["cancel_nas_job"]

    @property
    def get_nas_trial_detail(
        self,
    ) -> Callable[
        [job_service.GetNasTrialDetailRequest], Awaitable[nas_job.NasTrialDetail]
    ]:
        r
        
        
        
        
        if "get_nas_trial_detail" not in self._stubs:
            self._stubs["get_nas_trial_detail"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/GetNasTrialDetail",
                request_serializer=job_service.GetNasTrialDetailRequest.serialize,
                response_deserializer=nas_job.NasTrialDetail.deserialize,
            )
        return self._stubs["get_nas_trial_detail"]

    @property
    def list_nas_trial_details(
        self,
    ) -> Callable[
        [job_service.ListNasTrialDetailsRequest],
        Awaitable[job_service.ListNasTrialDetailsResponse],
    ]:
        r
        
        
        
        
        if "list_nas_trial_details" not in self._stubs:
            self._stubs["list_nas_trial_details"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/ListNasTrialDetails",
                request_serializer=job_service.ListNasTrialDetailsRequest.serialize,
                response_deserializer=job_service.ListNasTrialDetailsResponse.deserialize,
            )
        return self._stubs["list_nas_trial_details"]

    @property
    def create_batch_prediction_job(
        self,
    ) -> Callable[
        [job_service.CreateBatchPredictionJobRequest],
        Awaitable[gca_batch_prediction_job.BatchPredictionJob],
    ]:
        r
        
        
        
        
        if "create_batch_prediction_job" not in self._stubs:
            self._stubs[
                "create_batch_prediction_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/CreateBatchPredictionJob",
                request_serializer=job_service.CreateBatchPredictionJobRequest.serialize,
                response_deserializer=gca_batch_prediction_job.BatchPredictionJob.deserialize,
            )
        return self._stubs["create_batch_prediction_job"]

    @property
    def get_batch_prediction_job(
        self,
    ) -> Callable[
        [job_service.GetBatchPredictionJobRequest],
        Awaitable[batch_prediction_job.BatchPredictionJob],
    ]:
        r
        
        
        
        
        if "get_batch_prediction_job" not in self._stubs:
            self._stubs["get_batch_prediction_job"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/GetBatchPredictionJob",
                request_serializer=job_service.GetBatchPredictionJobRequest.serialize,
                response_deserializer=batch_prediction_job.BatchPredictionJob.deserialize,
            )
        return self._stubs["get_batch_prediction_job"]

    @property
    def list_batch_prediction_jobs(
        self,
    ) -> Callable[
        [job_service.ListBatchPredictionJobsRequest],
        Awaitable[job_service.ListBatchPredictionJobsResponse],
    ]:
        r
        
        
        
        
        if "list_batch_prediction_jobs" not in self._stubs:
            self._stubs[
                "list_batch_prediction_jobs"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/ListBatchPredictionJobs",
                request_serializer=job_service.ListBatchPredictionJobsRequest.serialize,
                response_deserializer=job_service.ListBatchPredictionJobsResponse.deserialize,
            )
        return self._stubs["list_batch_prediction_jobs"]

    @property
    def delete_batch_prediction_job(
        self,
    ) -> Callable[
        [job_service.DeleteBatchPredictionJobRequest],
        Awaitable[operations_pb2.Operation],
    ]:
        r
        
        
        
        
        if "delete_batch_prediction_job" not in self._stubs:
            self._stubs[
                "delete_batch_prediction_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/DeleteBatchPredictionJob",
                request_serializer=job_service.DeleteBatchPredictionJobRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["delete_batch_prediction_job"]

    @property
    def cancel_batch_prediction_job(
        self,
    ) -> Callable[
        [job_service.CancelBatchPredictionJobRequest], Awaitable[empty_pb2.Empty]
    ]:
        r
        
        
        
        
        if "cancel_batch_prediction_job" not in self._stubs:
            self._stubs[
                "cancel_batch_prediction_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/CancelBatchPredictionJob",
                request_serializer=job_service.CancelBatchPredictionJobRequest.serialize,
                response_deserializer=empty_pb2.Empty.FromString,
            )
        return self._stubs["cancel_batch_prediction_job"]

    @property
    def create_model_deployment_monitoring_job(
        self,
    ) -> Callable[
        [job_service.CreateModelDeploymentMonitoringJobRequest],
        Awaitable[gca_model_deployment_monitoring_job.ModelDeploymentMonitoringJob],
    ]:
        r
        
        
        
        
        if "create_model_deployment_monitoring_job" not in self._stubs:
            self._stubs[
                "create_model_deployment_monitoring_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/CreateModelDeploymentMonitoringJob",
                request_serializer=job_service.CreateModelDeploymentMonitoringJobRequest.serialize,
                response_deserializer=gca_model_deployment_monitoring_job.ModelDeploymentMonitoringJob.deserialize,
            )
        return self._stubs["create_model_deployment_monitoring_job"]

    @property
    def search_model_deployment_monitoring_stats_anomalies(
        self,
    ) -> Callable[
        [job_service.SearchModelDeploymentMonitoringStatsAnomaliesRequest],
        Awaitable[job_service.SearchModelDeploymentMonitoringStatsAnomaliesResponse],
    ]:
        r
        
        
        
        
        if "search_model_deployment_monitoring_stats_anomalies" not in self._stubs:
            self._stubs[
                "search_model_deployment_monitoring_stats_anomalies"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/SearchModelDeploymentMonitoringStatsAnomalies",
                request_serializer=job_service.SearchModelDeploymentMonitoringStatsAnomaliesRequest.serialize,
                response_deserializer=job_service.SearchModelDeploymentMonitoringStatsAnomaliesResponse.deserialize,
            )
        return self._stubs["search_model_deployment_monitoring_stats_anomalies"]

    @property
    def get_model_deployment_monitoring_job(
        self,
    ) -> Callable[
        [job_service.GetModelDeploymentMonitoringJobRequest],
        Awaitable[model_deployment_monitoring_job.ModelDeploymentMonitoringJob],
    ]:
        r
        
        
        
        
        if "get_model_deployment_monitoring_job" not in self._stubs:
            self._stubs[
                "get_model_deployment_monitoring_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/GetModelDeploymentMonitoringJob",
                request_serializer=job_service.GetModelDeploymentMonitoringJobRequest.serialize,
                response_deserializer=model_deployment_monitoring_job.ModelDeploymentMonitoringJob.deserialize,
            )
        return self._stubs["get_model_deployment_monitoring_job"]

    @property
    def list_model_deployment_monitoring_jobs(
        self,
    ) -> Callable[
        [job_service.ListModelDeploymentMonitoringJobsRequest],
        Awaitable[job_service.ListModelDeploymentMonitoringJobsResponse],
    ]:
        r
        
        
        
        
        if "list_model_deployment_monitoring_jobs" not in self._stubs:
            self._stubs[
                "list_model_deployment_monitoring_jobs"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/ListModelDeploymentMonitoringJobs",
                request_serializer=job_service.ListModelDeploymentMonitoringJobsRequest.serialize,
                response_deserializer=job_service.ListModelDeploymentMonitoringJobsResponse.deserialize,
            )
        return self._stubs["list_model_deployment_monitoring_jobs"]

    @property
    def update_model_deployment_monitoring_job(
        self,
    ) -> Callable[
        [job_service.UpdateModelDeploymentMonitoringJobRequest],
        Awaitable[operations_pb2.Operation],
    ]:
        r
        
        
        
        
        if "update_model_deployment_monitoring_job" not in self._stubs:
            self._stubs[
                "update_model_deployment_monitoring_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/UpdateModelDeploymentMonitoringJob",
                request_serializer=job_service.UpdateModelDeploymentMonitoringJobRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["update_model_deployment_monitoring_job"]

    @property
    def delete_model_deployment_monitoring_job(
        self,
    ) -> Callable[
        [job_service.DeleteModelDeploymentMonitoringJobRequest],
        Awaitable[operations_pb2.Operation],
    ]:
        r
        
        
        
        
        if "delete_model_deployment_monitoring_job" not in self._stubs:
            self._stubs[
                "delete_model_deployment_monitoring_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/DeleteModelDeploymentMonitoringJob",
                request_serializer=job_service.DeleteModelDeploymentMonitoringJobRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["delete_model_deployment_monitoring_job"]

    @property
    def pause_model_deployment_monitoring_job(
        self,
    ) -> Callable[
        [job_service.PauseModelDeploymentMonitoringJobRequest],
        Awaitable[empty_pb2.Empty],
    ]:
        r
        
        
        
        
        if "pause_model_deployment_monitoring_job" not in self._stubs:
            self._stubs[
                "pause_model_deployment_monitoring_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/PauseModelDeploymentMonitoringJob",
                request_serializer=job_service.PauseModelDeploymentMonitoringJobRequest.serialize,
                response_deserializer=empty_pb2.Empty.FromString,
            )
        return self._stubs["pause_model_deployment_monitoring_job"]

    @property
    def resume_model_deployment_monitoring_job(
        self,
    ) -> Callable[
        [job_service.ResumeModelDeploymentMonitoringJobRequest],
        Awaitable[empty_pb2.Empty],
    ]:
        r
        
        
        
        
        if "resume_model_deployment_monitoring_job" not in self._stubs:
            self._stubs[
                "resume_model_deployment_monitoring_job"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.JobService/ResumeModelDeploymentMonitoringJob",
                request_serializer=job_service.ResumeModelDeploymentMonitoringJobRequest.serialize,
                response_deserializer=empty_pb2.Empty.FromString,
            )
        return self._stubs["resume_model_deployment_monitoring_job"]

    def _prep_wrapped_messages(self, client_info):
        
        self._wrapped_methods = {
            self.create_custom_job: self._wrap_method(
                self.create_custom_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.get_custom_job: self._wrap_method(
                self.get_custom_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.list_custom_jobs: self._wrap_method(
                self.list_custom_jobs,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.delete_custom_job: self._wrap_method(
                self.delete_custom_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.cancel_custom_job: self._wrap_method(
                self.cancel_custom_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.create_data_labeling_job: self._wrap_method(
                self.create_data_labeling_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.get_data_labeling_job: self._wrap_method(
                self.get_data_labeling_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.list_data_labeling_jobs: self._wrap_method(
                self.list_data_labeling_jobs,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.delete_data_labeling_job: self._wrap_method(
                self.delete_data_labeling_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.cancel_data_labeling_job: self._wrap_method(
                self.cancel_data_labeling_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.create_hyperparameter_tuning_job: self._wrap_method(
                self.create_hyperparameter_tuning_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.get_hyperparameter_tuning_job: self._wrap_method(
                self.get_hyperparameter_tuning_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.list_hyperparameter_tuning_jobs: self._wrap_method(
                self.list_hyperparameter_tuning_jobs,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.delete_hyperparameter_tuning_job: self._wrap_method(
                self.delete_hyperparameter_tuning_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.cancel_hyperparameter_tuning_job: self._wrap_method(
                self.cancel_hyperparameter_tuning_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.create_nas_job: self._wrap_method(
                self.create_nas_job,
                default_timeout=None,
                client_info=client_info,
            ),
            self.get_nas_job: self._wrap_method(
                self.get_nas_job,
                default_timeout=None,
                client_info=client_info,
            ),
            self.list_nas_jobs: self._wrap_method(
                self.list_nas_jobs,
                default_timeout=None,
                client_info=client_info,
            ),
            self.delete_nas_job: self._wrap_method(
                self.delete_nas_job,
                default_timeout=None,
                client_info=client_info,
            ),
            self.cancel_nas_job: self._wrap_method(
                self.cancel_nas_job,
                default_timeout=None,
                client_info=client_info,
            ),
            self.get_nas_trial_detail: self._wrap_method(
                self.get_nas_trial_detail,
                default_timeout=None,
                client_info=client_info,
            ),
            self.list_nas_trial_details: self._wrap_method(
                self.list_nas_trial_details,
                default_timeout=None,
                client_info=client_info,
            ),
            self.create_batch_prediction_job: self._wrap_method(
                self.create_batch_prediction_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.get_batch_prediction_job: self._wrap_method(
                self.get_batch_prediction_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.list_batch_prediction_jobs: self._wrap_method(
                self.list_batch_prediction_jobs,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.delete_batch_prediction_job: self._wrap_method(
                self.delete_batch_prediction_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.cancel_batch_prediction_job: self._wrap_method(
                self.cancel_batch_prediction_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.create_model_deployment_monitoring_job: self._wrap_method(
                self.create_model_deployment_monitoring_job,
                default_timeout=60.0,
                client_info=client_info,
            ),
            self.search_model_deployment_monitoring_stats_anomalies: self._wrap_method(
                self.search_model_deployment_monitoring_stats_anomalies,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.get_model_deployment_monitoring_job: self._wrap_method(
                self.get_model_deployment_monitoring_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.list_model_deployment_monitoring_jobs: self._wrap_method(
                self.list_model_deployment_monitoring_jobs,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.update_model_deployment_monitoring_job: self._wrap_method(
                self.update_model_deployment_monitoring_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.delete_model_deployment_monitoring_job: self._wrap_method(
                self.delete_model_deployment_monitoring_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.pause_model_deployment_monitoring_job: self._wrap_method(
                self.pause_model_deployment_monitoring_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.resume_model_deployment_monitoring_job: self._wrap_method(
                self.resume_model_deployment_monitoring_job,
                default_timeout=5.0,
                client_info=client_info,
            ),
            self.get_location: self._wrap_method(
                self.get_location,
                default_timeout=None,
                client_info=client_info,
            ),
            self.list_locations: self._wrap_method(
                self.list_locations,
                default_timeout=None,
                client_info=client_info,
            ),
            self.get_iam_policy: self._wrap_method(
                self.get_iam_policy,
                default_timeout=None,
                client_info=client_info,
            ),
            self.set_iam_policy: self._wrap_method(
                self.set_iam_policy,
                default_timeout=None,
                client_info=client_info,
            ),
            self.test_iam_permissions: self._wrap_method(
                self.test_iam_permissions,
                default_timeout=None,
                client_info=client_info,
            ),
            self.cancel_operation: self._wrap_method(
                self.cancel_operation,
                default_timeout=None,
                client_info=client_info,
            ),
            self.delete_operation: self._wrap_method(
                self.delete_operation,
                default_timeout=None,
                client_info=client_info,
            ),
            self.get_operation: self._wrap_method(
                self.get_operation,
                default_timeout=None,
                client_info=client_info,
            ),
            self.list_operations: self._wrap_method(
                self.list_operations,
                default_timeout=None,
                client_info=client_info,
            ),
            self.wait_operation: self._wrap_method(
                self.wait_operation,
                default_timeout=None,
                client_info=client_info,
            ),
        }

    def _wrap_method(self, func, *args, **kwargs):
        if self._wrap_with_kind:  
            kwargs["kind"] = self.kind
        return gapic_v1.method_async.wrap_method(func, *args, **kwargs)

    def close(self):
        return self._logged_channel.close()

    @property
    def kind(self) -> str:
        return "grpc_asyncio"

    @property
    def delete_operation(
        self,
    ) -> Callable[[operations_pb2.DeleteOperationRequest], None]:
        r
        
        
        
        
        if "delete_operation" not in self._stubs:
            self._stubs["delete_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/DeleteOperation",
                request_serializer=operations_pb2.DeleteOperationRequest.SerializeToString,
                response_deserializer=None,
            )
        return self._stubs["delete_operation"]

    @property
    def cancel_operation(
        self,
    ) -> Callable[[operations_pb2.CancelOperationRequest], None]:
        r
        
        
        
        
        if "cancel_operation" not in self._stubs:
            self._stubs["cancel_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/CancelOperation",
                request_serializer=operations_pb2.CancelOperationRequest.SerializeToString,
                response_deserializer=None,
            )
        return self._stubs["cancel_operation"]

    @property
    def wait_operation(
        self,
    ) -> Callable[[operations_pb2.WaitOperationRequest], None]:
        r
        
        
        
        
        if "wait_operation" not in self._stubs:
            self._stubs["wait_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/WaitOperation",
                request_serializer=operations_pb2.WaitOperationRequest.SerializeToString,
                response_deserializer=None,
            )
        return self._stubs["wait_operation"]

    @property
    def get_operation(
        self,
    ) -> Callable[[operations_pb2.GetOperationRequest], operations_pb2.Operation]:
        r
        
        
        
        
        if "get_operation" not in self._stubs:
            self._stubs["get_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/GetOperation",
                request_serializer=operations_pb2.GetOperationRequest.SerializeToString,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["get_operation"]

    @property
    def list_operations(
        self,
    ) -> Callable[
        [operations_pb2.ListOperationsRequest], operations_pb2.ListOperationsResponse
    ]:
        r
        
        
        
        
        if "list_operations" not in self._stubs:
            self._stubs["list_operations"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/ListOperations",
                request_serializer=operations_pb2.ListOperationsRequest.SerializeToString,
                response_deserializer=operations_pb2.ListOperationsResponse.FromString,
            )
        return self._stubs["list_operations"]

    @property
    def list_locations(
        self,
    ) -> Callable[
        [locations_pb2.ListLocationsRequest], locations_pb2.ListLocationsResponse
    ]:
        r
        
        
        
        
        if "list_locations" not in self._stubs:
            self._stubs["list_locations"] = self._logged_channel.unary_unary(
                "/google.cloud.location.Locations/ListLocations",
                request_serializer=locations_pb2.ListLocationsRequest.SerializeToString,
                response_deserializer=locations_pb2.ListLocationsResponse.FromString,
            )
        return self._stubs["list_locations"]

    @property
    def get_location(
        self,
    ) -> Callable[[locations_pb2.GetLocationRequest], locations_pb2.Location]:
        r
        
        
        
        
        if "get_location" not in self._stubs:
            self._stubs["get_location"] = self._logged_channel.unary_unary(
                "/google.cloud.location.Locations/GetLocation",
                request_serializer=locations_pb2.GetLocationRequest.SerializeToString,
                response_deserializer=locations_pb2.Location.FromString,
            )
        return self._stubs["get_location"]

    @property
    def set_iam_policy(
        self,
    ) -> Callable[[iam_policy_pb2.SetIamPolicyRequest], policy_pb2.Policy]:
        r
        
        
        
        
        if "set_iam_policy" not in self._stubs:
            self._stubs["set_iam_policy"] = self._logged_channel.unary_unary(
                "/google.iam.v1.IAMPolicy/SetIamPolicy",
                request_serializer=iam_policy_pb2.SetIamPolicyRequest.SerializeToString,
                response_deserializer=policy_pb2.Policy.FromString,
            )
        return self._stubs["set_iam_policy"]

    @property
    def get_iam_policy(
        self,
    ) -> Callable[[iam_policy_pb2.GetIamPolicyRequest], policy_pb2.Policy]:
        r
        
        
        
        
        if "get_iam_policy" not in self._stubs:
            self._stubs["get_iam_policy"] = self._logged_channel.unary_unary(
                "/google.iam.v1.IAMPolicy/GetIamPolicy",
                request_serializer=iam_policy_pb2.GetIamPolicyRequest.SerializeToString,
                response_deserializer=policy_pb2.Policy.FromString,
            )
        return self._stubs["get_iam_policy"]

    @property
    def test_iam_permissions(
        self,
    ) -> Callable[
        [iam_policy_pb2.TestIamPermissionsRequest],
        iam_policy_pb2.TestIamPermissionsResponse,
    ]:
        r
        
        
        
        
        if "test_iam_permissions" not in self._stubs:
            self._stubs["test_iam_permissions"] = self._logged_channel.unary_unary(
                "/google.iam.v1.IAMPolicy/TestIamPermissions",
                request_serializer=iam_policy_pb2.TestIamPermissionsRequest.SerializeToString,
                response_deserializer=iam_policy_pb2.TestIamPermissionsResponse.FromString,
            )
        return self._stubs["test_iam_permissions"]


__all__ = ("JobServiceGrpcAsyncIOTransport",)
