














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import PersistentResourceServiceTransport
from .grpc import PersistentResourceServiceGrpcTransport
from .grpc_asyncio import PersistentResourceServiceGrpcAsyncIOTransport
from .rest import PersistentResourceServiceRestTransport
from .rest import PersistentResourceServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncPersistentResourceServiceRestTransport
    from .rest_asyncio import AsyncPersistentResourceServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncPersistentResourceServiceRestTransport",
        "AsyncPersistentResourceServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = (
    OrderedDict()
)  
_transport_registry["grpc"] = PersistentResourceServiceGrpcTransport
_transport_registry["grpc_asyncio"] = PersistentResourceServiceGrpcAsyncIOTransport
_transport_registry["rest"] = PersistentResourceServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncPersistentResourceServiceRestTransport

__all__ = (
    "PersistentResourceServiceTransport",
    "PersistentResourceServiceGrpcTransport",
    "PersistentResourceServiceGrpcAsyncIOTransport",
    "PersistentResourceServiceRestTransport",
    "PersistentResourceServiceRestInterceptor",
) + ASYNC_REST_CLASSES
