














import json
import logging as std_logging
import pickle
import warnings
from typing import Callable, Dict, Optional, Sequence, Tuple, Union

from google.api_core import grpc_helpers
from google.api_core import operations_v1
from google.api_core import gapic_v1
import google.auth  
from google.auth import credentials as ga_credentials  
from google.auth.transport.grpc import SslCredentials  
from google.protobuf.json_format import MessageToJson
import google.protobuf.message

import grpc  
import proto  

from google.cloud.aiplatform_v1beta1.types import model
from google.cloud.aiplatform_v1beta1.types import model as gca_model
from google.cloud.aiplatform_v1beta1.types import model_evaluation
from google.cloud.aiplatform_v1beta1.types import (
    model_evaluation as gca_model_evaluation,
)
from google.cloud.aiplatform_v1beta1.types import model_evaluation_slice
from google.cloud.aiplatform_v1beta1.types import model_service
from google.cloud.location import locations_pb2  
from google.iam.v1 import iam_policy_pb2  
from google.iam.v1 import policy_pb2  
from google.longrunning import operations_pb2  
from .base import ModelServiceTransport, DEFAULT_CLIENT_INFO

try:
    from google.api_core import client_logging  

    CLIENT_LOGGING_SUPPORTED = True  
except ImportError:  
    CLIENT_LOGGING_SUPPORTED = False

_LOGGER = std_logging.getLogger(__name__)


class _LoggingClientInterceptor(grpc.UnaryUnaryClientInterceptor):  
    def intercept_unary_unary(self, continuation, client_call_details, request):
        logging_enabled = CLIENT_LOGGING_SUPPORTED and _LOGGER.isEnabledFor(
            std_logging.DEBUG
        )
        if logging_enabled:  
            request_metadata = client_call_details.metadata
            if isinstance(request, proto.Message):
                request_payload = type(request).to_json(request)
            elif isinstance(request, google.protobuf.message.Message):
                request_payload = MessageToJson(request)
            else:
                request_payload = f"{type(request).__name__}: {pickle.dumps(request)}"

            request_metadata = {
                key: value.decode("utf-8") if isinstance(value, bytes) else value
                for key, value in request_metadata
            }
            grpc_request = {
                "payload": request_payload,
                "requestMethod": "grpc",
                "metadata": dict(request_metadata),
            }
            _LOGGER.debug(
                f"Sending request for {client_call_details.method}",
                extra={
                    "serviceName": "google.cloud.aiplatform.v1beta1.ModelService",
                    "rpcName": str(client_call_details.method),
                    "request": grpc_request,
                    "metadata": grpc_request["metadata"],
                },
            )
        response = continuation(client_call_details, request)
        if logging_enabled:  
            response_metadata = response.trailing_metadata()
            
            metadata = (
                dict([(k, str(v)) for k, v in response_metadata])
                if response_metadata
                else None
            )
            result = response.result()
            if isinstance(result, proto.Message):
                response_payload = type(result).to_json(result)
            elif isinstance(result, google.protobuf.message.Message):
                response_payload = MessageToJson(result)
            else:
                response_payload = f"{type(result).__name__}: {pickle.dumps(result)}"
            grpc_response = {
                "payload": response_payload,
                "metadata": metadata,
                "status": "OK",
            }
            _LOGGER.debug(
                f"Received response for {client_call_details.method}.",
                extra={
                    "serviceName": "google.cloud.aiplatform.v1beta1.ModelService",
                    "rpcName": client_call_details.method,
                    "response": grpc_response,
                    "metadata": grpc_response["metadata"],
                },
            )
        return response


class ModelServiceGrpcTransport(ModelServiceTransport):
    

    _stubs: Dict[str, Callable]

    def __init__(
        self,
        *,
        host: str = "aiplatform.googleapis.com",
        credentials: Optional[ga_credentials.Credentials] = None,
        credentials_file: Optional[str] = None,
        scopes: Optional[Sequence[str]] = None,
        channel: Optional[Union[grpc.Channel, Callable[..., grpc.Channel]]] = None,
        api_mtls_endpoint: Optional[str] = None,
        client_cert_source: Optional[Callable[[], Tuple[bytes, bytes]]] = None,
        ssl_channel_credentials: Optional[grpc.ChannelCredentials] = None,
        client_cert_source_for_mtls: Optional[Callable[[], Tuple[bytes, bytes]]] = None,
        quota_project_id: Optional[str] = None,
        client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
        always_use_jwt_access: Optional[bool] = False,
        api_audience: Optional[str] = None,
    ) -> None:
        
        self._grpc_channel = None
        self._ssl_channel_credentials = ssl_channel_credentials
        self._stubs: Dict[str, Callable] = {}
        self._operations_client: Optional[operations_v1.OperationsClient] = None

        if api_mtls_endpoint:
            warnings.warn("api_mtls_endpoint is deprecated", DeprecationWarning)
        if client_cert_source:
            warnings.warn("client_cert_source is deprecated", DeprecationWarning)

        if isinstance(channel, grpc.Channel):
            
            credentials = None
            self._ignore_credentials = True
            
            self._grpc_channel = channel
            self._ssl_channel_credentials = None

        else:
            if api_mtls_endpoint:
                host = api_mtls_endpoint

                
                
                if client_cert_source:
                    cert, key = client_cert_source()
                    self._ssl_channel_credentials = grpc.ssl_channel_credentials(
                        certificate_chain=cert, private_key=key
                    )
                else:
                    self._ssl_channel_credentials = SslCredentials().ssl_credentials

            else:
                if client_cert_source_for_mtls and not ssl_channel_credentials:
                    cert, key = client_cert_source_for_mtls()
                    self._ssl_channel_credentials = grpc.ssl_channel_credentials(
                        certificate_chain=cert, private_key=key
                    )

        
        super().__init__(
            host=host,
            credentials=credentials,
            credentials_file=credentials_file,
            scopes=scopes,
            quota_project_id=quota_project_id,
            client_info=client_info,
            always_use_jwt_access=always_use_jwt_access,
            api_audience=api_audience,
        )

        if not self._grpc_channel:
            
            channel_init = channel or type(self).create_channel
            self._grpc_channel = channel_init(
                self._host,
                
                credentials=self._credentials,
                
                
                credentials_file=None,
                scopes=self._scopes,
                ssl_credentials=self._ssl_channel_credentials,
                quota_project_id=quota_project_id,
                options=[
                    ("grpc.max_send_message_length", -1),
                    ("grpc.max_receive_message_length", -1),
                ],
            )

        self._interceptor = _LoggingClientInterceptor()
        self._logged_channel = grpc.intercept_channel(
            self._grpc_channel, self._interceptor
        )

        
        self._prep_wrapped_messages(client_info)

    @classmethod
    def create_channel(
        cls,
        host: str = "aiplatform.googleapis.com",
        credentials: Optional[ga_credentials.Credentials] = None,
        credentials_file: Optional[str] = None,
        scopes: Optional[Sequence[str]] = None,
        quota_project_id: Optional[str] = None,
        **kwargs,
    ) -> grpc.Channel:
        

        return grpc_helpers.create_channel(
            host,
            credentials=credentials,
            credentials_file=credentials_file,
            quota_project_id=quota_project_id,
            default_scopes=cls.AUTH_SCOPES,
            scopes=scopes,
            default_host=cls.DEFAULT_HOST,
            **kwargs,
        )

    @property
    def grpc_channel(self) -> grpc.Channel:
        
        return self._grpc_channel

    @property
    def operations_client(self) -> operations_v1.OperationsClient:
        
        
        if self._operations_client is None:
            self._operations_client = operations_v1.OperationsClient(
                self._logged_channel
            )

        
        return self._operations_client

    @property
    def upload_model(
        self,
    ) -> Callable[[model_service.UploadModelRequest], operations_pb2.Operation]:
        r
        
        
        
        
        if "upload_model" not in self._stubs:
            self._stubs["upload_model"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/UploadModel",
                request_serializer=model_service.UploadModelRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["upload_model"]

    @property
    def get_model(self) -> Callable[[model_service.GetModelRequest], model.Model]:
        r
        
        
        
        
        if "get_model" not in self._stubs:
            self._stubs["get_model"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/GetModel",
                request_serializer=model_service.GetModelRequest.serialize,
                response_deserializer=model.Model.deserialize,
            )
        return self._stubs["get_model"]

    @property
    def list_models(
        self,
    ) -> Callable[[model_service.ListModelsRequest], model_service.ListModelsResponse]:
        r
        
        
        
        
        if "list_models" not in self._stubs:
            self._stubs["list_models"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/ListModels",
                request_serializer=model_service.ListModelsRequest.serialize,
                response_deserializer=model_service.ListModelsResponse.deserialize,
            )
        return self._stubs["list_models"]

    @property
    def list_model_versions(
        self,
    ) -> Callable[
        [model_service.ListModelVersionsRequest],
        model_service.ListModelVersionsResponse,
    ]:
        r
        
        
        
        
        if "list_model_versions" not in self._stubs:
            self._stubs["list_model_versions"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/ListModelVersions",
                request_serializer=model_service.ListModelVersionsRequest.serialize,
                response_deserializer=model_service.ListModelVersionsResponse.deserialize,
            )
        return self._stubs["list_model_versions"]

    @property
    def list_model_version_checkpoints(
        self,
    ) -> Callable[
        [model_service.ListModelVersionCheckpointsRequest],
        model_service.ListModelVersionCheckpointsResponse,
    ]:
        r
        
        
        
        
        if "list_model_version_checkpoints" not in self._stubs:
            self._stubs[
                "list_model_version_checkpoints"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/ListModelVersionCheckpoints",
                request_serializer=model_service.ListModelVersionCheckpointsRequest.serialize,
                response_deserializer=model_service.ListModelVersionCheckpointsResponse.deserialize,
            )
        return self._stubs["list_model_version_checkpoints"]

    @property
    def update_model(
        self,
    ) -> Callable[[model_service.UpdateModelRequest], gca_model.Model]:
        r
        
        
        
        
        if "update_model" not in self._stubs:
            self._stubs["update_model"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/UpdateModel",
                request_serializer=model_service.UpdateModelRequest.serialize,
                response_deserializer=gca_model.Model.deserialize,
            )
        return self._stubs["update_model"]

    @property
    def update_explanation_dataset(
        self,
    ) -> Callable[
        [model_service.UpdateExplanationDatasetRequest], operations_pb2.Operation
    ]:
        r
        
        
        
        
        if "update_explanation_dataset" not in self._stubs:
            self._stubs[
                "update_explanation_dataset"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/UpdateExplanationDataset",
                request_serializer=model_service.UpdateExplanationDatasetRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["update_explanation_dataset"]

    @property
    def delete_model(
        self,
    ) -> Callable[[model_service.DeleteModelRequest], operations_pb2.Operation]:
        r
        
        
        
        
        if "delete_model" not in self._stubs:
            self._stubs["delete_model"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/DeleteModel",
                request_serializer=model_service.DeleteModelRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["delete_model"]

    @property
    def delete_model_version(
        self,
    ) -> Callable[[model_service.DeleteModelVersionRequest], operations_pb2.Operation]:
        r
        
        
        
        
        if "delete_model_version" not in self._stubs:
            self._stubs["delete_model_version"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/DeleteModelVersion",
                request_serializer=model_service.DeleteModelVersionRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["delete_model_version"]

    @property
    def merge_version_aliases(
        self,
    ) -> Callable[[model_service.MergeVersionAliasesRequest], model.Model]:
        r
        
        
        
        
        if "merge_version_aliases" not in self._stubs:
            self._stubs["merge_version_aliases"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/MergeVersionAliases",
                request_serializer=model_service.MergeVersionAliasesRequest.serialize,
                response_deserializer=model.Model.deserialize,
            )
        return self._stubs["merge_version_aliases"]

    @property
    def export_model(
        self,
    ) -> Callable[[model_service.ExportModelRequest], operations_pb2.Operation]:
        r
        
        
        
        
        if "export_model" not in self._stubs:
            self._stubs["export_model"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/ExportModel",
                request_serializer=model_service.ExportModelRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["export_model"]

    @property
    def copy_model(
        self,
    ) -> Callable[[model_service.CopyModelRequest], operations_pb2.Operation]:
        r
        
        
        
        
        if "copy_model" not in self._stubs:
            self._stubs["copy_model"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/CopyModel",
                request_serializer=model_service.CopyModelRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["copy_model"]

    @property
    def import_model_evaluation(
        self,
    ) -> Callable[
        [model_service.ImportModelEvaluationRequest],
        gca_model_evaluation.ModelEvaluation,
    ]:
        r
        
        
        
        
        if "import_model_evaluation" not in self._stubs:
            self._stubs["import_model_evaluation"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/ImportModelEvaluation",
                request_serializer=model_service.ImportModelEvaluationRequest.serialize,
                response_deserializer=gca_model_evaluation.ModelEvaluation.deserialize,
            )
        return self._stubs["import_model_evaluation"]

    @property
    def batch_import_model_evaluation_slices(
        self,
    ) -> Callable[
        [model_service.BatchImportModelEvaluationSlicesRequest],
        model_service.BatchImportModelEvaluationSlicesResponse,
    ]:
        r
        
        
        
        
        if "batch_import_model_evaluation_slices" not in self._stubs:
            self._stubs[
                "batch_import_model_evaluation_slices"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/BatchImportModelEvaluationSlices",
                request_serializer=model_service.BatchImportModelEvaluationSlicesRequest.serialize,
                response_deserializer=model_service.BatchImportModelEvaluationSlicesResponse.deserialize,
            )
        return self._stubs["batch_import_model_evaluation_slices"]

    @property
    def batch_import_evaluated_annotations(
        self,
    ) -> Callable[
        [model_service.BatchImportEvaluatedAnnotationsRequest],
        model_service.BatchImportEvaluatedAnnotationsResponse,
    ]:
        r
        
        
        
        
        if "batch_import_evaluated_annotations" not in self._stubs:
            self._stubs[
                "batch_import_evaluated_annotations"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/BatchImportEvaluatedAnnotations",
                request_serializer=model_service.BatchImportEvaluatedAnnotationsRequest.serialize,
                response_deserializer=model_service.BatchImportEvaluatedAnnotationsResponse.deserialize,
            )
        return self._stubs["batch_import_evaluated_annotations"]

    @property
    def get_model_evaluation(
        self,
    ) -> Callable[
        [model_service.GetModelEvaluationRequest], model_evaluation.ModelEvaluation
    ]:
        r
        
        
        
        
        if "get_model_evaluation" not in self._stubs:
            self._stubs["get_model_evaluation"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/GetModelEvaluation",
                request_serializer=model_service.GetModelEvaluationRequest.serialize,
                response_deserializer=model_evaluation.ModelEvaluation.deserialize,
            )
        return self._stubs["get_model_evaluation"]

    @property
    def list_model_evaluations(
        self,
    ) -> Callable[
        [model_service.ListModelEvaluationsRequest],
        model_service.ListModelEvaluationsResponse,
    ]:
        r
        
        
        
        
        if "list_model_evaluations" not in self._stubs:
            self._stubs["list_model_evaluations"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/ListModelEvaluations",
                request_serializer=model_service.ListModelEvaluationsRequest.serialize,
                response_deserializer=model_service.ListModelEvaluationsResponse.deserialize,
            )
        return self._stubs["list_model_evaluations"]

    @property
    def get_model_evaluation_slice(
        self,
    ) -> Callable[
        [model_service.GetModelEvaluationSliceRequest],
        model_evaluation_slice.ModelEvaluationSlice,
    ]:
        r
        
        
        
        
        if "get_model_evaluation_slice" not in self._stubs:
            self._stubs[
                "get_model_evaluation_slice"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/GetModelEvaluationSlice",
                request_serializer=model_service.GetModelEvaluationSliceRequest.serialize,
                response_deserializer=model_evaluation_slice.ModelEvaluationSlice.deserialize,
            )
        return self._stubs["get_model_evaluation_slice"]

    @property
    def list_model_evaluation_slices(
        self,
    ) -> Callable[
        [model_service.ListModelEvaluationSlicesRequest],
        model_service.ListModelEvaluationSlicesResponse,
    ]:
        r
        
        
        
        
        if "list_model_evaluation_slices" not in self._stubs:
            self._stubs[
                "list_model_evaluation_slices"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1beta1.ModelService/ListModelEvaluationSlices",
                request_serializer=model_service.ListModelEvaluationSlicesRequest.serialize,
                response_deserializer=model_service.ListModelEvaluationSlicesResponse.deserialize,
            )
        return self._stubs["list_model_evaluation_slices"]

    def close(self):
        self._logged_channel.close()

    @property
    def delete_operation(
        self,
    ) -> Callable[[operations_pb2.DeleteOperationRequest], None]:
        r
        
        
        
        
        if "delete_operation" not in self._stubs:
            self._stubs["delete_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/DeleteOperation",
                request_serializer=operations_pb2.DeleteOperationRequest.SerializeToString,
                response_deserializer=None,
            )
        return self._stubs["delete_operation"]

    @property
    def cancel_operation(
        self,
    ) -> Callable[[operations_pb2.CancelOperationRequest], None]:
        r
        
        
        
        
        if "cancel_operation" not in self._stubs:
            self._stubs["cancel_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/CancelOperation",
                request_serializer=operations_pb2.CancelOperationRequest.SerializeToString,
                response_deserializer=None,
            )
        return self._stubs["cancel_operation"]

    @property
    def wait_operation(
        self,
    ) -> Callable[[operations_pb2.WaitOperationRequest], None]:
        r
        
        
        
        
        if "wait_operation" not in self._stubs:
            self._stubs["wait_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/WaitOperation",
                request_serializer=operations_pb2.WaitOperationRequest.SerializeToString,
                response_deserializer=None,
            )
        return self._stubs["wait_operation"]

    @property
    def get_operation(
        self,
    ) -> Callable[[operations_pb2.GetOperationRequest], operations_pb2.Operation]:
        r
        
        
        
        
        if "get_operation" not in self._stubs:
            self._stubs["get_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/GetOperation",
                request_serializer=operations_pb2.GetOperationRequest.SerializeToString,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["get_operation"]

    @property
    def list_operations(
        self,
    ) -> Callable[
        [operations_pb2.ListOperationsRequest], operations_pb2.ListOperationsResponse
    ]:
        r
        
        
        
        
        if "list_operations" not in self._stubs:
            self._stubs["list_operations"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/ListOperations",
                request_serializer=operations_pb2.ListOperationsRequest.SerializeToString,
                response_deserializer=operations_pb2.ListOperationsResponse.FromString,
            )
        return self._stubs["list_operations"]

    @property
    def list_locations(
        self,
    ) -> Callable[
        [locations_pb2.ListLocationsRequest], locations_pb2.ListLocationsResponse
    ]:
        r
        
        
        
        
        if "list_locations" not in self._stubs:
            self._stubs["list_locations"] = self._logged_channel.unary_unary(
                "/google.cloud.location.Locations/ListLocations",
                request_serializer=locations_pb2.ListLocationsRequest.SerializeToString,
                response_deserializer=locations_pb2.ListLocationsResponse.FromString,
            )
        return self._stubs["list_locations"]

    @property
    def get_location(
        self,
    ) -> Callable[[locations_pb2.GetLocationRequest], locations_pb2.Location]:
        r
        
        
        
        
        if "get_location" not in self._stubs:
            self._stubs["get_location"] = self._logged_channel.unary_unary(
                "/google.cloud.location.Locations/GetLocation",
                request_serializer=locations_pb2.GetLocationRequest.SerializeToString,
                response_deserializer=locations_pb2.Location.FromString,
            )
        return self._stubs["get_location"]

    @property
    def set_iam_policy(
        self,
    ) -> Callable[[iam_policy_pb2.SetIamPolicyRequest], policy_pb2.Policy]:
        r
        
        
        
        
        if "set_iam_policy" not in self._stubs:
            self._stubs["set_iam_policy"] = self._logged_channel.unary_unary(
                "/google.iam.v1.IAMPolicy/SetIamPolicy",
                request_serializer=iam_policy_pb2.SetIamPolicyRequest.SerializeToString,
                response_deserializer=policy_pb2.Policy.FromString,
            )
        return self._stubs["set_iam_policy"]

    @property
    def get_iam_policy(
        self,
    ) -> Callable[[iam_policy_pb2.GetIamPolicyRequest], policy_pb2.Policy]:
        r
        
        
        
        
        if "get_iam_policy" not in self._stubs:
            self._stubs["get_iam_policy"] = self._logged_channel.unary_unary(
                "/google.iam.v1.IAMPolicy/GetIamPolicy",
                request_serializer=iam_policy_pb2.GetIamPolicyRequest.SerializeToString,
                response_deserializer=policy_pb2.Policy.FromString,
            )
        return self._stubs["get_iam_policy"]

    @property
    def test_iam_permissions(
        self,
    ) -> Callable[
        [iam_policy_pb2.TestIamPermissionsRequest],
        iam_policy_pb2.TestIamPermissionsResponse,
    ]:
        r
        
        
        
        
        if "test_iam_permissions" not in self._stubs:
            self._stubs["test_iam_permissions"] = self._logged_channel.unary_unary(
                "/google.iam.v1.IAMPolicy/TestIamPermissions",
                request_serializer=iam_policy_pb2.TestIamPermissionsRequest.SerializeToString,
                response_deserializer=iam_policy_pb2.TestIamPermissionsResponse.FromString,
            )
        return self._stubs["test_iam_permissions"]

    @property
    def kind(self) -> str:
        return "grpc"


__all__ = ("ModelServiceGrpcTransport",)
