














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import VertexRagServiceTransport
from .grpc import VertexRagServiceGrpcTransport
from .grpc_asyncio import VertexRagServiceGrpcAsyncIOTransport
from .rest import VertexRagServiceRestTransport
from .rest import VertexRagServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncVertexRagServiceRestTransport
    from .rest_asyncio import AsyncVertexRagServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncVertexRagServiceRestTransport",
        "AsyncVertexRagServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = VertexRagServiceGrpcTransport
_transport_registry["grpc_asyncio"] = VertexRagServiceGrpcAsyncIOTransport
_transport_registry["rest"] = VertexRagServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncVertexRagServiceRestTransport

__all__ = (
    "VertexRagServiceTransport",
    "VertexRagServiceGrpcTransport",
    "VertexRagServiceGrpcAsyncIOTransport",
    "VertexRagServiceRestTransport",
    "VertexRagServiceRestInterceptor",
) + ASYNC_REST_CLASSES
