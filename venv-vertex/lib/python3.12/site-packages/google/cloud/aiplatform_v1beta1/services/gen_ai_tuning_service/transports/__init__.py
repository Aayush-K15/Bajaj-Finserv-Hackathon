














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import GenAiTuningServiceTransport
from .grpc import GenAiTuningServiceGrpcTransport
from .grpc_asyncio import GenAiTuningServiceGrpcAsyncIOTransport
from .rest import GenAiTuningServiceRestTransport
from .rest import GenAiTuningServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncGenAiTuningServiceRestTransport
    from .rest_asyncio import AsyncGenAiTuningServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncGenAiTuningServiceRestTransport",
        "AsyncGenAiTuningServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = (
    OrderedDict()
)  
_transport_registry["grpc"] = GenAiTuningServiceGrpcTransport
_transport_registry["grpc_asyncio"] = GenAiTuningServiceGrpcAsyncIOTransport
_transport_registry["rest"] = GenAiTuningServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncGenAiTuningServiceRestTransport

__all__ = (
    "GenAiTuningServiceTransport",
    "GenAiTuningServiceGrpcTransport",
    "GenAiTuningServiceGrpcAsyncIOTransport",
    "GenAiTuningServiceRestTransport",
    "GenAiTuningServiceRestInterceptor",
) + ASYNC_REST_CLASSES
