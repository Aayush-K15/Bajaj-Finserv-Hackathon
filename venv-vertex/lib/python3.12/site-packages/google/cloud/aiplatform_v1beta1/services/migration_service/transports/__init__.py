














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import MigrationServiceTransport
from .grpc import MigrationServiceGrpcTransport
from .grpc_asyncio import MigrationServiceGrpcAsyncIOTransport
from .rest import MigrationServiceRestTransport
from .rest import MigrationServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncMigrationServiceRestTransport
    from .rest_asyncio import AsyncMigrationServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncMigrationServiceRestTransport",
        "AsyncMigrationServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = MigrationServiceGrpcTransport
_transport_registry["grpc_asyncio"] = MigrationServiceGrpcAsyncIOTransport
_transport_registry["rest"] = MigrationServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncMigrationServiceRestTransport

__all__ = (
    "MigrationServiceTransport",
    "MigrationServiceGrpcTransport",
    "MigrationServiceGrpcAsyncIOTransport",
    "MigrationServiceRestTransport",
    "MigrationServiceRestInterceptor",
) + ASYNC_REST_CLASSES
