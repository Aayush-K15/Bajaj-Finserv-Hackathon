














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import MatchServiceTransport
from .grpc import MatchServiceGrpcTransport
from .grpc_asyncio import MatchServiceGrpcAsyncIOTransport
from .rest import MatchServiceRestTransport
from .rest import MatchServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncMatchServiceRestTransport
    from .rest_asyncio import AsyncMatchServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncMatchServiceRestTransport",
        "AsyncMatchServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = MatchServiceGrpcTransport
_transport_registry["grpc_asyncio"] = MatchServiceGrpcAsyncIOTransport
_transport_registry["rest"] = MatchServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncMatchServiceRestTransport

__all__ = (
    "MatchServiceTransport",
    "MatchServiceGrpcTransport",
    "MatchServiceGrpcAsyncIOTransport",
    "MatchServiceRestTransport",
    "MatchServiceRestInterceptor",
) + ASYNC_REST_CLASSES
