














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import ExtensionRegistryServiceTransport
from .grpc import ExtensionRegistryServiceGrpcTransport
from .grpc_asyncio import ExtensionRegistryServiceGrpcAsyncIOTransport
from .rest import ExtensionRegistryServiceRestTransport
from .rest import ExtensionRegistryServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncExtensionRegistryServiceRestTransport
    from .rest_asyncio import AsyncExtensionRegistryServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncExtensionRegistryServiceRestTransport",
        "AsyncExtensionRegistryServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = (
    OrderedDict()
)  
_transport_registry["grpc"] = ExtensionRegistryServiceGrpcTransport
_transport_registry["grpc_asyncio"] = ExtensionRegistryServiceGrpcAsyncIOTransport
_transport_registry["rest"] = ExtensionRegistryServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncExtensionRegistryServiceRestTransport

__all__ = (
    "ExtensionRegistryServiceTransport",
    "ExtensionRegistryServiceGrpcTransport",
    "ExtensionRegistryServiceGrpcAsyncIOTransport",
    "ExtensionRegistryServiceRestTransport",
    "ExtensionRegistryServiceRestInterceptor",
) + ASYNC_REST_CLASSES
