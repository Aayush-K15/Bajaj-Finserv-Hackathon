














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import ModelServiceTransport
from .grpc import ModelServiceGrpcTransport
from .grpc_asyncio import ModelServiceGrpcAsyncIOTransport
from .rest import ModelServiceRestTransport
from .rest import ModelServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncModelServiceRestTransport
    from .rest_asyncio import AsyncModelServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncModelServiceRestTransport",
        "AsyncModelServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = ModelServiceGrpcTransport
_transport_registry["grpc_asyncio"] = ModelServiceGrpcAsyncIOTransport
_transport_registry["rest"] = ModelServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncModelServiceRestTransport

__all__ = (
    "ModelServiceTransport",
    "ModelServiceGrpcTransport",
    "ModelServiceGrpcAsyncIOTransport",
    "ModelServiceRestTransport",
    "ModelServiceRestInterceptor",
) + ASYNC_REST_CLASSES
