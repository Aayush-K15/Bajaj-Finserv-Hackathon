














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import TensorboardServiceTransport
from .grpc import TensorboardServiceGrpcTransport
from .grpc_asyncio import TensorboardServiceGrpcAsyncIOTransport
from .rest import TensorboardServiceRestTransport
from .rest import TensorboardServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncTensorboardServiceRestTransport
    from .rest_asyncio import AsyncTensorboardServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncTensorboardServiceRestTransport",
        "AsyncTensorboardServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = (
    OrderedDict()
)  
_transport_registry["grpc"] = TensorboardServiceGrpcTransport
_transport_registry["grpc_asyncio"] = TensorboardServiceGrpcAsyncIOTransport
_transport_registry["rest"] = TensorboardServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncTensorboardServiceRestTransport

__all__ = (
    "TensorboardServiceTransport",
    "TensorboardServiceGrpcTransport",
    "TensorboardServiceGrpcAsyncIOTransport",
    "TensorboardServiceRestTransport",
    "TensorboardServiceRestInterceptor",
) + ASYNC_REST_CLASSES
