














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import ModelMonitoringServiceTransport
from .grpc import ModelMonitoringServiceGrpcTransport
from .grpc_asyncio import ModelMonitoringServiceGrpcAsyncIOTransport
from .rest import ModelMonitoringServiceRestTransport
from .rest import ModelMonitoringServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncModelMonitoringServiceRestTransport
    from .rest_asyncio import AsyncModelMonitoringServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncModelMonitoringServiceRestTransport",
        "AsyncModelMonitoringServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = (
    OrderedDict()
)  
_transport_registry["grpc"] = ModelMonitoringServiceGrpcTransport
_transport_registry["grpc_asyncio"] = ModelMonitoringServiceGrpcAsyncIOTransport
_transport_registry["rest"] = ModelMonitoringServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncModelMonitoringServiceRestTransport

__all__ = (
    "ModelMonitoringServiceTransport",
    "ModelMonitoringServiceGrpcTransport",
    "ModelMonitoringServiceGrpcAsyncIOTransport",
    "ModelMonitoringServiceRestTransport",
    "ModelMonitoringServiceRestInterceptor",
) + ASYNC_REST_CLASSES
