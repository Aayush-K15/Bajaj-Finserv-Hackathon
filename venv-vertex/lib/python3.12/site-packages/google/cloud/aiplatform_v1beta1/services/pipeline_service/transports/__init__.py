














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import PipelineServiceTransport
from .grpc import PipelineServiceGrpcTransport
from .grpc_asyncio import PipelineServiceGrpcAsyncIOTransport
from .rest import PipelineServiceRestTransport
from .rest import PipelineServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncPipelineServiceRestTransport
    from .rest_asyncio import AsyncPipelineServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncPipelineServiceRestTransport",
        "AsyncPipelineServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = PipelineServiceGrpcTransport
_transport_registry["grpc_asyncio"] = PipelineServiceGrpcAsyncIOTransport
_transport_registry["rest"] = PipelineServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncPipelineServiceRestTransport

__all__ = (
    "PipelineServiceTransport",
    "PipelineServiceGrpcTransport",
    "PipelineServiceGrpcAsyncIOTransport",
    "PipelineServiceRestTransport",
    "PipelineServiceRestInterceptor",
) + ASYNC_REST_CLASSES
