














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import ModelGardenServiceTransport
from .grpc import ModelGardenServiceGrpcTransport
from .grpc_asyncio import ModelGardenServiceGrpcAsyncIOTransport
from .rest import ModelGardenServiceRestTransport
from .rest import ModelGardenServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncModelGardenServiceRestTransport
    from .rest_asyncio import AsyncModelGardenServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncModelGardenServiceRestTransport",
        "AsyncModelGardenServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = (
    OrderedDict()
)  
_transport_registry["grpc"] = ModelGardenServiceGrpcTransport
_transport_registry["grpc_asyncio"] = ModelGardenServiceGrpcAsyncIOTransport
_transport_registry["rest"] = ModelGardenServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncModelGardenServiceRestTransport

__all__ = (
    "ModelGardenServiceTransport",
    "ModelGardenServiceGrpcTransport",
    "ModelGardenServiceGrpcAsyncIOTransport",
    "ModelGardenServiceRestTransport",
    "ModelGardenServiceRestInterceptor",
) + ASYNC_REST_CLASSES
