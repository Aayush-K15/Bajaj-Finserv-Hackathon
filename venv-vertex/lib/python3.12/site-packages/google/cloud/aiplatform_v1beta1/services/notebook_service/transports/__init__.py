














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import NotebookServiceTransport
from .grpc import NotebookServiceGrpcTransport
from .grpc_asyncio import NotebookServiceGrpcAsyncIOTransport
from .rest import NotebookServiceRestTransport
from .rest import NotebookServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncNotebookServiceRestTransport
    from .rest_asyncio import AsyncNotebookServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncNotebookServiceRestTransport",
        "AsyncNotebookServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = NotebookServiceGrpcTransport
_transport_registry["grpc_asyncio"] = NotebookServiceGrpcAsyncIOTransport
_transport_registry["rest"] = NotebookServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncNotebookServiceRestTransport

__all__ = (
    "NotebookServiceTransport",
    "NotebookServiceGrpcTransport",
    "NotebookServiceGrpcAsyncIOTransport",
    "NotebookServiceRestTransport",
    "NotebookServiceRestInterceptor",
) + ASYNC_REST_CLASSES
