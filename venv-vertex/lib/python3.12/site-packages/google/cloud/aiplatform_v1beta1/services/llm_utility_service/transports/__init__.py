














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import LlmUtilityServiceTransport
from .grpc import LlmUtilityServiceGrpcTransport
from .grpc_asyncio import LlmUtilityServiceGrpcAsyncIOTransport
from .rest import LlmUtilityServiceRestTransport
from .rest import LlmUtilityServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncLlmUtilityServiceRestTransport
    from .rest_asyncio import AsyncLlmUtilityServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncLlmUtilityServiceRestTransport",
        "AsyncLlmUtilityServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = LlmUtilityServiceGrpcTransport
_transport_registry["grpc_asyncio"] = LlmUtilityServiceGrpcAsyncIOTransport
_transport_registry["rest"] = LlmUtilityServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncLlmUtilityServiceRestTransport

__all__ = (
    "LlmUtilityServiceTransport",
    "LlmUtilityServiceGrpcTransport",
    "LlmUtilityServiceGrpcAsyncIOTransport",
    "LlmUtilityServiceRestTransport",
    "LlmUtilityServiceRestInterceptor",
) + ASYNC_REST_CLASSES
