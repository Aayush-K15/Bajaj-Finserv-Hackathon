















import re

from google.api_core.exceptions import NotFound

from google.cloud.storage._opentelemetry_tracing import create_trace_span
from google.cloud.storage.constants import _DEFAULT_TIMEOUT
from google.cloud.storage.retry import DEFAULT_RETRY


OBJECT_FINALIZE_EVENT_TYPE = "OBJECT_FINALIZE"
OBJECT_METADATA_UPDATE_EVENT_TYPE = "OBJECT_METADATA_UPDATE"
OBJECT_DELETE_EVENT_TYPE = "OBJECT_DELETE"
OBJECT_ARCHIVE_EVENT_TYPE = "OBJECT_ARCHIVE"

JSON_API_V1_PAYLOAD_FORMAT = "JSON_API_V1"
NONE_PAYLOAD_FORMAT = "NONE"

_TOPIC_REF_FMT = "//pubsub.googleapis.com/projects/{}/topics/{}"
_PROJECT_PATTERN = r"(?P<project>[a-z][a-z0-9-]{4,28}[a-z0-9])"
_TOPIC_NAME_PATTERN = r"(?P<name>[A-Za-z](\w|[-_.~+%])+)"
_TOPIC_REF_PATTERN = _TOPIC_REF_FMT.format(_PROJECT_PATTERN, _TOPIC_NAME_PATTERN)
_TOPIC_REF_RE = re.compile(_TOPIC_REF_PATTERN)
_BAD_TOPIC = (
    "Resource has invalid topic: {}; see "
    "https://cloud.google.com/storage/docs/json_api/v1/"
    "notifications/insert
)


class BucketNotification(object):
    

    def __init__(
        self,
        bucket,
        topic_name=None,
        topic_project=None,
        custom_attributes=None,
        event_types=None,
        blob_name_prefix=None,
        payload_format=NONE_PAYLOAD_FORMAT,
        notification_id=None,
    ):
        self._bucket = bucket
        self._topic_name = topic_name

        if topic_project is None:
            topic_project = bucket.client.project

        if topic_project is None:
            raise ValueError("Client project not set:  pass an explicit topic_project.")

        self._topic_project = topic_project

        self._properties = {}

        if custom_attributes is not None:
            self._properties["custom_attributes"] = custom_attributes

        if event_types is not None:
            self._properties["event_types"] = event_types

        if blob_name_prefix is not None:
            self._properties["object_name_prefix"] = blob_name_prefix

        if notification_id is not None:
            self._properties["id"] = notification_id

        self._properties["payload_format"] = payload_format

    @classmethod
    def from_api_repr(cls, resource, bucket):
        
        topic_path = resource.get("topic")
        if topic_path is None:
            raise ValueError("Resource has no topic")

        name, project = _parse_topic_path(topic_path)
        instance = cls(bucket, name, topic_project=project)
        instance._properties = resource

        return instance

    @property
    def bucket(self):
        
        return self._bucket

    @property
    def topic_name(self):
        
        return self._topic_name

    @property
    def topic_project(self):
        
        return self._topic_project

    @property
    def custom_attributes(self):
        
        return self._properties.get("custom_attributes")

    @property
    def event_types(self):
        
        return self._properties.get("event_types")

    @property
    def blob_name_prefix(self):
        
        return self._properties.get("object_name_prefix")

    @property
    def payload_format(self):
        
        return self._properties.get("payload_format")

    @property
    def notification_id(self):
        
        return self._properties.get("id")

    @property
    def etag(self):
        
        return self._properties.get("etag")

    @property
    def self_link(self):
        
        return self._properties.get("selfLink")

    @property
    def client(self):
        
        return self.bucket.client

    @property
    def path(self):
        
        return f"/b/{self.bucket.name}/notificationConfigs/{self.notification_id}"

    def _require_client(self, client):
        
        if client is None:
            client = self.client
        return client

    def _set_properties(self, response):
        
        self._properties.clear()
        self._properties.update(response)

    @create_trace_span(name="Storage.BucketNotification.create")
    def create(self, client=None, timeout=_DEFAULT_TIMEOUT, retry=None):
        
        if self.notification_id is not None:
            raise ValueError(
                f"notification_id already set to {self.notification_id}; must be None to create a Notification."
            )

        client = self._require_client(client)

        query_params = {}
        if self.bucket.user_project is not None:
            query_params["userProject"] = self.bucket.user_project

        path = f"/b/{self.bucket.name}/notificationConfigs"
        properties = self._properties.copy()

        if self.topic_name is None:
            properties["topic"] = _TOPIC_REF_FMT.format(self.topic_project, "")
        else:
            properties["topic"] = _TOPIC_REF_FMT.format(
                self.topic_project, self.topic_name
            )

        self._properties = client._post_resource(
            path,
            properties,
            query_params=query_params,
            timeout=timeout,
            retry=retry,
        )

    @create_trace_span(name="Storage.BucketNotification.exists")
    def exists(self, client=None, timeout=_DEFAULT_TIMEOUT, retry=DEFAULT_RETRY):
        
        if self.notification_id is None:
            raise ValueError("Notification ID not set: set an explicit notification_id")

        client = self._require_client(client)

        query_params = {}
        if self.bucket.user_project is not None:
            query_params["userProject"] = self.bucket.user_project

        try:
            client._get_resource(
                self.path,
                query_params=query_params,
                timeout=timeout,
                retry=retry,
            )
        except NotFound:
            return False
        else:
            return True

    @create_trace_span(name="Storage.BucketNotification.reload")
    def reload(self, client=None, timeout=_DEFAULT_TIMEOUT, retry=DEFAULT_RETRY):
        
        if self.notification_id is None:
            raise ValueError("Notification ID not set: set an explicit notification_id")

        client = self._require_client(client)

        query_params = {}
        if self.bucket.user_project is not None:
            query_params["userProject"] = self.bucket.user_project

        response = client._get_resource(
            self.path,
            query_params=query_params,
            timeout=timeout,
            retry=retry,
        )
        self._set_properties(response)

    @create_trace_span(name="Storage.BucketNotification.delete")
    def delete(self, client=None, timeout=_DEFAULT_TIMEOUT, retry=DEFAULT_RETRY):
        
        if self.notification_id is None:
            raise ValueError("Notification ID not set: set an explicit notification_id")

        client = self._require_client(client)

        query_params = {}
        if self.bucket.user_project is not None:
            query_params["userProject"] = self.bucket.user_project

        client._delete_resource(
            self.path,
            query_params=query_params,
            timeout=timeout,
            retry=retry,
        )


def _parse_topic_path(topic_path):
    
    match = _TOPIC_REF_RE.match(topic_path)
    if match is None:
        raise ValueError(_BAD_TOPIC.format(topic_path))

    return match.group("name"), match.group("project")
