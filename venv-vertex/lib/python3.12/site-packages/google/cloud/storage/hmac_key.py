















from google.cloud.exceptions import NotFound
from google.cloud._helpers import _rfc3339_nanos_to_datetime

from google.cloud.storage._opentelemetry_tracing import create_trace_span
from google.cloud.storage.constants import _DEFAULT_TIMEOUT
from google.cloud.storage.retry import DEFAULT_RETRY
from google.cloud.storage.retry import DEFAULT_RETRY_IF_ETAG_IN_JSON


class HMACKeyMetadata(object):
    

    ACTIVE_STATE = "ACTIVE"
    
    INACTIVE_STATE = "INACTIVE"
    
    DELETED_STATE = "DELETED"
    

    _SETTABLE_STATES = (ACTIVE_STATE, INACTIVE_STATE)

    def __init__(self, client, access_id=None, project_id=None, user_project=None):
        self._client = client
        self._properties = {}

        if access_id is not None:
            self._properties["accessId"] = access_id

        if project_id is not None:
            self._properties["projectId"] = project_id

        self._user_project = user_project

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return NotImplemented

        return self._client == other._client and self.access_id == other.access_id

    def __hash__(self):
        return hash(self._client) + hash(self.access_id)

    @property
    def access_id(self):
        
        return self._properties.get("accessId")

    @property
    def etag(self):
        
        return self._properties.get("etag")

    @property
    def id(self):
        
        return self._properties.get("id")

    @property
    def project(self):
        
        return self._properties.get("projectId")

    @property
    def service_account_email(self):
        
        return self._properties.get("serviceAccountEmail")

    @property
    def state(self):
        
        return self._properties.get("state")

    @state.setter
    def state(self, value):
        self._properties["state"] = value

    @property
    def time_created(self):
        
        value = self._properties.get("timeCreated")
        if value is not None:
            return _rfc3339_nanos_to_datetime(value)

    @property
    def updated(self):
        
        value = self._properties.get("updated")
        if value is not None:
            return _rfc3339_nanos_to_datetime(value)

    @property
    def path(self):
        

        if self.access_id is None:
            raise ValueError("No 'access_id' set.")

        project = self.project
        if project is None:
            project = self._client.project

        return f"/projects/{project}/hmacKeys/{self.access_id}"

    @property
    def user_project(self):
        
        return self._user_project

    @create_trace_span(name="Storage.HmacKey.exists")
    def exists(self, timeout=_DEFAULT_TIMEOUT, retry=DEFAULT_RETRY):
        
        try:
            qs_params = {}

            if self.user_project is not None:
                qs_params["userProject"] = self.user_project

            self._client._get_resource(
                self.path,
                query_params=qs_params,
                timeout=timeout,
                retry=retry,
            )
        except NotFound:
            return False
        else:
            return True

    @create_trace_span(name="Storage.HmacKey.reload")
    def reload(self, timeout=_DEFAULT_TIMEOUT, retry=DEFAULT_RETRY):
        
        qs_params = {}

        if self.user_project is not None:
            qs_params["userProject"] = self.user_project

        self._properties = self._client._get_resource(
            self.path,
            query_params=qs_params,
            timeout=timeout,
            retry=retry,
        )

    @create_trace_span(name="Storage.HmacKey.update")
    def update(self, timeout=_DEFAULT_TIMEOUT, retry=DEFAULT_RETRY_IF_ETAG_IN_JSON):
        
        qs_params = {}
        if self.user_project is not None:
            qs_params["userProject"] = self.user_project

        payload = {"state": self.state}
        self._properties = self._client._put_resource(
            self.path,
            payload,
            query_params=qs_params,
            timeout=timeout,
            retry=retry,
        )

    @create_trace_span(name="Storage.HmacKey.delete")
    def delete(self, timeout=_DEFAULT_TIMEOUT, retry=DEFAULT_RETRY):
        
        qs_params = {}
        if self.user_project is not None:
            qs_params["userProject"] = self.user_project

        self._client._delete_resource(
            self.path,
            query_params=qs_params,
            timeout=timeout,
            retry=retry,
        )
