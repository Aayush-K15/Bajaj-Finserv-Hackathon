















import weakref

from google.cloud import bigquery
from google.cloud.bigquery.dbapi import cursor
from google.cloud.bigquery.dbapi import _helpers


@_helpers.raise_on_closed("Operating on a closed connection.")
class Connection(object):
    

    def __init__(
        self,
        client=None,
        bqstorage_client=None,
        prefer_bqstorage_client=True,
    ):
        if client is None:
            client = bigquery.Client()
            self._owns_client = True
        else:
            self._owns_client = False

        
        
        if not prefer_bqstorage_client:
            bqstorage_client = None
            self._owns_bqstorage_client = False
        elif bqstorage_client is None:
            bqstorage_client = client._ensure_bqstorage_client()
            self._owns_bqstorage_client = bqstorage_client is not None
        else:
            self._owns_bqstorage_client = False
            bqstorage_client = client._ensure_bqstorage_client(bqstorage_client)

        self._client = client
        self._bqstorage_client = bqstorage_client

        self._closed = False
        self._cursors_created = weakref.WeakSet()

    def close(self):
        
        self._closed = True

        if self._owns_client:
            self._client.close()

        if self._owns_bqstorage_client:
            
            self._bqstorage_client._transport.grpc_channel.close()

        for cursor_ in self._cursors_created:
            if not cursor_._closed:
                cursor_.close()

    def commit(self):
        

    def cursor(self):
        
        new_cursor = cursor.Cursor(self)
        self._cursors_created.add(new_cursor)
        return new_cursor


def connect(client=None, bqstorage_client=None, prefer_bqstorage_client=True):
    
    return Connection(client, bqstorage_client, prefer_bqstorage_client)
