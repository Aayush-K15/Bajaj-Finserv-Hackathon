













from google.api_core import exceptions
from google.api_core import retry
import google.api_core.future.polling
from google.auth import exceptions as auth_exceptions  
import requests.exceptions


_RETRYABLE_REASONS = frozenset(
    ["rateLimitExceeded", "backendError", "internalError", "badGateway"]
)

_UNSTRUCTURED_RETRYABLE_TYPES = (
    ConnectionError,
    exceptions.TooManyRequests,
    exceptions.InternalServerError,
    exceptions.BadGateway,
    exceptions.ServiceUnavailable,
    requests.exceptions.ChunkedEncodingError,
    requests.exceptions.ConnectionError,
    requests.exceptions.Timeout,
    auth_exceptions.TransportError,
)

_DEFAULT_RETRY_DEADLINE = 10.0 * 60.0  



















_DEFAULT_JOB_DEADLINE = 2.0 * (2.0 * _DEFAULT_RETRY_DEADLINE)


def _should_retry(exc):
    
    if not hasattr(exc, "errors") or len(exc.errors) == 0:
        
        return isinstance(exc, _UNSTRUCTURED_RETRYABLE_TYPES)

    reason = exc.errors[0]["reason"]
    return reason in _RETRYABLE_REASONS


DEFAULT_RETRY = retry.Retry(predicate=_should_retry, deadline=_DEFAULT_RETRY_DEADLINE)



def _should_retry_get_job_conflict(exc):
    
    return isinstance(exc, exceptions.NotFound) or _should_retry(exc)




_DEFAULT_GET_JOB_CONFLICT_DEADLINE = _DEFAULT_RETRY_DEADLINE / 3.0
_DEFAULT_GET_JOB_CONFLICT_RETRY = retry.Retry(
    predicate=_should_retry_get_job_conflict,
    deadline=_DEFAULT_GET_JOB_CONFLICT_DEADLINE,
)








DEFAULT_TIMEOUT = None


job_retry_reasons = (
    "rateLimitExceeded",
    "backendError",
    "internalError",
    "jobRateLimitExceeded",
)


def _job_should_retry(exc):
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    if isinstance(exc, exceptions.RetryError):
        exc = exc.cause

    
    
    
    
    
    if _should_retry(exc):
        return True

    if not hasattr(exc, "errors") or len(exc.errors) == 0:
        return False

    reason = exc.errors[0]["reason"]
    return reason in job_retry_reasons


DEFAULT_JOB_RETRY = retry.Retry(
    predicate=_job_should_retry, deadline=_DEFAULT_JOB_DEADLINE
)



def _query_job_insert_should_retry(exc):
    
    
    
    
    
    if isinstance(exc, exceptions.RetryError):
        exc = exc.cause

    if isinstance(exc, exceptions.NotFound):
        message = exc.message
        
        
        return message is not None and " job" in message.lower()

    return _job_should_retry(exc)


_DEFAULT_QUERY_JOB_INSERT_RETRY = retry.Retry(
    predicate=_query_job_insert_should_retry,
    
    
    deadline=_DEFAULT_RETRY_DEADLINE,
)



DEFAULT_GET_JOB_TIMEOUT = 128


POLLING_DEFAULT_VALUE = google.api_core.future.polling.PollingFuture._DEFAULT_VALUE

