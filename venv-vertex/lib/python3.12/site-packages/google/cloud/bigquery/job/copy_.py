















import typing
from typing import Optional

from google.cloud.bigquery.encryption_configuration import EncryptionConfiguration
from google.cloud.bigquery import _helpers
from google.cloud.bigquery.table import TableReference

from google.cloud.bigquery.job.base import _AsyncJob
from google.cloud.bigquery.job.base import _JobConfig
from google.cloud.bigquery.job.base import _JobReference


class OperationType:
    

    OPERATION_TYPE_UNSPECIFIED = "OPERATION_TYPE_UNSPECIFIED"
    

    COPY = "COPY"
    

    SNAPSHOT = "SNAPSHOT"
    

    CLONE = "CLONE"
    

    RESTORE = "RESTORE"
    


class CopyJobConfig(_JobConfig):
    

    def __init__(self, **kwargs) -> None:
        super(CopyJobConfig, self).__init__("copy", **kwargs)

    @property
    def create_disposition(self):
        
        return self._get_sub_prop("createDisposition")

    @create_disposition.setter
    def create_disposition(self, value):
        self._set_sub_prop("createDisposition", value)

    @property
    def write_disposition(self):
        
        return self._get_sub_prop("writeDisposition")

    @write_disposition.setter
    def write_disposition(self, value):
        self._set_sub_prop("writeDisposition", value)

    @property
    def destination_encryption_configuration(self):
        
        prop = self._get_sub_prop("destinationEncryptionConfiguration")
        if prop is not None:
            prop = EncryptionConfiguration.from_api_repr(prop)
        return prop

    @destination_encryption_configuration.setter
    def destination_encryption_configuration(self, value):
        api_repr = value
        if value is not None:
            api_repr = value.to_api_repr()
        self._set_sub_prop("destinationEncryptionConfiguration", api_repr)

    @property
    def operation_type(self) -> str:
        
        return self._get_sub_prop(
            "operationType", OperationType.OPERATION_TYPE_UNSPECIFIED
        )

    @operation_type.setter
    def operation_type(self, value: Optional[str]):
        if value is None:
            value = OperationType.OPERATION_TYPE_UNSPECIFIED
        self._set_sub_prop("operationType", value)

    @property
    def destination_expiration_time(self) -> str:
        
        return self._get_sub_prop("destinationExpirationTime")

    @destination_expiration_time.setter
    def destination_expiration_time(self, value: str):
        self._set_sub_prop("destinationExpirationTime", value)


class CopyJob(_AsyncJob):
    

    _JOB_TYPE = "copy"
    _CONFIG_CLASS = CopyJobConfig

    def __init__(self, job_id, sources, destination, client, job_config=None):
        super(CopyJob, self).__init__(job_id, client)

        if job_config is not None:
            self._properties["configuration"] = job_config._properties

        if destination:
            _helpers._set_sub_prop(
                self._properties,
                ["configuration", "copy", "destinationTable"],
                destination.to_api_repr(),
            )

        if sources:
            source_resources = [source.to_api_repr() for source in sources]
            _helpers._set_sub_prop(
                self._properties,
                ["configuration", "copy", "sourceTables"],
                source_resources,
            )

    @property
    def configuration(self) -> CopyJobConfig:
        
        return typing.cast(CopyJobConfig, super().configuration)

    @property
    def destination(self):
        
        return TableReference.from_api_repr(
            _helpers._get_sub_prop(
                self._properties, ["configuration", "copy", "destinationTable"]
            )
        )

    @property
    def sources(self):
        
        source_configs = _helpers._get_sub_prop(
            self._properties, ["configuration", "copy", "sourceTables"]
        )
        if source_configs is None:
            single = _helpers._get_sub_prop(
                self._properties, ["configuration", "copy", "sourceTable"]
            )
            if single is None:
                raise KeyError("Resource missing 'sourceTables' / 'sourceTable'")
            source_configs = [single]

        sources = []
        for source_config in source_configs:
            table_ref = TableReference.from_api_repr(source_config)
            sources.append(table_ref)
        return sources

    @property
    def create_disposition(self):
        
        return self.configuration.create_disposition

    @property
    def write_disposition(self):
        
        return self.configuration.write_disposition

    @property
    def destination_encryption_configuration(self):
        
        return self.configuration.destination_encryption_configuration

    def to_api_repr(self):
        
        
        return {
            "jobReference": self._properties["jobReference"],
            "configuration": self._properties["configuration"],
        }

    @classmethod
    def from_api_repr(cls, resource, client):
        
        cls._check_resource_config(resource)
        job_ref = _JobReference._from_api_repr(resource["jobReference"])
        job = cls(job_ref, None, None, client=client)
        job._set_properties(resource)
        return job
