















from __future__ import print_function


class NodeVisitor(object):
    

    def visit(self, node):
        method_name = "visit_{}".format(type(node).__name__)
        visitor_method = getattr(self, method_name, self.method_missing)
        return visitor_method(node)

    def method_missing(self, node):
        raise Exception("No visit_{} method".format(type(node).__name__))


class QueryParamsExtractor(NodeVisitor):
    

    def visit_InputLine(self, node):
        params_dict_parts = []
        other_parts = []

        dest_var_parts = self.visit(node.destination_var)
        params, other_options = self.visit(node.option_list)

        if dest_var_parts:
            other_parts.extend(dest_var_parts)

        if dest_var_parts and other_options:
            other_parts.append(" ")
        other_parts.extend(other_options)

        params_dict_parts.extend(params)

        return "".join(params_dict_parts), "".join(other_parts)

    def visit_DestinationVar(self, node):
        return [node.name] if node.name is not None else []

    def visit_CmdOptionList(self, node):
        params_opt_parts = []
        other_parts = []

        for i, opt in enumerate(node.options):
            option_parts = self.visit(opt)
            list_to_extend = params_opt_parts if opt.name == "params" else other_parts

            if list_to_extend:
                list_to_extend.append(" ")
            list_to_extend.extend(option_parts)

        return params_opt_parts, other_parts

    def visit_CmdOption(self, node):
        result = ["--{}".format(node.name)]

        if node.value is not None:
            result.append(" ")
            value_parts = self.visit(node.value)
            result.extend(value_parts)

        return result

    def visit_CmdOptionValue(self, node):
        return [node.value]

    def visit_ParamsOption(self, node):
        value_parts = self.visit(node.value)
        return value_parts

    def visit_PyVarExpansion(self, node):
        return [node.raw_value]

    def visit_PyDict(self, node):
        result = ["{"]

        for i, item in enumerate(node.items):
            if i > 0:
                result.append(", ")
            item_parts = self.visit(item)
            result.extend(item_parts)

        result.append("}")
        return result

    def visit_PyDictItem(self, node):
        result = self.visit(node.key)  
        result.append(": ")
        value_parts = self.visit(node.value)
        result.extend(value_parts)
        return result

    def visit_PyDictKey(self, node):
        return [node.key_value]

    def visit_PyScalarValue(self, node):
        return [node.raw_value]

    def visit_PyTuple(self, node):
        result = ["("]

        for i, item in enumerate(node.items):
            if i > 0:
                result.append(", ")
            item_parts = self.visit(item)
            result.extend(item_parts)

        result.append(")")
        return result

    def visit_PyList(self, node):
        result = ["["]

        for i, item in enumerate(node.items):
            if i > 0:
                result.append(", ")
            item_parts = self.visit(item)
            result.extend(item_parts)

        result.append("]")
        return result
