















from typing import NamedTuple, Optional, Dict, Union

from google.cloud.aiplatform import utils
from google.cloud.aiplatform.compat.types import (
    accelerator_type_v1beta1 as gca_accelerator_type_compat,
)


class _ResourcePool(NamedTuple):
    

    replica_count: int = 1
    machine_type: str = "n1-standard-4"
    accelerator_count: int = 0
    accelerator_type: str = "ACCELERATOR_TYPE_UNSPECIFIED"
    boot_disk_type: str = "pd-ssd"
    boot_disk_size_gb: int = 100

    def _get_accelerator_type(self) -> Optional[str]:
        

        
        utils.validate_accelerator_type(self.accelerator_type)

        accelerator_enum = getattr(
            gca_accelerator_type_compat.AcceleratorType, self.accelerator_type
        )

        if (
            accelerator_enum
            != gca_accelerator_type_compat.AcceleratorType.ACCELERATOR_TYPE_UNSPECIFIED
        ):
            return self.accelerator_type

    @property
    def spec_dict(self) -> Dict[str, Union[int, str, Dict[str, Union[int, str]]]]:
        
        spec = {
            "machine_spec": {"machine_type": self.machine_type},
            "replica_count": self.replica_count,
            "disk_spec": {
                "boot_disk_type": self.boot_disk_type,
                "boot_disk_size_gb": self.boot_disk_size_gb,
            },
        }

        accelerator_type = self._get_accelerator_type()
        if accelerator_type and self.accelerator_count:
            spec["machine_spec"]["accelerator_type"] = accelerator_type
            spec["machine_spec"]["accelerator_count"] = self.accelerator_count

        return spec

    @property
    def is_empty(self) -> bool:
        
        return self.replica_count <= 0
