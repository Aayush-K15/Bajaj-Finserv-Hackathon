
















from typing import Dict, List, Union

from google.cloud.aiplatform import base
from google.cloud.aiplatform.compat.types import (
    featurestore_online_service_v1beta1 as gca_featurestore_online_service_v1beta1,
)
from google.cloud.aiplatform.compat.types import (
    types_v1beta1 as gca_types_v1beta1,
)

from google.cloud.aiplatform.featurestore import _entity_type

_LOGGER = base.Logger(__name__)


class EntityType(_entity_type._EntityType):
    

    
    
    
    def write_feature_values(
        self,
        instances: Union[
            List[gca_featurestore_online_service_v1beta1.WriteFeatureValuesPayload],
            Dict[
                str,
                Dict[
                    str,
                    Union[
                        int,
                        str,
                        float,
                        bool,
                        bytes,
                        List[int],
                        List[str],
                        List[float],
                        List[bool],
                    ],
                ],
            ],
            "pd.DataFrame",  
        ],
    ) -> "EntityType":
        

        if isinstance(instances, Dict):
            payloads = self._generate_payloads(instances=instances)
        elif isinstance(instances, List):
            payloads = instances
        else:
            instances_dict = instances.to_dict(orient="index")
            payloads = self._generate_payloads(instances=instances_dict)

        _LOGGER.log_action_start_against_resource(
            "Writing",
            "feature values",
            self,
        )

        self._featurestore_online_client.select_version("v1beta1").write_feature_values(
            entity_type=self.resource_name, payloads=payloads
        )

        _LOGGER.log_action_completed_against_resource("feature values", "written", self)

        return self

    @classmethod
    def _generate_payloads(
        cls,
        instances: Dict[
            str,
            Dict[
                str,
                Union[
                    int,
                    str,
                    float,
                    bool,
                    bytes,
                    List[int],
                    List[str],
                    List[float],
                    List[bool],
                ],
            ],
        ],
    ) -> List[gca_featurestore_online_service_v1beta1.WriteFeatureValuesPayload]:
        
        payloads = []
        for entity_id, features in instances.items():
            feature_values = {}
            for feature_id, value in features.items():
                feature_value = cls._convert_value_to_gapic_feature_value(
                    feature_id=feature_id, value=value
                )
                feature_values[feature_id] = feature_value
            payload = gca_featurestore_online_service_v1beta1.WriteFeatureValuesPayload(
                entity_id=entity_id, feature_values=feature_values
            )
            payloads.append(payload)

        return payloads

    @classmethod
    def _convert_value_to_gapic_feature_value(
        cls,
        feature_id: str,
        value: Union[
            int, str, float, bool, bytes, List[int], List[str], List[float], List[bool]
        ],
    ) -> gca_featurestore_online_service_v1beta1.FeatureValue:
        
        if isinstance(value, bool):
            feature_value = gca_featurestore_online_service_v1beta1.FeatureValue(
                bool_value=value
            )
        elif isinstance(value, str):
            feature_value = gca_featurestore_online_service_v1beta1.FeatureValue(
                string_value=value
            )
        elif isinstance(value, int):
            feature_value = gca_featurestore_online_service_v1beta1.FeatureValue(
                int64_value=value
            )
        elif isinstance(value, float):
            feature_value = gca_featurestore_online_service_v1beta1.FeatureValue(
                double_value=value
            )
        elif isinstance(value, bytes):
            feature_value = gca_featurestore_online_service_v1beta1.FeatureValue(
                bytes_value=value
            )
        elif isinstance(value, List):
            if all([isinstance(item, bool) for item in value]):
                feature_value = gca_featurestore_online_service_v1beta1.FeatureValue(
                    bool_array_value=gca_types_v1beta1.BoolArray(values=value)
                )
            elif all([isinstance(item, str) for item in value]):
                feature_value = gca_featurestore_online_service_v1beta1.FeatureValue(
                    string_array_value=gca_types_v1beta1.StringArray(values=value)
                )
            elif all([isinstance(item, int) for item in value]):
                feature_value = gca_featurestore_online_service_v1beta1.FeatureValue(
                    int64_array_value=gca_types_v1beta1.Int64Array(values=value)
                )
            elif all([isinstance(item, float) for item in value]):
                feature_value = gca_featurestore_online_service_v1beta1.FeatureValue(
                    double_array_value=gca_types_v1beta1.DoubleArray(values=value)
                )
            else:
                raise ValueError(
                    f"Cannot infer feature value for feature {feature_id} with "
                    f"value {value}! Please ensure every value in the list "
                    f"is the same type (either int, str, float, bool)."
                )

        else:
            raise ValueError(
                f"Cannot infer feature value for feature {feature_id} with "
                f"value {value}! {type(value)} type is not supported. "
                f"Please ensure value type is an int, str, float, bool, "
                f"bytes, or a list of int, str, float, bool."
            )
        return feature_value
