
















from typing import Optional, Dict, Union

from google.cloud.aiplatform_v1.types import (
    io as gca_io,
    model_monitoring as gca_model_monitoring_v1,
)


from google.cloud.aiplatform_v1beta1.types import (
    model_monitoring as gca_model_monitoring_v1beta1,
)

gca_model_monitoring = gca_model_monitoring_v1

TF_RECORD = "tf-record"
CSV = "csv"
JSONL = "jsonl"


class _SkewDetectionConfig:
    def __init__(
        self,
        data_source: Optional[str] = None,
        skew_thresholds: Union[Dict[str, float], float, None] = None,
        target_field: Optional[str] = None,
        attribute_skew_thresholds: Optional[Dict[str, float]] = None,
        data_format: Optional[str] = None,
    ):
        
        self.data_source = data_source
        self.skew_thresholds = skew_thresholds
        self.attribute_skew_thresholds = attribute_skew_thresholds
        self.data_format = data_format
        self.target_field = target_field

    def as_proto(
        self,
    ) -> gca_model_monitoring.ModelMonitoringObjectiveConfig.TrainingPredictionSkewDetectionConfig:
        
        skew_thresholds_mapping = {}
        attribution_score_skew_thresholds_mapping = {}
        default_skew_threshold = None
        if self.skew_thresholds is not None:
            if isinstance(self.skew_thresholds, float):
                default_skew_threshold = gca_model_monitoring.ThresholdConfig(
                    value=self.skew_thresholds
                )
            else:
                for key in self.skew_thresholds.keys():
                    skew_threshold = gca_model_monitoring.ThresholdConfig(
                        value=self.skew_thresholds[key]
                    )
                    skew_thresholds_mapping[key] = skew_threshold
        if self.attribute_skew_thresholds is not None:
            for key in self.attribute_skew_thresholds.keys():
                attribution_score_skew_threshold = gca_model_monitoring.ThresholdConfig(
                    value=self.attribute_skew_thresholds[key]
                )
                attribution_score_skew_thresholds_mapping[
                    key
                ] = attribution_score_skew_threshold
        return gca_model_monitoring.ModelMonitoringObjectiveConfig.TrainingPredictionSkewDetectionConfig(
            skew_thresholds=skew_thresholds_mapping,
            attribution_score_skew_thresholds=attribution_score_skew_thresholds_mapping,
            default_skew_threshold=default_skew_threshold,
        )


class _DriftDetectionConfig:
    def __init__(
        self,
        drift_thresholds: Dict[str, float],
        attribute_drift_thresholds: Dict[str, float],
    ):
        
        self.drift_thresholds = drift_thresholds
        self.attribute_drift_thresholds = attribute_drift_thresholds

    def as_proto(
        self,
    ) -> gca_model_monitoring.ModelMonitoringObjectiveConfig.PredictionDriftDetectionConfig:
        
        drift_thresholds_mapping = {}
        attribution_score_drift_thresholds_mapping = {}
        if self.drift_thresholds is not None:
            for key in self.drift_thresholds.keys():
                drift_threshold = gca_model_monitoring.ThresholdConfig(
                    value=self.drift_thresholds[key]
                )
                drift_thresholds_mapping[key] = drift_threshold
        if self.attribute_drift_thresholds is not None:
            for key in self.attribute_drift_thresholds.keys():
                attribution_score_drift_threshold = (
                    gca_model_monitoring.ThresholdConfig(
                        value=self.attribute_drift_thresholds[key]
                    )
                )
                attribution_score_drift_thresholds_mapping[
                    key
                ] = attribution_score_drift_threshold
        return gca_model_monitoring.ModelMonitoringObjectiveConfig.PredictionDriftDetectionConfig(
            drift_thresholds=drift_thresholds_mapping,
            attribution_score_drift_thresholds=attribution_score_drift_thresholds_mapping,
        )


class _ExplanationConfig:
    def __init__(self):
        
        self.enable_feature_attributes = False

    def as_proto(
        self,
    ) -> gca_model_monitoring.ModelMonitoringObjectiveConfig.ExplanationConfig:
        
        return gca_model_monitoring.ModelMonitoringObjectiveConfig.ExplanationConfig(
            enable_feature_attributes=self.enable_feature_attributes
        )


class _ObjectiveConfig:
    def __init__(
        self,
        skew_detection_config: Optional[
            "gca_model_monitoring._SkewDetectionConfig"
        ] = None,
        drift_detection_config: Optional[
            "gca_model_monitoring._DriftDetectionConfig"
        ] = None,
        explanation_config: Optional["gca_model_monitoring._ExplanationConfig"] = None,
    ):
        
        self.skew_detection_config = skew_detection_config
        self.drift_detection_config = drift_detection_config
        self.explanation_config = explanation_config
        
        self._config_for_bp = False

    def as_proto(self) -> gca_model_monitoring.ModelMonitoringObjectiveConfig:
        
        training_dataset = None
        if self.skew_detection_config is not None:
            training_dataset = (
                gca_model_monitoring.ModelMonitoringObjectiveConfig.TrainingDataset(
                    target_field=self.skew_detection_config.target_field
                )
            )
            if self.skew_detection_config.data_source.startswith("bq:/"):
                training_dataset.bigquery_source = gca_io.BigQuerySource(
                    input_uri=self.skew_detection_config.data_source
                )
            elif self.skew_detection_config.data_source.startswith("gs:/"):
                training_dataset.gcs_source = gca_io.GcsSource(
                    uris=[self.skew_detection_config.data_source]
                )
                if (
                    self.skew_detection_config.data_format is not None
                    and self.skew_detection_config.data_format
                    not in [TF_RECORD, CSV, JSONL]
                ):
                    raise ValueError(
                        "Unsupported value in skew detection config. `data_format` must be one of %s, %s, or %s"
                        % (TF_RECORD, CSV, JSONL)
                    )
                training_dataset.data_format = self.skew_detection_config.data_format
            else:
                training_dataset.dataset = self.skew_detection_config.data_source

        
        gapic_config = gca_model_monitoring.ModelMonitoringObjectiveConfig(
            training_dataset=training_dataset,
            training_prediction_skew_detection_config=self.skew_detection_config.as_proto()
            if self.skew_detection_config is not None
            else None,
            prediction_drift_detection_config=self.drift_detection_config.as_proto()
            if self.drift_detection_config is not None
            else None,
            explanation_config=self.explanation_config.as_proto()
            if self.explanation_config is not None
            else None,
        )
        if self._config_for_bp:
            return (
                gca_model_monitoring_v1beta1.ModelMonitoringObjectiveConfig.deserialize(
                    gca_model_monitoring.ModelMonitoringObjectiveConfig.serialize(
                        gapic_config
                    )
                )
            )
        return gapic_config


class SkewDetectionConfig(_SkewDetectionConfig):
    

    def __init__(
        self,
        data_source: Optional[str] = None,
        target_field: Optional[str] = None,
        skew_thresholds: Union[Dict[str, float], float, None] = None,
        attribute_skew_thresholds: Optional[Dict[str, float]] = None,
        data_format: Optional[str] = None,
    ):
        
        super().__init__(
            data_source=data_source,
            skew_thresholds=skew_thresholds,
            target_field=target_field,
            attribute_skew_thresholds=attribute_skew_thresholds,
            data_format=data_format,
        )


class DriftDetectionConfig(_DriftDetectionConfig):
    

    def __init__(
        self,
        drift_thresholds: Optional[Dict[str, float]] = None,
        attribute_drift_thresholds: Optional[Dict[str, float]] = None,
    ):
        
        super().__init__(drift_thresholds, attribute_drift_thresholds)


class ExplanationConfig(_ExplanationConfig):
    

    def __init__(self):
        
        super().__init__()
        self.enable_feature_attributes = True


class ObjectiveConfig(_ObjectiveConfig):
    

    def __init__(
        self,
        skew_detection_config: Optional["SkewDetectionConfig"] = None,
        drift_detection_config: Optional["DriftDetectionConfig"] = None,
        explanation_config: Optional["ExplanationConfig"] = None,
    ):
        
        super().__init__(
            skew_detection_config, drift_detection_config, explanation_config
        )
