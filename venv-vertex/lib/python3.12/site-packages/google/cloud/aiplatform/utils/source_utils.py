
















import functools
import os
import pathlib
import shutil
import subprocess
import sys
import tempfile
from typing import Optional, Sequence, Callable

from google.auth import credentials as auth_credentials
from google.cloud.aiplatform import base
from google.cloud.aiplatform import utils

_LOGGER = base.Logger(__name__)


def _get_python_executable() -> str:
    

    python_executable = sys.executable

    if not python_executable:
        raise EnvironmentError("Cannot find Python executable for packaging.")
    return python_executable


class _TrainingScriptPythonPackager:
    

    _TRAINER_FOLDER = "trainer"
    _ROOT_MODULE = "aiplatform_custom_trainer_script"
    _SETUP_PY_VERSION = "0.1"

    _SETUP_PY_TEMPLATE = 

    _SETUP_PY_SOURCE_DISTRIBUTION_CMD = "setup.py sdist --formats=gztar"

    def __init__(
        self,
        script_path: str,
        task_module_name: str = "task",
        requirements: Optional[Sequence[str]] = None,
    ):
        

        self.script_path = script_path
        self.task_module_name = task_module_name
        self.requirements = requirements or []

    @property
    def module_name(self) -> str:
        
        return f"{self._ROOT_MODULE}.{self.task_module_name}"

    def make_package(self, package_directory: str) -> str:
        
        
        package_path = pathlib.Path(package_directory)

        
        trainer_root_path = package_path / self._TRAINER_FOLDER

        
        trainer_path = trainer_root_path / self._ROOT_MODULE

        
        init_path = trainer_path / "__init__.py"

        
        setup_py_path = trainer_root_path / "setup.py"

        
        source_distribution_path = (
            trainer_root_path
            / "dist"
            / f"{self._ROOT_MODULE}-{self._SETUP_PY_VERSION}.tar.gz"
        )

        trainer_root_path.mkdir()
        trainer_path.mkdir()

        
        with init_path.open("w"):
            pass

        
        setup_py_output = self._SETUP_PY_TEMPLATE.format(
            name=self._ROOT_MODULE,
            requirements=",".join(f'"{r}"' for r in self.requirements),
            version=self._SETUP_PY_VERSION,
        )

        
        with setup_py_path.open("w") as fp:
            fp.write(setup_py_output)

        if os.path.isdir(self.script_path):
            
            shutil.rmtree(trainer_path)

            
            shutil.copytree(src=self.script_path, dst=trainer_path)
        else:
            
            script_out_path = trainer_path / f"{self.task_module_name}.py"

            
            shutil.copy(self.script_path, script_out_path)

        
        setup_cmd = [
            _get_python_executable()
        ] + self._SETUP_PY_SOURCE_DISTRIBUTION_CMD.split()

        p = subprocess.Popen(
            args=setup_cmd,
            cwd=trainer_root_path,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        output, error = p.communicate()

        
        if p.returncode != 0:
            raise RuntimeError(
                "Packaging of training script failed with code %d\n%s \n%s"
                % (p.returncode, output.decode(), error.decode())
            )

        return str(source_distribution_path)

    def package_and_copy(self, copy_method: Callable[[str], str]) -> str:
        

        with tempfile.TemporaryDirectory() as tmpdirname:
            source_distribution_path = self.make_package(tmpdirname)
            output_location = copy_method(source_distribution_path)
            _LOGGER.info("Training script copied to:\n%s." % output_location)
            return output_location

    def package_and_copy_to_gcs(
        self,
        gcs_staging_dir: str,
        project: str = None,
        credentials: Optional[auth_credentials.Credentials] = None,
    ) -> str:
        

        copy_method = functools.partial(
            utils._timestamped_copy_to_gcs,
            gcs_dir=gcs_staging_dir,
            project=project,
            credentials=credentials,
        )
        return self.package_and_copy(copy_method=copy_method)
