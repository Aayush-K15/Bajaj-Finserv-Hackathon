












from __future__ import absolute_import
from google.cloud.aiplatform.utils.enhanced_library import value_converter

from proto.marshal import Marshal
from proto.marshal.rules.struct import ValueRule
from google.protobuf.struct_pb2 import Value


class ConversionValueRule(ValueRule):
    def to_python(self, value, *, absent: bool = None):
        return super().to_python(value, absent=absent)

    def to_proto(self, value):

        
        
        if callable(getattr(value, "to_value", None)):
            return value.to_value()
        else:
            return super().to_proto(value)


def _add_methods_to_classes_in_package(pkg):
    classes = dict(
        [(name, cls) for name, cls in pkg.__dict__.items() if isinstance(cls, type)]
    )

    for class_name, cls in classes.items():
        
        setattr(cls, "to_value", value_converter.to_value)
        cls.to_value.__doc__ = value_converter.to_value.__doc__

        
        setattr(cls, "from_value", _add_from_value_to_class(cls))
        cls.from_value.__doc__ = value_converter.from_value.__doc__

        
        setattr(cls, "from_map", _add_from_map_to_class(cls))
        cls.from_map.__doc__ = value_converter.from_map.__doc__


def _add_from_value_to_class(cls):
    def _from_value(value):
        return value_converter.from_value(cls, value)

    return _from_value


def _add_from_map_to_class(cls):
    def _from_map(map_):
        return value_converter.from_map(cls, map_)

    return _from_map


marshal = Marshal(name="google.cloud.aiplatform.v1beta1")
marshal.register(Value, ConversionValueRule(marshal=marshal))
marshal = Marshal(name="google.cloud.aiplatform.v1")
marshal.register(Value, ConversionValueRule(marshal=marshal))
