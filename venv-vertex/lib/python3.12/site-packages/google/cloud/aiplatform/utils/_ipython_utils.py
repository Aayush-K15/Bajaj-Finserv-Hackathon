
















import sys
import typing
import urllib
from uuid import uuid4
from typing import Optional

from google.cloud.aiplatform import base

if typing.TYPE_CHECKING:
    from google.cloud.aiplatform.metadata import experiment_resources
    from google.cloud.aiplatform.metadata import experiment_run_resource
    from google.cloud.aiplatform import model_evaluation
    from vertexai.preview.tuning import sft

_LOGGER = base.Logger(__name__)


def _get_ipython_shell_name() -> str:
    if "IPython" in sys.modules:
        from IPython import get_ipython

        return get_ipython().__class__.__name__
    return ""


def is_ipython_available() -> bool:
    return _get_ipython_shell_name() != ""


def _get_styles() -> None:
    
    return 


def display_link(text: str, url: str, icon: Optional[str] = "open_in_new") -> None:
    
    CLOUD_UI_URL = "https://console.cloud.google.com"
    CLOUD_DOCS_URL = "https://cloud.google.com"
    if not (url.startswith(CLOUD_UI_URL) or url.startswith(CLOUD_DOCS_URL)):
        raise ValueError(
            f"Only urls starting with {CLOUD_UI_URL} or {CLOUD_DOCS_URL} are allowed."
        )

    button_id = f"view-vertex-resource-{str(uuid4())}"

    
    html = f

    
    html += f

    from IPython.display import display
    from IPython.display import HTML

    display(HTML(html))


def display_experiment_button(experiment: "experiment_resources.Experiment") -> None:
    
    if not is_ipython_available():
        return
    try:
        project = experiment._metadata_context.project
        location = experiment._metadata_context.location
        experiment_name = experiment._metadata_context.name
        if experiment_name is None or project is None or location is None:
            return
    except AttributeError:
        _LOGGER.warning("Unable to fetch experiment metadata")
        return

    uri = (
        "https://console.cloud.google.com/vertex-ai/experiments/locations/"
        + f"{location}/experiments/{experiment_name}/"
        + f"runs?project={project}"
    )
    display_link("View Experiment", uri, "science")


def display_experiment_run_button(
    experiment_run: "experiment_run_resource.ExperimentRun",
) -> None:
    
    if not is_ipython_available():
        return
    try:
        project = experiment_run.project
        location = experiment_run.location
        experiment_name = experiment_run._experiment._metadata_context.name
        run_name = experiment_run.name
        if (
            run_name is None
            or experiment_name is None
            or project is None
            or location is None
        ):
            return
    except AttributeError:
        _LOGGER.warning("Unable to fetch experiment run metadata")
        return

    uri = (
        "https://console.cloud.google.com/vertex-ai/experiments/locations/"
        + f"{location}/experiments/{experiment_name}/"
        + f"runs/{experiment_name}-{run_name}?project={project}"
    )
    display_link("View Experiment Run", uri, "science")


def display_model_evaluation_button(
    evaluation: "model_evaluation.ModelEvaluation",
) -> None:
    
    if not is_ipython_available():
        return

    try:
        resource_name = evaluation.resource_name
        fields = evaluation._parse_resource_name(resource_name)
        project = fields["project"]
        location = fields["location"]
        model_id = fields["model"]
        evaluation_id = fields["evaluation"]
    except AttributeError:
        _LOGGER.warning("Unable to parse model evaluation metadata")
        return

    if "@" in model_id:
        model_id, version_id = model_id.split("@")
    else:
        version_id = "default"

    uri = (
        "https://console.cloud.google.com/vertex-ai/models/locations/"
        + f"{location}/models/{model_id}/versions/{version_id}/evaluations/"
        + f"{evaluation_id}?project={project}"
    )
    display_link("View Model Evaluation", uri, "lightbulb")


def display_model_tuning_button(tuning_job: "sft.SupervisedTuningJob") -> None:
    
    if not is_ipython_available():
        return

    try:
        resource_name = tuning_job.resource_name
        fields = tuning_job._parse_resource_name(resource_name)
        project = fields["project"]
        location = fields["location"]
        tuning_job_id = fields["tuning_job"]
    except AttributeError:
        _LOGGER.warning("Unable to parse tuning job metadata")
        return

    uri = (
        "https://console.cloud.google.com/vertex-ai/generative/language/"
        + f"locations/{location}/tuning/tuningJob/{tuning_job_id}"
        + f"?project={project}"
    )
    display_link("View Tuning Job", uri, "tune")


def display_browse_prebuilt_metrics_button() -> None:
    
    if not is_ipython_available():
        return

    uri = (
        "https://cloud.google.com/vertex-ai/generative-ai/docs/models/metrics-templates"
    )
    display_link("Browse pre-built metrics", uri, "list")


def display_gen_ai_evaluation_results_button(
    gcs_file_path: Optional[str] = None,
) -> None:
    
    if not is_ipython_available():
        return

    uri = "https://cloud.google.com/vertex-ai/generative-ai/docs/models/view-evaluation"
    if gcs_file_path is not None:
        gcs_file_path = urllib.parse.quote(gcs_file_path)
        uri = f"https://console.cloud.google.com/storage/browser/_details/{gcs_file_path};colab_enterprise=gen_ai_evaluation"

    display_link("View evaluation results", uri, "bar_chart")
