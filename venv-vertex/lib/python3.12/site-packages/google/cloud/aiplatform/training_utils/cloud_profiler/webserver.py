


















import os

from google.cloud.aiplatform.training_utils.cloud_profiler import wsgi_types
from google.cloud.aiplatform.training_utils.cloud_profiler.plugins import base_plugin
from typing import List
from werkzeug import wrappers, Response


class WebServer:
    

    def __init__(self, plugins: List[base_plugin.BasePlugin]):
        

        self._plugins = plugins
        self._routes = {}

        
        for plugin in self._plugins:
            for route, handler in plugin.get_routes().items():
                if not route.startswith("/"):
                    raise ValueError(
                        'Routes should start with a "/", '
                        "invalid route for plugin %s, route %s"
                        % (plugin.PLUGIN_NAME, route)
                    )

                app_route = os.path.join("/", plugin.PLUGIN_NAME)

                app_route += route
                self._routes[app_route] = handler

    def dispatch_request(
        self, environ: wsgi_types.Environment, start_response: wsgi_types.StartResponse
    ) -> Response:
        
        
        request = wrappers.Request(environ)

        if request.path in self._routes:
            return self._routes[request.path](environ, start_response)

        response = wrappers.Response("Not Found", status=404)
        return response(environ, start_response)

    def wsgi_app(
        self, environ: wsgi_types.Environment, start_response: wsgi_types.StartResponse
    ) -> Response:
        
        response = self.dispatch_request(environ, start_response)
        return response

    def __call__(self, environ, start_response):
        
        return self.wsgi_app(environ, start_response)
