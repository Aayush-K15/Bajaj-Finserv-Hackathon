
















import copy
from typing import Optional, Dict

from google.cloud.aiplatform.metadata.schema import base_context


class Experiment(base_context.BaseContextSchema):
    

    schema_title = "system.Experiment"

    def __init__(
        self,
        *,
        context_id: Optional[str] = None,
        display_name: Optional[str] = None,
        schema_version: Optional[str] = None,
        metadata: Optional[Dict] = None,
        description: Optional[str] = None,
    ):
        
        extended_metadata = copy.deepcopy(metadata) if metadata else {}
        super(Experiment, self).__init__(
            context_id=context_id,
            display_name=display_name,
            schema_version=schema_version,
            description=description,
            metadata=extended_metadata,
        )


class ExperimentRun(base_context.BaseContextSchema):
    

    schema_title = "system.ExperimentRun"

    def __init__(
        self,
        *,
        experiment_id: Optional[str] = None,
        context_id: Optional[str] = None,
        display_name: Optional[str] = None,
        schema_version: Optional[str] = None,
        metadata: Optional[Dict] = None,
        description: Optional[str] = None,
    ):
        
        extended_metadata = copy.deepcopy(metadata) if metadata else {}
        extended_metadata["experiment_id"] = experiment_id
        super(ExperimentRun, self).__init__(
            context_id=context_id,
            display_name=display_name,
            schema_version=schema_version,
            description=description,
            metadata=extended_metadata,
        )


class Pipeline(base_context.BaseContextSchema):
    

    schema_title = "system.Pipeline"

    def __init__(
        self,
        *,
        context_id: Optional[str] = None,
        display_name: Optional[str] = None,
        schema_version: Optional[str] = None,
        metadata: Optional[Dict] = None,
        description: Optional[str] = None,
    ):
        
        extended_metadata = copy.deepcopy(metadata) if metadata else {}
        super(Pipeline, self).__init__(
            context_id=context_id,
            display_name=display_name,
            schema_version=schema_version,
            description=description,
            metadata=extended_metadata,
        )


class PipelineRun(base_context.BaseContextSchema):
    

    schema_title = "system.PipelineRun"

    def __init__(
        self,
        *,
        pipeline_id: Optional[str] = None,
        context_id: Optional[str] = None,
        display_name: Optional[str] = None,
        schema_version: Optional[str] = None,
        metadata: Optional[Dict] = None,
        description: Optional[str] = None,
    ):
        
        extended_metadata = copy.deepcopy(metadata) if metadata else {}
        extended_metadata["pipeline_id"] = pipeline_id
        super(PipelineRun, self).__init__(
            context_id=context_id,
            display_name=display_name,
            schema_version=schema_version,
            description=description,
            metadata=extended_metadata,
        )
