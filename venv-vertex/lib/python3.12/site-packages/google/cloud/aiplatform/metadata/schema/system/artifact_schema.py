
















import copy
from typing import Optional, Dict

from google.cloud.aiplatform.compat.types import artifact as gca_artifact
from google.cloud.aiplatform.metadata.schema import base_artifact


class Model(base_artifact.BaseArtifactSchema):
    

    schema_title = "system.Model"

    def __init__(
        self,
        *,
        uri: Optional[str] = None,
        artifact_id: Optional[str] = None,
        display_name: Optional[str] = None,
        schema_version: Optional[str] = None,
        description: Optional[str] = None,
        metadata: Optional[Dict] = None,
        state: Optional[gca_artifact.Artifact.State] = gca_artifact.Artifact.State.LIVE,
    ):
        
        extended_metadata = copy.deepcopy(metadata) if metadata else {}
        super(Model, self).__init__(
            uri=uri,
            artifact_id=artifact_id,
            display_name=display_name,
            schema_version=schema_version,
            description=description,
            metadata=extended_metadata,
            state=state,
        )


class Artifact(base_artifact.BaseArtifactSchema):
    

    schema_title = "system.Artifact"

    def __init__(
        self,
        *,
        uri: Optional[str] = None,
        artifact_id: Optional[str] = None,
        display_name: Optional[str] = None,
        schema_version: Optional[str] = None,
        description: Optional[str] = None,
        metadata: Optional[Dict] = None,
        state: Optional[gca_artifact.Artifact.State] = gca_artifact.Artifact.State.LIVE,
    ):
        
        extended_metadata = copy.deepcopy(metadata) if metadata else {}
        super(Artifact, self).__init__(
            uri=uri,
            artifact_id=artifact_id,
            display_name=display_name,
            schema_version=schema_version,
            description=description,
            metadata=extended_metadata,
            state=state,
        )


class Dataset(base_artifact.BaseArtifactSchema):
    

    schema_title = "system.Dataset"

    def __init__(
        self,
        *,
        uri: Optional[str] = None,
        artifact_id: Optional[str] = None,
        display_name: Optional[str] = None,
        schema_version: Optional[str] = None,
        description: Optional[str] = None,
        metadata: Optional[Dict] = None,
        state: Optional[gca_artifact.Artifact.State] = gca_artifact.Artifact.State.LIVE,
    ):
        
        extended_metadata = copy.deepcopy(metadata) if metadata else {}
        super(Dataset, self).__init__(
            uri=uri,
            artifact_id=artifact_id,
            display_name=display_name,
            schema_version=schema_version,
            description=description,
            metadata=extended_metadata,
            state=state,
        )


class Metrics(base_artifact.BaseArtifactSchema):
    

    schema_title = "system.Metrics"

    def __init__(
        self,
        *,
        accuracy: Optional[float] = None,
        precision: Optional[float] = None,
        recall: Optional[float] = None,
        f1score: Optional[float] = None,
        mean_absolute_error: Optional[float] = None,
        mean_squared_error: Optional[float] = None,
        uri: Optional[str] = None,
        artifact_id: Optional[str] = None,
        display_name: Optional[str] = None,
        schema_version: Optional[str] = None,
        description: Optional[str] = None,
        metadata: Optional[Dict] = None,
        state: Optional[gca_artifact.Artifact.State] = gca_artifact.Artifact.State.LIVE,
    ):
        
        extended_metadata = copy.deepcopy(metadata) if metadata else {}
        if accuracy:
            extended_metadata["accuracy"] = accuracy
        if precision:
            extended_metadata["precision"] = precision
        if recall:
            extended_metadata["recall"] = recall
        if f1score:
            extended_metadata["f1score"] = f1score
        if mean_absolute_error:
            extended_metadata["mean_absolute_error"] = mean_absolute_error
        if mean_squared_error:
            extended_metadata["mean_squared_error"] = mean_squared_error

        super(Metrics, self).__init__(
            uri=uri,
            artifact_id=artifact_id,
            display_name=display_name,
            schema_version=schema_version,
            description=description,
            metadata=extended_metadata,
            state=state,
        )
