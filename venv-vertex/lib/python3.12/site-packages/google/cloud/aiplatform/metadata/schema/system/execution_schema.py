
















import copy
from typing import Optional, Dict

from google.cloud.aiplatform.compat.types import execution as gca_execution
from google.cloud.aiplatform.metadata.schema import base_execution


class ContainerExecution(base_execution.BaseExecutionSchema):
    

    schema_title = "system.ContainerExecution"

    def __init__(
        self,
        *,
        state: Optional[
            gca_execution.Execution.State
        ] = gca_execution.Execution.State.RUNNING,
        execution_id: Optional[str] = None,
        display_name: Optional[str] = None,
        schema_version: Optional[str] = None,
        metadata: Optional[Dict] = None,
        description: Optional[str] = None,
    ):
        
        extended_metadata = copy.deepcopy(metadata) if metadata else {}
        super(ContainerExecution, self).__init__(
            execution_id=execution_id,
            state=state,
            display_name=display_name,
            schema_version=schema_version,
            description=description,
            metadata=extended_metadata,
        )


class CustomJobExecution(base_execution.BaseExecutionSchema):
    

    schema_title = "system.CustomJobExecution"

    def __init__(
        self,
        *,
        state: Optional[
            gca_execution.Execution.State
        ] = gca_execution.Execution.State.RUNNING,
        execution_id: Optional[str] = None,
        display_name: Optional[str] = None,
        schema_version: Optional[str] = None,
        metadata: Optional[Dict] = None,
        description: Optional[str] = None,
    ):
        
        extended_metadata = copy.deepcopy(metadata) if metadata else {}
        super(CustomJobExecution, self).__init__(
            execution_id=execution_id,
            state=state,
            display_name=display_name,
            schema_version=schema_version,
            description=description,
            metadata=extended_metadata,
        )


class Run(base_execution.BaseExecutionSchema):
    

    schema_title = "system.Run"

    def __init__(
        self,
        *,
        state: Optional[
            gca_execution.Execution.State
        ] = gca_execution.Execution.State.RUNNING,
        execution_id: Optional[str] = None,
        display_name: Optional[str] = None,
        schema_version: Optional[str] = None,
        metadata: Optional[Dict] = None,
        description: Optional[str] = None,
    ):
        
        extended_metadata = copy.deepcopy(metadata) if metadata else {}
        super(Run, self).__init__(
            execution_id=execution_id,
            state=state,
            display_name=display_name,
            schema_version=schema_version,
            description=description,
            metadata=extended_metadata,
        )
