
















import abc

from typing import Any, Optional, Dict, List

from google.auth import credentials as auth_credentials
from google.cloud.aiplatform.compat.types import artifact as gca_artifact
from google.cloud.aiplatform.metadata import artifact
from google.cloud.aiplatform.constants import base as base_constants
from google.cloud.aiplatform.metadata import constants


class BaseArtifactSchema(artifact.Artifact):
    

    @property
    @classmethod
    @abc.abstractmethod
    def schema_title(cls) -> str:
        
        pass

    def __init__(
        self,
        *,
        artifact_id: Optional[str] = None,
        uri: Optional[str] = None,
        display_name: Optional[str] = None,
        schema_version: Optional[str] = None,
        description: Optional[str] = None,
        metadata: Optional[Dict] = None,
        state: Optional[gca_artifact.Artifact.State] = gca_artifact.Artifact.State.LIVE,
    ):

        
        
        self._exception = None
        
        
        
        self.artifact_id = artifact_id

        
        self._gca_resource = gca_artifact.Artifact()
        self._gca_resource.uri = uri
        self._gca_resource.display_name = display_name
        self._gca_resource.schema_version = (
            schema_version or constants._DEFAULT_SCHEMA_VERSION
        )
        self._gca_resource.description = description

        
        metadata = metadata if metadata else {}
        self._nested_update_metadata(self._gca_resource, metadata)
        self._gca_resource.state = state

    
    def _init_with_resource_name(
        self,
        *,
        artifact_name: str,
        metadata_store_id: str = "default",
        project: Optional[str] = None,
        location: Optional[str] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
    ):

        
        
        
        if not base_constants.USER_AGENT_SDK_COMMAND:
            base_constants.USER_AGENT_SDK_COMMAND = "aiplatform.metadata.schema.base_artifact.BaseArtifactSchema._init_with_resource_name"

        super(BaseArtifactSchema, self).__init__(
            artifact_name=artifact_name,
            metadata_store_id=metadata_store_id,
            project=project,
            location=location,
            credentials=credentials,
        )

    def create(
        self,
        *,
        metadata_store_id: Optional[str] = "default",
        project: Optional[str] = None,
        location: Optional[str] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
    ) -> "artifact.Artifact":
        
        
        base_constants.USER_AGENT_SDK_COMMAND = (
            "aiplatform.metadata.schema.base_artifact.BaseArtifactSchema.create"
        )

        
        metadata = None
        if self._gca_resource.metadata:
            metadata = self.metadata

        new_artifact_instance = artifact.Artifact.create(
            resource_id=self.artifact_id,
            schema_title=self.schema_title,
            uri=self.uri,
            display_name=self.display_name,
            schema_version=self.schema_version,
            description=self.description,
            metadata=metadata,
            state=self.state,
            metadata_store_id=metadata_store_id,
            project=project,
            location=location,
            credentials=credentials,
        )

        
        self._init_with_resource_name(artifact_name=new_artifact_instance.resource_name)
        return self

    @classmethod
    def list(
        cls,
        filter: Optional[str] = None,  
        metadata_store_id: str = "default",
        project: Optional[str] = None,
        location: Optional[str] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
        order_by: Optional[str] = None,
    ) -> List["BaseArtifactSchema"]:
        
        schema_filter = f'schema_title="{cls.schema_title}"'
        if filter:
            filter = f"{filter} AND {schema_filter}"
        else:
            filter = schema_filter

        return super().list(
            filter=filter,
            metadata_store_id=metadata_store_id,
            project=project,
            location=location,
            credentials=credentials,
        )

    def sync_resource(self):
        
        if self._gca_resource.name:
            super().sync_resource()
        else:
            raise RuntimeError(
                f"{self.__class__.__name__} resource has not been created."
            )

    def update(
        self,
        metadata: Optional[Dict[str, Any]] = None,
        description: Optional[str] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
    ):
        
        if self._gca_resource.name:
            super().update(
                metadata=metadata,
                description=description,
                credentials=credentials,
            )
        else:
            raise RuntimeError(
                f"{self.__class__.__name__} resource has not been created."
            )

    def __repr__(self) -> str:
        if self._gca_resource.name:
            return super().__repr__()
        else:
            return f"{object.__repr__(self)}\nschema_title: {self.schema_title}"
