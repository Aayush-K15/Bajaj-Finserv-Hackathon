













import re
from typing import Optional
import warnings

from google.cloud.aiplatform import initializer
from google.cloud.aiplatform.constants import prediction
from packaging import version


def get_prebuilt_prediction_container_uri(
    framework: str,
    framework_version: str,
    region: Optional[str] = None,
    accelerator: str = "cpu",
) -> str:
    
    URI_MAP = prediction._SERVING_CONTAINER_URI_MAP
    DOCS_URI_MESSAGE = (
        f"See {prediction._SERVING_CONTAINER_DOCUMENTATION_URL} "
        "for complete list of supported containers"
    )

    
    region = region or initializer.global_config.location
    region = region.split("-", 1)[0]
    framework = framework.lower()

    if not URI_MAP.get(region):
        raise ValueError(
            f"Unsupported container region `{region}`, supported regions are "
            f"{', '.join(URI_MAP.keys())}. "
            f"{DOCS_URI_MESSAGE}"
        )

    if not URI_MAP[region].get(framework):
        raise ValueError(
            f"No containers found for framework `{framework}`. Supported frameworks are "
            f"{', '.join(URI_MAP[region].keys())} {DOCS_URI_MESSAGE}"
        )

    if not URI_MAP[region][framework].get(accelerator):
        raise ValueError(
            f"{framework} containers do not support `{accelerator}` accelerator. Supported accelerators "
            f"are {', '.join(URI_MAP[region][framework].keys())}. {DOCS_URI_MESSAGE}"
        )

    final_uri = URI_MAP[region][framework][accelerator].get(framework_version)

    if not final_uri:
        raise ValueError(
            f"No serving container for `{framework}` version `{framework_version}` "
            f"with accelerator `{accelerator}` found. Supported versions "
            f"include {', '.join(URI_MAP[region][framework][accelerator].keys())}. {DOCS_URI_MESSAGE}"
        )

    return final_uri


def is_prebuilt_prediction_container_uri(image_uri: str) -> bool:
    
    return re.fullmatch(prediction.CONTAINER_URI_REGEX, image_uri) is not None



def _get_closest_match_prebuilt_container_uri(
    framework: str,
    framework_version: str,
    region: Optional[str] = None,
    accelerator: str = "cpu",
) -> str:
    
    URI_MAP = prediction._SERVING_CONTAINER_URI_MAP
    DOCS_URI_MESSAGE = (
        f"See {prediction._SERVING_CONTAINER_DOCUMENTATION_URL} "
        "for complete list of supported containers"
    )

    
    region = region or initializer.global_config.location
    region = region.split("-", 1)[0]
    framework = framework.lower()

    if not URI_MAP.get(region):
        raise ValueError(
            f"Unsupported container region `{region}`, supported regions are "
            f"{', '.join(URI_MAP.keys())}. "
            f"{DOCS_URI_MESSAGE}"
        )

    if not URI_MAP[region].get(framework):
        raise ValueError(
            f"No containers found for framework `{framework}`. Supported frameworks are "
            f"{', '.join(URI_MAP[region].keys())} {DOCS_URI_MESSAGE}"
        )

    if not URI_MAP[region][framework].get(accelerator):
        raise ValueError(
            f"{framework} containers do not support `{accelerator}` accelerator. Supported accelerators "
            f"are {', '.join(URI_MAP[region][framework].keys())}. {DOCS_URI_MESSAGE}"
        )

    framework_version = version.Version(framework_version)
    available_version_list = [
        version.Version(available_version)
        for available_version in URI_MAP[region][framework][accelerator].keys()
    ]
    try:
        closest_version = min(
            [
                available_version
                for available_version in available_version_list
                if available_version >= framework_version
                
                and available_version._version.release[0]
                == framework_version._version.release[0]
            ]
        )
    except ValueError:
        raise ValueError(
            f"You are using `{framework}` version `{framework_version}`. "
            f"Vertex pre-built containers support up to `{framework}` version "
            f"`{max(available_version_list)}` and don't assume forward compatibility. "
            f"Please build your own custom container. {DOCS_URI_MESSAGE}"
        ) from None

    if closest_version != framework_version:
        warnings.warn(
            f"No exact match for `{framework}` version `{framework_version}`. "
            f"Pre-built container for `{framework}` version `{closest_version}` is used. "
            f"{DOCS_URI_MESSAGE}"
        )

    final_uri = URI_MAP[region][framework][accelerator].get(str(closest_version))

    return final_uri
