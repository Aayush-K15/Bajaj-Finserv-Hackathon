














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform.v1.schema.trainingjob.definition_v1.types import (
    export_evaluated_data_items_config as gcastd_export_evaluated_data_items_config,
)


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1.schema.trainingjob.definition",
    manifest={
        "AutoMlTables",
        "AutoMlTablesInputs",
        "AutoMlTablesMetadata",
    },
)


class AutoMlTables(proto.Message):
    r

    inputs: "AutoMlTablesInputs" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="AutoMlTablesInputs",
    )
    metadata: "AutoMlTablesMetadata" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="AutoMlTablesMetadata",
    )


class AutoMlTablesInputs(proto.Message):
    r

    class Transformation(proto.Message):
        r

        class AutoTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )

        class NumericTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )
            invalid_values_allowed: bool = proto.Field(
                proto.BOOL,
                number=2,
            )

        class CategoricalTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )

        class TimestampTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )
            time_format: str = proto.Field(
                proto.STRING,
                number=2,
            )
            invalid_values_allowed: bool = proto.Field(
                proto.BOOL,
                number=3,
            )

        class TextTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )

        class NumericArrayTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )
            invalid_values_allowed: bool = proto.Field(
                proto.BOOL,
                number=2,
            )

        class CategoricalArrayTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )

        class TextArrayTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )

        auto: "AutoMlTablesInputs.Transformation.AutoTransformation" = proto.Field(
            proto.MESSAGE,
            number=1,
            oneof="transformation_detail",
            message="AutoMlTablesInputs.Transformation.AutoTransformation",
        )
        numeric: "AutoMlTablesInputs.Transformation.NumericTransformation" = (
            proto.Field(
                proto.MESSAGE,
                number=2,
                oneof="transformation_detail",
                message="AutoMlTablesInputs.Transformation.NumericTransformation",
            )
        )
        categorical: "AutoMlTablesInputs.Transformation.CategoricalTransformation" = (
            proto.Field(
                proto.MESSAGE,
                number=3,
                oneof="transformation_detail",
                message="AutoMlTablesInputs.Transformation.CategoricalTransformation",
            )
        )
        timestamp: "AutoMlTablesInputs.Transformation.TimestampTransformation" = (
            proto.Field(
                proto.MESSAGE,
                number=4,
                oneof="transformation_detail",
                message="AutoMlTablesInputs.Transformation.TimestampTransformation",
            )
        )
        text: "AutoMlTablesInputs.Transformation.TextTransformation" = proto.Field(
            proto.MESSAGE,
            number=5,
            oneof="transformation_detail",
            message="AutoMlTablesInputs.Transformation.TextTransformation",
        )
        repeated_numeric: "AutoMlTablesInputs.Transformation.NumericArrayTransformation" = proto.Field(
            proto.MESSAGE,
            number=6,
            oneof="transformation_detail",
            message="AutoMlTablesInputs.Transformation.NumericArrayTransformation",
        )
        repeated_categorical: "AutoMlTablesInputs.Transformation.CategoricalArrayTransformation" = proto.Field(
            proto.MESSAGE,
            number=7,
            oneof="transformation_detail",
            message="AutoMlTablesInputs.Transformation.CategoricalArrayTransformation",
        )
        repeated_text: "AutoMlTablesInputs.Transformation.TextArrayTransformation" = (
            proto.Field(
                proto.MESSAGE,
                number=8,
                oneof="transformation_detail",
                message="AutoMlTablesInputs.Transformation.TextArrayTransformation",
            )
        )

    optimization_objective_recall_value: float = proto.Field(
        proto.FLOAT,
        number=5,
        oneof="additional_optimization_objective_config",
    )
    optimization_objective_precision_value: float = proto.Field(
        proto.FLOAT,
        number=6,
        oneof="additional_optimization_objective_config",
    )
    prediction_type: str = proto.Field(
        proto.STRING,
        number=1,
    )
    target_column: str = proto.Field(
        proto.STRING,
        number=2,
    )
    transformations: MutableSequence[Transformation] = proto.RepeatedField(
        proto.MESSAGE,
        number=3,
        message=Transformation,
    )
    optimization_objective: str = proto.Field(
        proto.STRING,
        number=4,
    )
    train_budget_milli_node_hours: int = proto.Field(
        proto.INT64,
        number=7,
    )
    disable_early_stopping: bool = proto.Field(
        proto.BOOL,
        number=8,
    )
    weight_column_name: str = proto.Field(
        proto.STRING,
        number=9,
    )
    export_evaluated_data_items_config: gcastd_export_evaluated_data_items_config.ExportEvaluatedDataItemsConfig = proto.Field(
        proto.MESSAGE,
        number=10,
        message=gcastd_export_evaluated_data_items_config.ExportEvaluatedDataItemsConfig,
    )
    additional_experiments: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=11,
    )


class AutoMlTablesMetadata(proto.Message):
    r

    train_cost_milli_node_hours: int = proto.Field(
        proto.INT64,
        number=1,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
