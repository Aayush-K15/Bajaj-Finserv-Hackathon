














import copy

from typing import Optional, TypeVar, Mapping, Any
from google.cloud.aiplatform.vizier.client_abc import TrialInterface

from google.auth import credentials as auth_credentials
from google.cloud.aiplatform import base
from google.cloud.aiplatform import utils
from google.cloud.aiplatform.vizier import study
from google.cloud.aiplatform.vizier import pyvizier as vz

_T = TypeVar("_T")
_LOGGER = base.Logger(__name__)


class Trial(base.VertexAiResourceNounWithFutureManager, TrialInterface):
    

    client_class = utils.VizierClientWithOverride

    _resource_noun = "trial"
    _getter_method = "get_trial"
    _list_method = "list_trials"
    _delete_method = "delete_trial"
    _parse_resource_name_method = "parse_trial_path"
    _format_resource_name_method = "trial_path"

    def __init__(
        self,
        trial_name: str,
        study_id: Optional[str] = None,
        project: Optional[str] = None,
        location: Optional[str] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
    ):
        

        base.VertexAiResourceNounWithFutureManager.__init__(
            self,
            project=project,
            location=location,
            credentials=credentials,
            resource_name=trial_name,
        )
        self._gca_resource = self._get_gca_resource(
            resource_name=trial_name,
            parent_resource_name_fields={
                study.Study._resource_noun: study_id,
            }
            if study_id
            else study_id,
        )

    @property
    def uid(self) -> int:
        
        trial_path_components = self._parse_resource_name(self.resource_name)
        return int(trial_path_components["trial"])

    @property
    def parameters(self) -> Mapping[str, Any]:
        
        trial = self.api_client.get_trial(name=self.resource_name)
        return vz.TrialConverter.from_proto(trial).parameters

    @property
    def status(self) -> vz.TrialStatus:
        
        trial = self.api_client.get_trial(name=self.resource_name)
        return vz.TrialConverter.from_proto(trial).status

    def delete(self) -> None:
        
        self.api_client.delete_trial(name=self.resource_name)

    def complete(
        self,
        measurement: Optional[vz.Measurement] = None,
        *,
        infeasible_reason: Optional[str] = None
    ) -> Optional[vz.Measurement]:
        
        complete_trial_request = {"name": self.resource_name}
        if infeasible_reason is not None:
            complete_trial_request["infeasible_reason"] = infeasible_reason
            complete_trial_request["trial_infeasible"] = True
        if measurement is not None:
            complete_trial_request[
                "final_measurement"
            ] = vz.MeasurementConverter.to_proto(measurement)
        trial = self.api_client.complete_trial(request=complete_trial_request)
        return (
            vz.MeasurementConverter.from_proto(trial.final_measurement)
            if trial.final_measurement
            else None
        )

    def should_stop(self) -> bool:
        
        check_trial_early_stopping_state_request = {"trial_name": self.resource_name}
        should_stop_lro = self.api_client.check_trial_early_stopping_state(
            request=check_trial_early_stopping_state_request
        )
        _LOGGER.log_action_started_against_resource_with_lro(
            "ShouldStop", "trial", self.__class__, should_stop_lro
        )
        should_stop_lro.result()
        _LOGGER.log_action_completed_against_resource("trial", "should_stop", self)
        return should_stop_lro.result().should_stop

    def add_measurement(self, measurement: vz.Measurement) -> None:
        
        add_trial_measurement_request = {
            "trial_name": self.resource_name,
        }
        add_trial_measurement_request["measurement"] = vz.MeasurementConverter.to_proto(
            measurement
        )
        self.api_client.add_trial_measurement(request=add_trial_measurement_request)

    def materialize(self, *, include_all_measurements: bool = True) -> vz.Trial:
        
        trial = self.api_client.get_trial(name=self.resource_name)
        return copy.deepcopy(vz.TrialConverter.from_proto(trial))
