
















from __future__ import annotations

from typing import Optional, Collection, Type, TypeVar, Mapping, Any
import abc

from google.cloud.aiplatform.vizier import pyvizier as vz

_T = TypeVar("_T")


class ResourceNotFoundError(LookupError):
    

    pass


class TrialInterface(abc.ABC):
    

    @property
    @abc.abstractmethod
    def uid(self) -> int:
        

    @property
    @abc.abstractmethod
    def parameters(self) -> Mapping[str, Any]:
        

    @property
    @abc.abstractmethod
    def status(self) -> vz.TrialStatus:
        

    @abc.abstractmethod
    def delete(self) -> None:
        

    @abc.abstractmethod
    def complete(
        self,
        measurement: Optional[vz.Measurement] = None,
        *,
        infeasible_reason: Optional[str] = None,
    ) -> Optional[vz.Measurement]:
        

    @abc.abstractmethod
    def should_stop(self) -> bool:
        

    @abc.abstractmethod
    def add_measurement(self, measurement: vz.Measurement) -> None:
        

    @abc.abstractmethod
    def materialize(self, *, include_all_measurements: bool = True) -> vz.Trial:
        


class StudyInterface(abc.ABC):
    

    @abc.abstractmethod
    def create_or_load(
        self, display_name: str, problem: vz.ProblemStatement
    ) -> StudyInterface:
        

    @abc.abstractmethod
    def suggest(
        self, *, count: Optional[int] = None, worker: str = ""
    ) -> Collection[TrialInterface]:
        

    @abc.abstractmethod
    def delete(self) -> None:
        

    @abc.abstractmethod
    def trials(
        self, trial_filter: Optional[vz.TrialFilter] = None
    ) -> Collection[TrialInterface]:
        

    @abc.abstractmethod
    def get_trial(self, uid: int) -> TrialInterface:
        

    @abc.abstractmethod
    def optimal_trials(self) -> Collection[TrialInterface]:
        

    @abc.abstractmethod
    def materialize_study_config(self) -> vz.StudyConfig:
        Fetches an existing study from the Vizier service.

        Args:
          uid: Unique identifier of the study.

        Returns:
          Study.

        Raises:
          ResourceNotFoundError: If study does not exist.
        """
