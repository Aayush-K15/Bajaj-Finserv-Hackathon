
















import google.auth
import google.auth.transport.requests
import logging
import ray
import re
from immutabledict import immutabledict

from google.cloud.aiplatform import initializer
from google.cloud.aiplatform.utils import resource_manager_utils

SUPPORTED_RAY_VERSIONS = immutabledict(
    {"2.9": "2.9.3", "2.33": "2.33.0", "2.42": "2.42.0", "2.47": "2.47.1"}
)
SUPPORTED_RAY_VERSIONS_FROM_PYTHON_VERSIONS = immutabledict(
    {
        "3.10": ("2.9", "2.33", "2.42"),
        "3.11": ("2.42", "2.47"),
    }
)
_V2_4_WARNING_MESSAGE = (
    "After google-cloud-aiplatform>1.53.0, using Ray version = 2.4 will result in "
    "an error. Please use Ray version = 2.33.0, 2.42.0 or 2.47.1 (default) instead."
)
_V2_9_WARNING_MESSAGE = (
    "In March 2025, using Ray version = 2.9 will result in an error. "
    "Please use Ray version = 2.33.0, 2.42.0 or 2.47.1 (default) instead."
)



_AVAILABLE_REGIONS = ["us", "europe", "asia"]

_DEFAULT_REGION = "us"

_PERSISTENT_RESOURCE_NAME_PATTERN = "projects/{}/locations/{}/persistentResources/{}"
_VALID_RESOURCE_NAME_REGEX = "[a-z][a-zA-Z0-9._-]{0,127}"
_DASHBOARD_URI_SUFFIX = "aiplatform-training.googleusercontent.com"


def valid_resource_name(resource_name):
    
    resource_name_split = resource_name.split("/")
    if not (
        len(resource_name_split) == 6
        and resource_name_split[0] == "projects"
        and resource_name_split[2] == "locations"
        and resource_name_split[4] == "persistentResources"
    ):
        raise ValueError(
            "[Ray on Vertex AI]: Address must be in the following "
            "format: vertex_ray://projects/<project_num>/locations/<region>/persistentResources/<pr_id> "
            "or vertex_ray://<pr_id>."
        )


def maybe_reconstruct_resource_name(address) -> str:
    
    if re.match("^{}$".format(_VALID_RESOURCE_NAME_REGEX), address):
        
        logging.info(
            "[Ray on Vertex AI]: Cluster name was given as address, reconstructing full resource name"
        )
        return _PERSISTENT_RESOURCE_NAME_PATTERN.format(
            resource_manager_utils.get_project_number(
                initializer.global_config.project
            ),
            initializer.global_config.location,
            address,
        )

    return address


def get_local_ray_version():
    ray_version = ray.__version__.split(".")
    if len(ray_version) == 3:
        ray_version = ray_version[:2]
    return ".".join(ray_version)


def get_image_uri(ray_version, python_version, enable_cuda):
    
    if ray_version not in SUPPORTED_RAY_VERSIONS:
        raise ValueError(
            "[Ray on Vertex AI]: The supported Ray versions are %s (%s) and %s (%s)."
            % (
                list(SUPPORTED_RAY_VERSIONS.keys())[0],
                list(SUPPORTED_RAY_VERSIONS.values())[0],
                list(SUPPORTED_RAY_VERSIONS.keys())[1],
                list(SUPPORTED_RAY_VERSIONS.values())[1],
            )
        )
    if python_version is None:
        for pv, ray_versions in SUPPORTED_RAY_VERSIONS_FROM_PYTHON_VERSIONS.items():
            if ray_version in ray_versions:
                python_version = pv
                break
    if python_version not in SUPPORTED_RAY_VERSIONS_FROM_PYTHON_VERSIONS:
        raise ValueError(
            "[Ray on Vertex AI]: The supported Python versions are 3.10 or 3.11."
        )

    if ray_version not in SUPPORTED_RAY_VERSIONS_FROM_PYTHON_VERSIONS[python_version]:
        raise ValueError(
            "[Ray on Vertex AI]: The supported Ray version(s) for Python version %s: %s."
            % (
                python_version,
                SUPPORTED_RAY_VERSIONS_FROM_PYTHON_VERSIONS[python_version],
            )
        )

    location = initializer.global_config.location
    region = location.split("-")[0]
    if region not in _AVAILABLE_REGIONS:
        region = _DEFAULT_REGION
    ray_version = ray_version.replace(".", "-")
    python_version = python_version.replace(".", "")
    if enable_cuda:
        return f"{region}-docker.pkg.dev/vertex-ai/training/ray-gpu.{ray_version}.py{python_version}:latest"
    else:
        return f"{region}-docker.pkg.dev/vertex-ai/training/ray-cpu.{ray_version}.py{python_version}:latest"


def get_versions_from_image_uri(image_uri):
    
    logging.info(f"[Ray on Vertex AI]: Getting versions from image uri: {image_uri}")
    image_label = image_uri.split("/")[-1].split(":")[0]
    py_version = image_label[-3] + "." + image_label[-2:]
    ray_version = image_label.split(".")[1].replace("-", ".")
    if (
        py_version in SUPPORTED_RAY_VERSIONS_FROM_PYTHON_VERSIONS
        and ray_version in SUPPORTED_RAY_VERSIONS_FROM_PYTHON_VERSIONS[py_version]
    ):
        return py_version, ray_version
    else:
        
        return None, None


def valid_dashboard_address(address):
    
    return address.endswith(_DASHBOARD_URI_SUFFIX)


def get_bearer_token():
    
    creds, _ = google.auth.default(
        scopes=["https://www.googleapis.com/auth/cloud-platform"]
    )

    
    
    auth_req = google.auth.transport.requests.Request()
    creds.refresh(auth_req)
    return creds.token
