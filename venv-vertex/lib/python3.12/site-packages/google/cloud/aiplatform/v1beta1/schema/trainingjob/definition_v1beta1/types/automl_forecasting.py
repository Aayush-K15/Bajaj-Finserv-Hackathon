
















import proto  


from google.cloud.aiplatform.v1beta1.schema.trainingjob.definition_v1beta1.types import (
    export_evaluated_data_items_config as gcastd_export_evaluated_data_items_config,
)


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1.schema.trainingjob.definition",
    manifest={
        "AutoMlForecasting",
        "AutoMlForecastingInputs",
        "AutoMlForecastingMetadata",
    },
)


class AutoMlForecasting(proto.Message):
    r

    inputs = proto.Field(
        proto.MESSAGE,
        number=1,
        message="AutoMlForecastingInputs",
    )

    metadata = proto.Field(
        proto.MESSAGE,
        number=2,
        message="AutoMlForecastingMetadata",
    )


class AutoMlForecastingInputs(proto.Message):
    r

    class Transformation(proto.Message):
        r

        class AutoTransformation(proto.Message):
            r

            column_name = proto.Field(proto.STRING, number=1)

        class NumericTransformation(proto.Message):
            r

            column_name = proto.Field(proto.STRING, number=1)

            invalid_values_allowed = proto.Field(proto.BOOL, number=2)

        class CategoricalTransformation(proto.Message):
            r

            column_name = proto.Field(proto.STRING, number=1)

        class TimestampTransformation(proto.Message):
            r

            column_name = proto.Field(proto.STRING, number=1)

            time_format = proto.Field(proto.STRING, number=2)

            invalid_values_allowed = proto.Field(proto.BOOL, number=3)

        class TextTransformation(proto.Message):
            r

            column_name = proto.Field(proto.STRING, number=1)

        class NumericArrayTransformation(proto.Message):
            r

            column_name = proto.Field(proto.STRING, number=1)

            invalid_values_allowed = proto.Field(proto.BOOL, number=2)

        class CategoricalArrayTransformation(proto.Message):
            r

            column_name = proto.Field(proto.STRING, number=1)

        class TextArrayTransformation(proto.Message):
            r

            column_name = proto.Field(proto.STRING, number=1)

        auto = proto.Field(
            proto.MESSAGE,
            number=1,
            oneof="transformation_detail",
            message="AutoMlForecastingInputs.Transformation.AutoTransformation",
        )

        numeric = proto.Field(
            proto.MESSAGE,
            number=2,
            oneof="transformation_detail",
            message="AutoMlForecastingInputs.Transformation.NumericTransformation",
        )

        categorical = proto.Field(
            proto.MESSAGE,
            number=3,
            oneof="transformation_detail",
            message="AutoMlForecastingInputs.Transformation.CategoricalTransformation",
        )

        timestamp = proto.Field(
            proto.MESSAGE,
            number=4,
            oneof="transformation_detail",
            message="AutoMlForecastingInputs.Transformation.TimestampTransformation",
        )

        text = proto.Field(
            proto.MESSAGE,
            number=5,
            oneof="transformation_detail",
            message="AutoMlForecastingInputs.Transformation.TextTransformation",
        )

        repeated_numeric = proto.Field(
            proto.MESSAGE,
            number=6,
            oneof="transformation_detail",
            message="AutoMlForecastingInputs.Transformation.NumericArrayTransformation",
        )

        repeated_categorical = proto.Field(
            proto.MESSAGE,
            number=7,
            oneof="transformation_detail",
            message="AutoMlForecastingInputs.Transformation.CategoricalArrayTransformation",
        )

        repeated_text = proto.Field(
            proto.MESSAGE,
            number=8,
            oneof="transformation_detail",
            message="AutoMlForecastingInputs.Transformation.TextArrayTransformation",
        )

    class Period(proto.Message):
        r

        unit = proto.Field(proto.STRING, number=1)

        quantity = proto.Field(proto.INT64, number=2)

    target_column = proto.Field(proto.STRING, number=1)

    time_series_identifier_column = proto.Field(proto.STRING, number=2)

    time_column = proto.Field(proto.STRING, number=3)

    transformations = proto.RepeatedField(
        proto.MESSAGE,
        number=4,
        message=Transformation,
    )

    optimization_objective = proto.Field(proto.STRING, number=5)

    train_budget_milli_node_hours = proto.Field(proto.INT64, number=6)

    weight_column = proto.Field(proto.STRING, number=7)

    static_columns = proto.RepeatedField(proto.STRING, number=8)

    time_variant_past_only_columns = proto.RepeatedField(proto.STRING, number=9)

    time_variant_past_and_future_columns = proto.RepeatedField(proto.STRING, number=10)

    period = proto.Field(
        proto.MESSAGE,
        number=11,
        message=Period,
    )

    forecast_window_start = proto.Field(proto.INT64, number=12)

    forecast_window_end = proto.Field(proto.INT64, number=13)

    past_horizon = proto.Field(proto.INT64, number=14)

    export_evaluated_data_items_config = proto.Field(
        proto.MESSAGE,
        number=15,
        message=gcastd_export_evaluated_data_items_config.ExportEvaluatedDataItemsConfig,
    )


class AutoMlForecastingMetadata(proto.Message):
    r

    train_cost_milli_node_hours = proto.Field(proto.INT64, number=1)


__all__ = tuple(sorted(__protobuf__.manifest))
