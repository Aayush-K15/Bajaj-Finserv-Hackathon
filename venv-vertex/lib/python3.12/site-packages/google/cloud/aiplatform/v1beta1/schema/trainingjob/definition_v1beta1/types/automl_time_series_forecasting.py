














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform.v1beta1.schema.trainingjob.definition_v1beta1.types import (
    export_evaluated_data_items_config as gcastd_export_evaluated_data_items_config,
)


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1beta1.schema.trainingjob.definition",
    manifest={
        "AutoMlForecasting",
        "AutoMlForecastingInputs",
        "AutoMlForecastingMetadata",
    },
)


class AutoMlForecasting(proto.Message):
    r

    inputs: "AutoMlForecastingInputs" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="AutoMlForecastingInputs",
    )
    metadata: "AutoMlForecastingMetadata" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="AutoMlForecastingMetadata",
    )


class AutoMlForecastingInputs(proto.Message):
    r

    class Transformation(proto.Message):
        r

        class AutoTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )

        class NumericTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )

        class CategoricalTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )

        class TimestampTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )
            time_format: str = proto.Field(
                proto.STRING,
                number=2,
            )

        class TextTransformation(proto.Message):
            r

            column_name: str = proto.Field(
                proto.STRING,
                number=1,
            )

        auto: "AutoMlForecastingInputs.Transformation.AutoTransformation" = proto.Field(
            proto.MESSAGE,
            number=1,
            oneof="transformation_detail",
            message="AutoMlForecastingInputs.Transformation.AutoTransformation",
        )
        numeric: "AutoMlForecastingInputs.Transformation.NumericTransformation" = (
            proto.Field(
                proto.MESSAGE,
                number=2,
                oneof="transformation_detail",
                message="AutoMlForecastingInputs.Transformation.NumericTransformation",
            )
        )
        categorical: "AutoMlForecastingInputs.Transformation.CategoricalTransformation" = proto.Field(
            proto.MESSAGE,
            number=3,
            oneof="transformation_detail",
            message="AutoMlForecastingInputs.Transformation.CategoricalTransformation",
        )
        timestamp: "AutoMlForecastingInputs.Transformation.TimestampTransformation" = proto.Field(
            proto.MESSAGE,
            number=4,
            oneof="transformation_detail",
            message="AutoMlForecastingInputs.Transformation.TimestampTransformation",
        )
        text: "AutoMlForecastingInputs.Transformation.TextTransformation" = proto.Field(
            proto.MESSAGE,
            number=5,
            oneof="transformation_detail",
            message="AutoMlForecastingInputs.Transformation.TextTransformation",
        )

    class Granularity(proto.Message):
        r

        unit: str = proto.Field(
            proto.STRING,
            number=1,
        )
        quantity: int = proto.Field(
            proto.INT64,
            number=2,
        )

    target_column: str = proto.Field(
        proto.STRING,
        number=1,
    )
    time_series_identifier_column: str = proto.Field(
        proto.STRING,
        number=2,
    )
    time_column: str = proto.Field(
        proto.STRING,
        number=3,
    )
    transformations: MutableSequence[Transformation] = proto.RepeatedField(
        proto.MESSAGE,
        number=4,
        message=Transformation,
    )
    optimization_objective: str = proto.Field(
        proto.STRING,
        number=5,
    )
    train_budget_milli_node_hours: int = proto.Field(
        proto.INT64,
        number=6,
    )
    weight_column: str = proto.Field(
        proto.STRING,
        number=7,
    )
    time_series_attribute_columns: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=19,
    )
    unavailable_at_forecast_columns: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=20,
    )
    available_at_forecast_columns: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=21,
    )
    data_granularity: Granularity = proto.Field(
        proto.MESSAGE,
        number=22,
        message=Granularity,
    )
    forecast_horizon: int = proto.Field(
        proto.INT64,
        number=23,
    )
    context_window: int = proto.Field(
        proto.INT64,
        number=24,
    )
    export_evaluated_data_items_config: gcastd_export_evaluated_data_items_config.ExportEvaluatedDataItemsConfig = proto.Field(
        proto.MESSAGE,
        number=15,
        message=gcastd_export_evaluated_data_items_config.ExportEvaluatedDataItemsConfig,
    )
    quantiles: MutableSequence[float] = proto.RepeatedField(
        proto.DOUBLE,
        number=16,
    )
    validation_options: str = proto.Field(
        proto.STRING,
        number=17,
    )
    additional_experiments: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=25,
    )


class AutoMlForecastingMetadata(proto.Message):
    r

    train_cost_milli_node_hours: int = proto.Field(
        proto.INT64,
        number=1,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
