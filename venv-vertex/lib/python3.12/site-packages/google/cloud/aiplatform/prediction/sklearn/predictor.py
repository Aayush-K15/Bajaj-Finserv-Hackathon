
















import joblib
import numpy as np
import os
import pickle

from google.cloud.aiplatform.constants import prediction
from google.cloud.aiplatform.utils import prediction_utils
from google.cloud.aiplatform.prediction.predictor import Predictor


class SklearnPredictor(Predictor):
    

    def __init__(self):
        return

    def load(self, artifacts_uri: str) -> None:
        
        prediction_utils.download_model_artifacts(artifacts_uri)
        if os.path.exists(prediction.MODEL_FILENAME_JOBLIB):
            self._model = joblib.load(prediction.MODEL_FILENAME_JOBLIB)
        elif os.path.exists(prediction.MODEL_FILENAME_PKL):
            self._model = pickle.load(open(prediction.MODEL_FILENAME_PKL, "rb"))
        else:
            valid_filenames = [
                prediction.MODEL_FILENAME_JOBLIB,
                prediction.MODEL_FILENAME_PKL,
            ]
            raise ValueError(
                f"One of the following model files must be provided: {valid_filenames}."
            )

    def preprocess(self, prediction_input: dict) -> np.ndarray:
        
        instances = prediction_input["instances"]
        return np.asarray(instances)

    def predict(self, instances: np.ndarray) -> np.ndarray:
        
        return self._model.predict(instances)

    def postprocess(self, prediction_results: np.ndarray) -> dict:
        
        return {"predictions": prediction_results.tolist()}
