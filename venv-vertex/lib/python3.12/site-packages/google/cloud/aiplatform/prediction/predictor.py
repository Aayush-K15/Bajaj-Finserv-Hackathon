
















from abc import ABC, abstractmethod
from typing import Any


class Predictor(ABC):
    

    def __init__(self):
        return

    @abstractmethod
    def load(self, artifacts_uri: str) -> None:
        
        pass

    def preprocess(self, prediction_input: Any) -> Any:
        
        return prediction_input

    @abstractmethod
    def predict(self, instances: Any) -> Any:
        
        pass

    def postprocess(self, prediction_results: Any) -> Any:
        
        return prediction_results
