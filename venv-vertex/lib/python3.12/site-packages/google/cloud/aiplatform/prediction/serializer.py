
















from abc import ABC, abstractmethod
import json
from typing import Any, Optional

try:
    from fastapi import HTTPException
except ImportError:
    raise ImportError(
        "FastAPI is not installed and is required to build model servers. "
        'Please install the SDK using `pip install "google-cloud-aiplatform[prediction]>=1.16.0"`.'
    )

from google.cloud.aiplatform.constants import prediction as prediction_constants
from google.cloud.aiplatform.prediction import handler_utils


APPLICATION_JSON = "application/json"


class Serializer(ABC):
    

    @staticmethod
    @abstractmethod
    def deserialize(data: Any, content_type: Optional[str]) -> Any:
        
        pass

    @staticmethod
    @abstractmethod
    def serialize(prediction: Any, accept: Optional[str]) -> Any:
        
        pass


class DefaultSerializer(Serializer):
    

    @staticmethod
    def deserialize(data: Any, content_type: Optional[str]) -> Any:
        
        if content_type == APPLICATION_JSON:
            try:
                return json.loads(data)
            except json.JSONDecodeError:
                raise HTTPException(
                    status_code=400,
                    detail=(
                        f"JSON deserialization failed for the request data: {data}.\n"
                        'To specify a different type, please set the "content-type" header '
                        "in the request.\nCurrently supported content-type in DefaultSerializer: "
                        f'"{APPLICATION_JSON}".'
                    ),
                )
        else:
            raise HTTPException(
                status_code=400,
                detail=(
                    f"Unsupported content type of the request: {content_type}.\n"
                    f'Currently supported content-type in DefaultSerializer: "{APPLICATION_JSON}".'
                ),
            )

    @staticmethod
    def serialize(prediction: Any, accept: Optional[str]) -> Any:
        
        accept_dict = handler_utils.parse_accept_header(accept)

        if (
            APPLICATION_JSON in accept_dict
            or prediction_constants.ANY_ACCEPT_TYPE in accept_dict
        ):
            try:
                return json.dumps(prediction)
            except TypeError:
                raise HTTPException(
                    status_code=400,
                    detail=(
                        f"JSON serialization failed for the prediction result: {prediction}.\n"
                        'To specify a different type, please set the "accept" header '
                        "in the request.\nCurrently supported accept in DefaultSerializer: "
                        f'"{APPLICATION_JSON}".'
                    ),
                )
        else:
            raise HTTPException(
                status_code=400,
                detail=(
                    f"Unsupported accept of the response: {accept}.\n"
                    f'Currently supported accept in DefaultSerializer: "{APPLICATION_JSON}".'
                ),
            )
