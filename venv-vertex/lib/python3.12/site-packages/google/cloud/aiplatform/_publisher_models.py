
















import re
from typing import Optional

from google.auth import credentials as auth_credentials
from google.cloud.aiplatform import base
from google.cloud.aiplatform import utils


class _PublisherModel(base.VertexAiResourceNoun):
    

    client_class = utils.ModelGardenClientWithOverride

    _resource_noun = "publisher_model"
    _getter_method = "get_publisher_model"
    _delete_method = None
    _parse_resource_name_method = "parse_publisher_model_path"
    _format_resource_name_method = "publisher_model_path"

    def __init__(
        self,
        resource_name: str,
        project: Optional[str] = None,
        location: Optional[str] = None,
        credentials: Optional[auth_credentials.Credentials] = None,
    ):
        

        super().__init__(project=project, location=location, credentials=credentials)

        if self._parse_resource_name(resource_name):
            full_resource_name = resource_name
        else:
            m = re.match(r"^(?P<publisher>.+?)/(?P<model>.+?)$", resource_name)
            if m:
                full_resource_name = self._format_resource_name(**m.groupdict())
            else:
                raise ValueError(
                    f"`{resource_name}` is not a valid PublisherModel resource "
                    "name or model garden id."
                )

        self._gca_resource = getattr(self.api_client, self._getter_method)(
            name=full_resource_name, retry=base._DEFAULT_RETRY
        )
