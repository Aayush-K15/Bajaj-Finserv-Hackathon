


















import collections
import os
import tensorflow as tf

from tensorboard.backend.event_processing import directory_watcher
from tensorboard.backend.event_processing import io_wrapper
from tensorboard.util import tb_logging


logger = tb_logging.get_logger()


def is_plugins_subdirectory(path):
    
    if not tf.io.gfile.isdir(path):
        return False
    dirs = tf.io.gfile.listdir(path)
    return "plugins/" in dirs or "plugins" in dirs


def get_plugins_subdirectories(path):
    
    if not tf.io.gfile.exists(path):
        
        logger.warning("Directory does not exist: %s", str(path))
        return ()

    current_glob_string = os.path.join(path, "*")
    while True:
        globs = tf.io.gfile.glob(current_glob_string)

        if not globs:
            
            return

        for glob in globs:
            if is_plugins_subdirectory(glob):
                yield glob

        
        current_glob_string = os.path.join(current_glob_string, "*")


class LogdirLoader:
    

    def __init__(self, logdir, directory_loader_factory):
        
        if logdir is None:
            raise ValueError("A logdir is required")
        if directory_loader_factory is None:
            raise ValueError("A directory loader factory is required")
        self._logdir = logdir
        self._directory_loader_factory = directory_loader_factory
        
        self._directory_loaders = {}

    def synchronize_runs(self):
        
        logger.info("Starting logdir traversal of %s", self._logdir)
        runs_seen = set()
        for subdir in io_wrapper.GetLogdirSubdirectories(self._logdir):
            run = os.path.relpath(subdir, self._logdir)
            runs_seen.add(run)
            if run not in self._directory_loaders:
                logger.info("- Adding run for relative directory %s", run)
                self._directory_loaders[run] = self._directory_loader_factory(subdir)
        for subdir in get_plugins_subdirectories(self._logdir):
            run = os.path.relpath(subdir, self._logdir)
            runs_seen.add(run)
            if run not in self._directory_loaders:
                logger.info("- Adding run for relative directory %s", run)
                self._directory_loaders[run] = self._directory_loader_factory(subdir)
        stale_runs = set(self._directory_loaders) - runs_seen
        if stale_runs:
            for run in stale_runs:
                logger.info("- Removing run for relative directory %s", run)
                del self._directory_loaders[run]
        logger.info("Ending logdir traversal of %s", self._logdir)

    def get_run_events(self):
        
        runs = list(self._directory_loaders)
        logger.info("Creating event loading generators for %d runs", len(runs))
        run_to_loader = collections.OrderedDict()
        for run_name in sorted(runs):
            loader = self._directory_loaders[run_name]
            run_to_loader[run_name] = self._wrap_loader_generator(loader.Load())
        return run_to_loader

    def _wrap_loader_generator(self, loader_generator):
        
        try:
            for item in loader_generator:
                yield item
        except directory_watcher.DirectoryDeletedError:
            return
