
















import abc
import enum
from dataclasses import dataclass
from google.protobuf.struct_pb2 import Value
from typing import Any, Dict, Optional



class DistanceMeasureType(enum.Enum):
    

    
    DOT_PRODUCT_DISTANCE = "DOT_PRODUCT_DISTANCE"
    
    SQUARED_L2_DISTANCE = "SQUARED_L2_DISTANCE"
    
    L1_DISTANCE = "L1_DISTANCE"
    
    COSINE_DISTANCE = "COSINE_DISTANCE"

    def to_value(self) -> str:
        
        return Value(string_value=self.name)


class FeatureNormType(enum.Enum):
    

    
    UNIT_L2_NORM = "UNIT_L2_NORM"
    
    NONE = "NONE"

    def to_value(self) -> str:
        
        return Value(string_value=self.name)


class AlgorithmConfig(abc.ABC):
    

    def as_dict(self) -> Dict:
        
        pass


@dataclass
class TreeAhConfig(AlgorithmConfig):
    

    leaf_node_embedding_count: Optional[int] = None
    leaf_nodes_to_search_percent: Optional[float] = None

    def as_dict(self) -> Dict:
        

        return {
            "treeAhConfig": {
                "leafNodeEmbeddingCount": self.leaf_node_embedding_count,
                "leafNodesToSearchPercent": self.leaf_nodes_to_search_percent,
            }
        }


@dataclass
class BruteForceConfig(AlgorithmConfig):
    

    def as_dict(self) -> Dict:
        
        return {"bruteForceConfig": {}}


@dataclass
class MatchingEngineIndexConfig:
    

    dimensions: int
    algorithm_config: AlgorithmConfig
    approximate_neighbors_count: Optional[int] = None
    distance_measure_type: Optional[DistanceMeasureType] = None
    feature_norm_type: Optional[FeatureNormType] = None
    shard_size: Optional[str] = None

    def as_dict(self) -> Dict[str, Any]:
        
        res = {
            "dimensions": self.dimensions,
            "algorithmConfig": self.algorithm_config.as_dict(),
            "approximateNeighborsCount": self.approximate_neighbors_count,
            "distanceMeasureType": self.distance_measure_type,
            "featureNormType": self.feature_norm_type,
            "shardSize": self.shard_size,
        }
        return res
