














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1.types import operation
from google.cloud.aiplatform_v1.types import reasoning_engine as gca_reasoning_engine
from google.protobuf import field_mask_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "CreateReasoningEngineRequest",
        "CreateReasoningEngineOperationMetadata",
        "GetReasoningEngineRequest",
        "UpdateReasoningEngineRequest",
        "UpdateReasoningEngineOperationMetadata",
        "ListReasoningEnginesRequest",
        "ListReasoningEnginesResponse",
        "DeleteReasoningEngineRequest",
    },
)


class CreateReasoningEngineRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    reasoning_engine: gca_reasoning_engine.ReasoningEngine = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_reasoning_engine.ReasoningEngine,
    )


class CreateReasoningEngineOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class GetReasoningEngineRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class UpdateReasoningEngineRequest(proto.Message):
    r

    reasoning_engine: gca_reasoning_engine.ReasoningEngine = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_reasoning_engine.ReasoningEngine,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )


class UpdateReasoningEngineOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class ListReasoningEnginesRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )


class ListReasoningEnginesResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    reasoning_engines: MutableSequence[
        gca_reasoning_engine.ReasoningEngine
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_reasoning_engine.ReasoningEngine,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteReasoningEngineRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    force: bool = proto.Field(
        proto.BOOL,
        number=2,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
