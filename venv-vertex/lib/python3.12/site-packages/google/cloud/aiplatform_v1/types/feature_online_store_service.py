














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1.types import featurestore_online_service
from google.protobuf import struct_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "FeatureViewDataFormat",
        "FeatureViewDataKey",
        "FetchFeatureValuesRequest",
        "FetchFeatureValuesResponse",
        "NearestNeighborQuery",
        "SearchNearestEntitiesRequest",
        "NearestNeighbors",
        "SearchNearestEntitiesResponse",
    },
)


class FeatureViewDataFormat(proto.Enum):
    r
    FEATURE_VIEW_DATA_FORMAT_UNSPECIFIED = 0
    KEY_VALUE = 1
    PROTO_STRUCT = 2


class FeatureViewDataKey(proto.Message):
    r

    class CompositeKey(proto.Message):
        r

        parts: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=1,
        )

    key: str = proto.Field(
        proto.STRING,
        number=1,
        oneof="key_oneof",
    )
    composite_key: CompositeKey = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="key_oneof",
        message=CompositeKey,
    )


class FetchFeatureValuesRequest(proto.Message):
    r

    feature_view: str = proto.Field(
        proto.STRING,
        number=1,
    )
    data_key: "FeatureViewDataKey" = proto.Field(
        proto.MESSAGE,
        number=6,
        message="FeatureViewDataKey",
    )
    data_format: "FeatureViewDataFormat" = proto.Field(
        proto.ENUM,
        number=7,
        enum="FeatureViewDataFormat",
    )


class FetchFeatureValuesResponse(proto.Message):
    r

    class FeatureNameValuePairList(proto.Message):
        r

        class FeatureNameValuePair(proto.Message):
            r

            value: featurestore_online_service.FeatureValue = proto.Field(
                proto.MESSAGE,
                number=2,
                oneof="data",
                message=featurestore_online_service.FeatureValue,
            )
            name: str = proto.Field(
                proto.STRING,
                number=1,
            )

        features: MutableSequence[
            "FetchFeatureValuesResponse.FeatureNameValuePairList.FeatureNameValuePair"
        ] = proto.RepeatedField(
            proto.MESSAGE,
            number=1,
            message="FetchFeatureValuesResponse.FeatureNameValuePairList.FeatureNameValuePair",
        )

    key_values: FeatureNameValuePairList = proto.Field(
        proto.MESSAGE,
        number=3,
        oneof="format",
        message=FeatureNameValuePairList,
    )
    proto_struct: struct_pb2.Struct = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="format",
        message=struct_pb2.Struct,
    )
    data_key: "FeatureViewDataKey" = proto.Field(
        proto.MESSAGE,
        number=4,
        message="FeatureViewDataKey",
    )


class NearestNeighborQuery(proto.Message):
    r

    class Embedding(proto.Message):
        r

        value: MutableSequence[float] = proto.RepeatedField(
            proto.FLOAT,
            number=1,
        )

    class StringFilter(proto.Message):
        r

        name: str = proto.Field(
            proto.STRING,
            number=1,
        )
        allow_tokens: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=2,
        )
        deny_tokens: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=3,
        )

    class NumericFilter(proto.Message):
        r

        class Operator(proto.Enum):
            r
            OPERATOR_UNSPECIFIED = 0
            LESS = 1
            LESS_EQUAL = 2
            EQUAL = 3
            GREATER_EQUAL = 4
            GREATER = 5
            NOT_EQUAL = 6

        value_int: int = proto.Field(
            proto.INT64,
            number=2,
            oneof="Value",
        )
        value_float: float = proto.Field(
            proto.FLOAT,
            number=3,
            oneof="Value",
        )
        value_double: float = proto.Field(
            proto.DOUBLE,
            number=4,
            oneof="Value",
        )
        name: str = proto.Field(
            proto.STRING,
            number=1,
        )
        op: "NearestNeighborQuery.NumericFilter.Operator" = proto.Field(
            proto.ENUM,
            number=5,
            optional=True,
            enum="NearestNeighborQuery.NumericFilter.Operator",
        )

    class Parameters(proto.Message):
        r

        approximate_neighbor_candidates: int = proto.Field(
            proto.INT32,
            number=1,
        )
        leaf_nodes_search_fraction: float = proto.Field(
            proto.DOUBLE,
            number=2,
        )

    entity_id: str = proto.Field(
        proto.STRING,
        number=1,
        oneof="instance",
    )
    embedding: Embedding = proto.Field(
        proto.MESSAGE,
        number=2,
        oneof="instance",
        message=Embedding,
    )
    neighbor_count: int = proto.Field(
        proto.INT32,
        number=3,
    )
    string_filters: MutableSequence[StringFilter] = proto.RepeatedField(
        proto.MESSAGE,
        number=4,
        message=StringFilter,
    )
    numeric_filters: MutableSequence[NumericFilter] = proto.RepeatedField(
        proto.MESSAGE,
        number=8,
        message=NumericFilter,
    )
    per_crowding_attribute_neighbor_count: int = proto.Field(
        proto.INT32,
        number=5,
    )
    parameters: Parameters = proto.Field(
        proto.MESSAGE,
        number=7,
        message=Parameters,
    )


class SearchNearestEntitiesRequest(proto.Message):
    r

    feature_view: str = proto.Field(
        proto.STRING,
        number=1,
    )
    query: "NearestNeighborQuery" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="NearestNeighborQuery",
    )
    return_full_entity: bool = proto.Field(
        proto.BOOL,
        number=3,
    )


class NearestNeighbors(proto.Message):
    r

    class Neighbor(proto.Message):
        r

        entity_id: str = proto.Field(
            proto.STRING,
            number=1,
        )
        distance: float = proto.Field(
            proto.DOUBLE,
            number=2,
        )
        entity_key_values: "FetchFeatureValuesResponse" = proto.Field(
            proto.MESSAGE,
            number=3,
            message="FetchFeatureValuesResponse",
        )

    neighbors: MutableSequence[Neighbor] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=Neighbor,
    )


class SearchNearestEntitiesResponse(proto.Message):
    r

    nearest_neighbors: "NearestNeighbors" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="NearestNeighbors",
    )


__all__ = tuple(sorted(__protobuf__.manifest))
