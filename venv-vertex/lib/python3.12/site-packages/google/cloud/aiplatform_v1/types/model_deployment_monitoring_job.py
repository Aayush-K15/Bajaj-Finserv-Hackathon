














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1.types import encryption_spec as gca_encryption_spec
from google.cloud.aiplatform_v1.types import feature_monitoring_stats
from google.cloud.aiplatform_v1.types import io
from google.cloud.aiplatform_v1.types import job_state
from google.cloud.aiplatform_v1.types import model_monitoring
from google.protobuf import duration_pb2  
from google.protobuf import struct_pb2  
from google.protobuf import timestamp_pb2  
from google.rpc import status_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "ModelDeploymentMonitoringObjectiveType",
        "ModelDeploymentMonitoringJob",
        "ModelDeploymentMonitoringBigQueryTable",
        "ModelDeploymentMonitoringObjectiveConfig",
        "ModelDeploymentMonitoringScheduleConfig",
        "ModelMonitoringStatsAnomalies",
    },
)


class ModelDeploymentMonitoringObjectiveType(proto.Enum):
    r
    MODEL_DEPLOYMENT_MONITORING_OBJECTIVE_TYPE_UNSPECIFIED = 0
    RAW_FEATURE_SKEW = 1
    RAW_FEATURE_DRIFT = 2
    FEATURE_ATTRIBUTION_SKEW = 3
    FEATURE_ATTRIBUTION_DRIFT = 4


class ModelDeploymentMonitoringJob(proto.Message):
    r

    class MonitoringScheduleState(proto.Enum):
        r
        MONITORING_SCHEDULE_STATE_UNSPECIFIED = 0
        PENDING = 1
        OFFLINE = 2
        RUNNING = 3

    class LatestMonitoringPipelineMetadata(proto.Message):
        r

        run_time: timestamp_pb2.Timestamp = proto.Field(
            proto.MESSAGE,
            number=1,
            message=timestamp_pb2.Timestamp,
        )
        status: status_pb2.Status = proto.Field(
            proto.MESSAGE,
            number=2,
            message=status_pb2.Status,
        )

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    display_name: str = proto.Field(
        proto.STRING,
        number=2,
    )
    endpoint: str = proto.Field(
        proto.STRING,
        number=3,
    )
    state: job_state.JobState = proto.Field(
        proto.ENUM,
        number=4,
        enum=job_state.JobState,
    )
    schedule_state: MonitoringScheduleState = proto.Field(
        proto.ENUM,
        number=5,
        enum=MonitoringScheduleState,
    )
    latest_monitoring_pipeline_metadata: LatestMonitoringPipelineMetadata = proto.Field(
        proto.MESSAGE,
        number=25,
        message=LatestMonitoringPipelineMetadata,
    )
    model_deployment_monitoring_objective_configs: MutableSequence[
        "ModelDeploymentMonitoringObjectiveConfig"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=6,
        message="ModelDeploymentMonitoringObjectiveConfig",
    )
    model_deployment_monitoring_schedule_config: "ModelDeploymentMonitoringScheduleConfig" = proto.Field(
        proto.MESSAGE,
        number=7,
        message="ModelDeploymentMonitoringScheduleConfig",
    )
    logging_sampling_strategy: model_monitoring.SamplingStrategy = proto.Field(
        proto.MESSAGE,
        number=8,
        message=model_monitoring.SamplingStrategy,
    )
    model_monitoring_alert_config: model_monitoring.ModelMonitoringAlertConfig = (
        proto.Field(
            proto.MESSAGE,
            number=15,
            message=model_monitoring.ModelMonitoringAlertConfig,
        )
    )
    predict_instance_schema_uri: str = proto.Field(
        proto.STRING,
        number=9,
    )
    sample_predict_instance: struct_pb2.Value = proto.Field(
        proto.MESSAGE,
        number=19,
        message=struct_pb2.Value,
    )
    analysis_instance_schema_uri: str = proto.Field(
        proto.STRING,
        number=16,
    )
    bigquery_tables: MutableSequence[
        "ModelDeploymentMonitoringBigQueryTable"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=10,
        message="ModelDeploymentMonitoringBigQueryTable",
    )
    log_ttl: duration_pb2.Duration = proto.Field(
        proto.MESSAGE,
        number=17,
        message=duration_pb2.Duration,
    )
    labels: MutableMapping[str, str] = proto.MapField(
        proto.STRING,
        proto.STRING,
        number=11,
    )
    create_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=12,
        message=timestamp_pb2.Timestamp,
    )
    update_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=13,
        message=timestamp_pb2.Timestamp,
    )
    next_schedule_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=14,
        message=timestamp_pb2.Timestamp,
    )
    stats_anomalies_base_directory: io.GcsDestination = proto.Field(
        proto.MESSAGE,
        number=20,
        message=io.GcsDestination,
    )
    encryption_spec: gca_encryption_spec.EncryptionSpec = proto.Field(
        proto.MESSAGE,
        number=21,
        message=gca_encryption_spec.EncryptionSpec,
    )
    enable_monitoring_pipeline_logs: bool = proto.Field(
        proto.BOOL,
        number=22,
    )
    error: status_pb2.Status = proto.Field(
        proto.MESSAGE,
        number=23,
        message=status_pb2.Status,
    )
    satisfies_pzs: bool = proto.Field(
        proto.BOOL,
        number=26,
    )
    satisfies_pzi: bool = proto.Field(
        proto.BOOL,
        number=27,
    )


class ModelDeploymentMonitoringBigQueryTable(proto.Message):
    r

    class LogSource(proto.Enum):
        r
        LOG_SOURCE_UNSPECIFIED = 0
        TRAINING = 1
        SERVING = 2

    class LogType(proto.Enum):
        r
        LOG_TYPE_UNSPECIFIED = 0
        PREDICT = 1
        EXPLAIN = 2

    log_source: LogSource = proto.Field(
        proto.ENUM,
        number=1,
        enum=LogSource,
    )
    log_type: LogType = proto.Field(
        proto.ENUM,
        number=2,
        enum=LogType,
    )
    bigquery_table_path: str = proto.Field(
        proto.STRING,
        number=3,
    )
    request_response_logging_schema_version: str = proto.Field(
        proto.STRING,
        number=4,
    )


class ModelDeploymentMonitoringObjectiveConfig(proto.Message):
    r

    deployed_model_id: str = proto.Field(
        proto.STRING,
        number=1,
    )
    objective_config: model_monitoring.ModelMonitoringObjectiveConfig = proto.Field(
        proto.MESSAGE,
        number=2,
        message=model_monitoring.ModelMonitoringObjectiveConfig,
    )


class ModelDeploymentMonitoringScheduleConfig(proto.Message):
    r

    monitor_interval: duration_pb2.Duration = proto.Field(
        proto.MESSAGE,
        number=1,
        message=duration_pb2.Duration,
    )
    monitor_window: duration_pb2.Duration = proto.Field(
        proto.MESSAGE,
        number=2,
        message=duration_pb2.Duration,
    )


class ModelMonitoringStatsAnomalies(proto.Message):
    r

    class FeatureHistoricStatsAnomalies(proto.Message):
        r

        feature_display_name: str = proto.Field(
            proto.STRING,
            number=1,
        )
        threshold: model_monitoring.ThresholdConfig = proto.Field(
            proto.MESSAGE,
            number=3,
            message=model_monitoring.ThresholdConfig,
        )
        training_stats: feature_monitoring_stats.FeatureStatsAnomaly = proto.Field(
            proto.MESSAGE,
            number=4,
            message=feature_monitoring_stats.FeatureStatsAnomaly,
        )
        prediction_stats: MutableSequence[
            feature_monitoring_stats.FeatureStatsAnomaly
        ] = proto.RepeatedField(
            proto.MESSAGE,
            number=5,
            message=feature_monitoring_stats.FeatureStatsAnomaly,
        )

    objective: "ModelDeploymentMonitoringObjectiveType" = proto.Field(
        proto.ENUM,
        number=1,
        enum="ModelDeploymentMonitoringObjectiveType",
    )
    deployed_model_id: str = proto.Field(
        proto.STRING,
        number=2,
    )
    anomaly_count: int = proto.Field(
        proto.INT32,
        number=3,
    )
    feature_stats: MutableSequence[FeatureHistoricStatsAnomalies] = proto.RepeatedField(
        proto.MESSAGE,
        number=4,
        message=FeatureHistoricStatsAnomalies,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
