














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "PSCAutomationState",
        "PSCAutomationConfig",
        "PrivateServiceConnectConfig",
        "PscAutomatedEndpoints",
        "PscInterfaceConfig",
        "DnsPeeringConfig",
    },
)


class PSCAutomationState(proto.Enum):
    r
    PSC_AUTOMATION_STATE_UNSPECIFIED = 0
    PSC_AUTOMATION_STATE_SUCCESSFUL = 1
    PSC_AUTOMATION_STATE_FAILED = 2


class PSCAutomationConfig(proto.Message):
    r

    project_id: str = proto.Field(
        proto.STRING,
        number=1,
    )
    network: str = proto.Field(
        proto.STRING,
        number=2,
    )
    ip_address: str = proto.Field(
        proto.STRING,
        number=3,
    )
    forwarding_rule: str = proto.Field(
        proto.STRING,
        number=4,
    )
    state: "PSCAutomationState" = proto.Field(
        proto.ENUM,
        number=5,
        enum="PSCAutomationState",
    )
    error_message: str = proto.Field(
        proto.STRING,
        number=6,
    )


class PrivateServiceConnectConfig(proto.Message):
    r

    enable_private_service_connect: bool = proto.Field(
        proto.BOOL,
        number=1,
    )
    project_allowlist: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )
    psc_automation_configs: MutableSequence[
        "PSCAutomationConfig"
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=3,
        message="PSCAutomationConfig",
    )
    service_attachment: str = proto.Field(
        proto.STRING,
        number=5,
    )


class PscAutomatedEndpoints(proto.Message):
    r

    project_id: str = proto.Field(
        proto.STRING,
        number=1,
    )
    network: str = proto.Field(
        proto.STRING,
        number=2,
    )
    match_address: str = proto.Field(
        proto.STRING,
        number=3,
    )


class PscInterfaceConfig(proto.Message):
    r

    network_attachment: str = proto.Field(
        proto.STRING,
        number=1,
    )
    dns_peering_configs: MutableSequence["DnsPeeringConfig"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="DnsPeeringConfig",
    )


class DnsPeeringConfig(proto.Message):
    r

    domain: str = proto.Field(
        proto.STRING,
        number=1,
    )
    target_project: str = proto.Field(
        proto.STRING,
        number=2,
    )
    target_network: str = proto.Field(
        proto.STRING,
        number=3,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
