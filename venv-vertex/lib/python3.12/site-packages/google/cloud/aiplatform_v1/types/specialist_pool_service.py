














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1.types import operation
from google.cloud.aiplatform_v1.types import specialist_pool as gca_specialist_pool
from google.protobuf import field_mask_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "CreateSpecialistPoolRequest",
        "CreateSpecialistPoolOperationMetadata",
        "GetSpecialistPoolRequest",
        "ListSpecialistPoolsRequest",
        "ListSpecialistPoolsResponse",
        "DeleteSpecialistPoolRequest",
        "UpdateSpecialistPoolRequest",
        "UpdateSpecialistPoolOperationMetadata",
    },
)


class CreateSpecialistPoolRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    specialist_pool: gca_specialist_pool.SpecialistPool = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_specialist_pool.SpecialistPool,
    )


class CreateSpecialistPoolOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class GetSpecialistPoolRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListSpecialistPoolsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=4,
        message=field_mask_pb2.FieldMask,
    )


class ListSpecialistPoolsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    specialist_pools: MutableSequence[
        gca_specialist_pool.SpecialistPool
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_specialist_pool.SpecialistPool,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteSpecialistPoolRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    force: bool = proto.Field(
        proto.BOOL,
        number=2,
    )


class UpdateSpecialistPoolRequest(proto.Message):
    r

    specialist_pool: gca_specialist_pool.SpecialistPool = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_specialist_pool.SpecialistPool,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )


class UpdateSpecialistPoolOperationMetadata(proto.Message):
    r

    specialist_pool: str = proto.Field(
        proto.STRING,
        number=1,
    )
    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=2,
        message=operation.GenericOperationMetadata,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
