














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1.types import api_auth
from google.protobuf import timestamp_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "AvroSource",
        "CsvSource",
        "GcsSource",
        "GcsDestination",
        "BigQuerySource",
        "BigQueryDestination",
        "CsvDestination",
        "TFRecordDestination",
        "ContainerRegistryDestination",
        "GoogleDriveSource",
        "DirectUploadSource",
        "SlackSource",
        "JiraSource",
        "SharePointSources",
    },
)


class AvroSource(proto.Message):
    r

    gcs_source: "GcsSource" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="GcsSource",
    )


class CsvSource(proto.Message):
    r

    gcs_source: "GcsSource" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="GcsSource",
    )


class GcsSource(proto.Message):
    r

    uris: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=1,
    )


class GcsDestination(proto.Message):
    r

    output_uri_prefix: str = proto.Field(
        proto.STRING,
        number=1,
    )


class BigQuerySource(proto.Message):
    r

    input_uri: str = proto.Field(
        proto.STRING,
        number=1,
    )


class BigQueryDestination(proto.Message):
    r

    output_uri: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CsvDestination(proto.Message):
    r

    gcs_destination: "GcsDestination" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="GcsDestination",
    )


class TFRecordDestination(proto.Message):
    r

    gcs_destination: "GcsDestination" = proto.Field(
        proto.MESSAGE,
        number=1,
        message="GcsDestination",
    )


class ContainerRegistryDestination(proto.Message):
    r

    output_uri: str = proto.Field(
        proto.STRING,
        number=1,
    )


class GoogleDriveSource(proto.Message):
    r

    class ResourceId(proto.Message):
        r

        class ResourceType(proto.Enum):
            r
            RESOURCE_TYPE_UNSPECIFIED = 0
            RESOURCE_TYPE_FILE = 1
            RESOURCE_TYPE_FOLDER = 2

        resource_type: "GoogleDriveSource.ResourceId.ResourceType" = proto.Field(
            proto.ENUM,
            number=1,
            enum="GoogleDriveSource.ResourceId.ResourceType",
        )
        resource_id: str = proto.Field(
            proto.STRING,
            number=2,
        )

    resource_ids: MutableSequence[ResourceId] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=ResourceId,
    )


class DirectUploadSource(proto.Message):
    r


class SlackSource(proto.Message):
    r

    class SlackChannels(proto.Message):
        r

        class SlackChannel(proto.Message):
            r

            channel_id: str = proto.Field(
                proto.STRING,
                number=1,
            )
            start_time: timestamp_pb2.Timestamp = proto.Field(
                proto.MESSAGE,
                number=2,
                message=timestamp_pb2.Timestamp,
            )
            end_time: timestamp_pb2.Timestamp = proto.Field(
                proto.MESSAGE,
                number=3,
                message=timestamp_pb2.Timestamp,
            )

        channels: MutableSequence[
            "SlackSource.SlackChannels.SlackChannel"
        ] = proto.RepeatedField(
            proto.MESSAGE,
            number=1,
            message="SlackSource.SlackChannels.SlackChannel",
        )
        api_key_config: api_auth.ApiAuth.ApiKeyConfig = proto.Field(
            proto.MESSAGE,
            number=3,
            message=api_auth.ApiAuth.ApiKeyConfig,
        )

    channels: MutableSequence[SlackChannels] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=SlackChannels,
    )


class JiraSource(proto.Message):
    r

    class JiraQueries(proto.Message):
        r

        projects: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=3,
        )
        custom_queries: MutableSequence[str] = proto.RepeatedField(
            proto.STRING,
            number=4,
        )
        email: str = proto.Field(
            proto.STRING,
            number=5,
        )
        server_uri: str = proto.Field(
            proto.STRING,
            number=6,
        )
        api_key_config: api_auth.ApiAuth.ApiKeyConfig = proto.Field(
            proto.MESSAGE,
            number=7,
            message=api_auth.ApiAuth.ApiKeyConfig,
        )

    jira_queries: MutableSequence[JiraQueries] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=JiraQueries,
    )


class SharePointSources(proto.Message):
    r

    class SharePointSource(proto.Message):
        r

        sharepoint_folder_path: str = proto.Field(
            proto.STRING,
            number=5,
            oneof="folder_source",
        )
        sharepoint_folder_id: str = proto.Field(
            proto.STRING,
            number=6,
            oneof="folder_source",
        )
        drive_name: str = proto.Field(
            proto.STRING,
            number=7,
            oneof="drive_source",
        )
        drive_id: str = proto.Field(
            proto.STRING,
            number=8,
            oneof="drive_source",
        )
        client_id: str = proto.Field(
            proto.STRING,
            number=1,
        )
        client_secret: api_auth.ApiAuth.ApiKeyConfig = proto.Field(
            proto.MESSAGE,
            number=2,
            message=api_auth.ApiAuth.ApiKeyConfig,
        )
        tenant_id: str = proto.Field(
            proto.STRING,
            number=3,
        )
        sharepoint_site_name: str = proto.Field(
            proto.STRING,
            number=4,
        )
        file_id: str = proto.Field(
            proto.STRING,
            number=9,
        )

    share_point_sources: MutableSequence[SharePointSource] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=SharePointSource,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
