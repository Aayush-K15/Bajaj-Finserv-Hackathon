














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1.types import feature_selector as gca_feature_selector
from google.cloud.aiplatform_v1.types import types
from google.protobuf import timestamp_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "WriteFeatureValuesRequest",
        "WriteFeatureValuesPayload",
        "WriteFeatureValuesResponse",
        "ReadFeatureValuesRequest",
        "ReadFeatureValuesResponse",
        "StreamingReadFeatureValuesRequest",
        "FeatureValue",
        "StructValue",
        "StructFieldValue",
        "FeatureValueList",
    },
)


class WriteFeatureValuesRequest(proto.Message):
    r

    entity_type: str = proto.Field(
        proto.STRING,
        number=1,
    )
    payloads: MutableSequence["WriteFeatureValuesPayload"] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message="WriteFeatureValuesPayload",
    )


class WriteFeatureValuesPayload(proto.Message):
    r

    entity_id: str = proto.Field(
        proto.STRING,
        number=1,
    )
    feature_values: MutableMapping[str, "FeatureValue"] = proto.MapField(
        proto.STRING,
        proto.MESSAGE,
        number=2,
        message="FeatureValue",
    )


class WriteFeatureValuesResponse(proto.Message):
    r


class ReadFeatureValuesRequest(proto.Message):
    r

    entity_type: str = proto.Field(
        proto.STRING,
        number=1,
    )
    entity_id: str = proto.Field(
        proto.STRING,
        number=2,
    )
    feature_selector: gca_feature_selector.FeatureSelector = proto.Field(
        proto.MESSAGE,
        number=3,
        message=gca_feature_selector.FeatureSelector,
    )


class ReadFeatureValuesResponse(proto.Message):
    r

    class FeatureDescriptor(proto.Message):
        r

        id: str = proto.Field(
            proto.STRING,
            number=1,
        )

    class Header(proto.Message):
        r

        entity_type: str = proto.Field(
            proto.STRING,
            number=1,
        )
        feature_descriptors: MutableSequence[
            "ReadFeatureValuesResponse.FeatureDescriptor"
        ] = proto.RepeatedField(
            proto.MESSAGE,
            number=2,
            message="ReadFeatureValuesResponse.FeatureDescriptor",
        )

    class EntityView(proto.Message):
        r

        class Data(proto.Message):
            r

            value: "FeatureValue" = proto.Field(
                proto.MESSAGE,
                number=1,
                oneof="data",
                message="FeatureValue",
            )
            values: "FeatureValueList" = proto.Field(
                proto.MESSAGE,
                number=2,
                oneof="data",
                message="FeatureValueList",
            )

        entity_id: str = proto.Field(
            proto.STRING,
            number=1,
        )
        data: MutableSequence[
            "ReadFeatureValuesResponse.EntityView.Data"
        ] = proto.RepeatedField(
            proto.MESSAGE,
            number=2,
            message="ReadFeatureValuesResponse.EntityView.Data",
        )

    header: Header = proto.Field(
        proto.MESSAGE,
        number=1,
        message=Header,
    )
    entity_view: EntityView = proto.Field(
        proto.MESSAGE,
        number=2,
        message=EntityView,
    )


class StreamingReadFeatureValuesRequest(proto.Message):
    r

    entity_type: str = proto.Field(
        proto.STRING,
        number=1,
    )
    entity_ids: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )
    feature_selector: gca_feature_selector.FeatureSelector = proto.Field(
        proto.MESSAGE,
        number=3,
        message=gca_feature_selector.FeatureSelector,
    )


class FeatureValue(proto.Message):
    r

    class Metadata(proto.Message):
        r

        generate_time: timestamp_pb2.Timestamp = proto.Field(
            proto.MESSAGE,
            number=1,
            message=timestamp_pb2.Timestamp,
        )

    bool_value: bool = proto.Field(
        proto.BOOL,
        number=1,
        oneof="value",
    )
    double_value: float = proto.Field(
        proto.DOUBLE,
        number=2,
        oneof="value",
    )
    int64_value: int = proto.Field(
        proto.INT64,
        number=5,
        oneof="value",
    )
    string_value: str = proto.Field(
        proto.STRING,
        number=6,
        oneof="value",
    )
    bool_array_value: types.BoolArray = proto.Field(
        proto.MESSAGE,
        number=7,
        oneof="value",
        message=types.BoolArray,
    )
    double_array_value: types.DoubleArray = proto.Field(
        proto.MESSAGE,
        number=8,
        oneof="value",
        message=types.DoubleArray,
    )
    int64_array_value: types.Int64Array = proto.Field(
        proto.MESSAGE,
        number=11,
        oneof="value",
        message=types.Int64Array,
    )
    string_array_value: types.StringArray = proto.Field(
        proto.MESSAGE,
        number=12,
        oneof="value",
        message=types.StringArray,
    )
    bytes_value: bytes = proto.Field(
        proto.BYTES,
        number=13,
        oneof="value",
    )
    struct_value: "StructValue" = proto.Field(
        proto.MESSAGE,
        number=15,
        oneof="value",
        message="StructValue",
    )
    metadata: Metadata = proto.Field(
        proto.MESSAGE,
        number=14,
        message=Metadata,
    )


class StructValue(proto.Message):
    r

    values: MutableSequence["StructFieldValue"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="StructFieldValue",
    )


class StructFieldValue(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    value: "FeatureValue" = proto.Field(
        proto.MESSAGE,
        number=2,
        message="FeatureValue",
    )


class FeatureValueList(proto.Message):
    r

    values: MutableSequence["FeatureValue"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="FeatureValue",
    )


__all__ = tuple(sorted(__protobuf__.manifest))
