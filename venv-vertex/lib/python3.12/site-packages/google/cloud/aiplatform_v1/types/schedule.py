














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1.types import notebook_service
from google.cloud.aiplatform_v1.types import pipeline_service
from google.protobuf import timestamp_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "Schedule",
    },
)


class Schedule(proto.Message):
    r

    class State(proto.Enum):
        r
        STATE_UNSPECIFIED = 0
        ACTIVE = 1
        PAUSED = 2
        COMPLETED = 3

    class RunResponse(proto.Message):
        r

        scheduled_run_time: timestamp_pb2.Timestamp = proto.Field(
            proto.MESSAGE,
            number=1,
            message=timestamp_pb2.Timestamp,
        )
        run_response: str = proto.Field(
            proto.STRING,
            number=2,
        )

    cron: str = proto.Field(
        proto.STRING,
        number=10,
        oneof="time_specification",
    )
    create_pipeline_job_request: pipeline_service.CreatePipelineJobRequest = (
        proto.Field(
            proto.MESSAGE,
            number=14,
            oneof="request",
            message=pipeline_service.CreatePipelineJobRequest,
        )
    )
    create_notebook_execution_job_request: notebook_service.CreateNotebookExecutionJobRequest = proto.Field(
        proto.MESSAGE,
        number=20,
        oneof="request",
        message=notebook_service.CreateNotebookExecutionJobRequest,
    )
    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    display_name: str = proto.Field(
        proto.STRING,
        number=2,
    )
    start_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=3,
        message=timestamp_pb2.Timestamp,
    )
    end_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=4,
        message=timestamp_pb2.Timestamp,
    )
    max_run_count: int = proto.Field(
        proto.INT64,
        number=16,
    )
    started_run_count: int = proto.Field(
        proto.INT64,
        number=17,
    )
    state: State = proto.Field(
        proto.ENUM,
        number=5,
        enum=State,
    )
    create_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=6,
        message=timestamp_pb2.Timestamp,
    )
    update_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=19,
        message=timestamp_pb2.Timestamp,
    )
    next_run_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=7,
        message=timestamp_pb2.Timestamp,
    )
    last_pause_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=8,
        message=timestamp_pb2.Timestamp,
    )
    last_resume_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=9,
        message=timestamp_pb2.Timestamp,
    )
    max_concurrent_run_count: int = proto.Field(
        proto.INT64,
        number=11,
    )
    allow_queueing: bool = proto.Field(
        proto.BOOL,
        number=12,
    )
    catch_up: bool = proto.Field(
        proto.BOOL,
        number=13,
    )
    last_scheduled_run_response: RunResponse = proto.Field(
        proto.MESSAGE,
        number=18,
        message=RunResponse,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
