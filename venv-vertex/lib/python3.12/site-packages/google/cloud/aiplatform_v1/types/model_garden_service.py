














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1.types import machine_resources
from google.cloud.aiplatform_v1.types import model as gca_model
from google.cloud.aiplatform_v1.types import operation


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "PublisherModelView",
        "GetPublisherModelRequest",
        "DeployRequest",
        "DeployResponse",
        "DeployOperationMetadata",
    },
)


class PublisherModelView(proto.Enum):
    r
    PUBLISHER_MODEL_VIEW_UNSPECIFIED = 0
    PUBLISHER_MODEL_VIEW_BASIC = 1
    PUBLISHER_MODEL_VIEW_FULL = 2
    PUBLISHER_MODEL_VERSION_VIEW_BASIC = 3


class GetPublisherModelRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    language_code: str = proto.Field(
        proto.STRING,
        number=2,
    )
    view: "PublisherModelView" = proto.Field(
        proto.ENUM,
        number=3,
        enum="PublisherModelView",
    )
    is_hugging_face_model: bool = proto.Field(
        proto.BOOL,
        number=5,
    )
    hugging_face_token: str = proto.Field(
        proto.STRING,
        number=6,
    )


class DeployRequest(proto.Message):
    r

    class ModelConfig(proto.Message):
        r

        accept_eula: bool = proto.Field(
            proto.BOOL,
            number=1,
        )
        hugging_face_access_token: str = proto.Field(
            proto.STRING,
            number=2,
        )
        hugging_face_cache_enabled: bool = proto.Field(
            proto.BOOL,
            number=3,
        )
        model_display_name: str = proto.Field(
            proto.STRING,
            number=4,
        )
        container_spec: gca_model.ModelContainerSpec = proto.Field(
            proto.MESSAGE,
            number=5,
            message=gca_model.ModelContainerSpec,
        )

    class EndpointConfig(proto.Message):
        r

        endpoint_display_name: str = proto.Field(
            proto.STRING,
            number=1,
        )
        dedicated_endpoint_enabled: bool = proto.Field(
            proto.BOOL,
            number=2,
        )

    class DeployConfig(proto.Message):
        r

        dedicated_resources: machine_resources.DedicatedResources = proto.Field(
            proto.MESSAGE,
            number=1,
            message=machine_resources.DedicatedResources,
        )
        fast_tryout_enabled: bool = proto.Field(
            proto.BOOL,
            number=2,
        )
        system_labels: MutableMapping[str, str] = proto.MapField(
            proto.STRING,
            proto.STRING,
            number=3,
        )

    publisher_model_name: str = proto.Field(
        proto.STRING,
        number=1,
        oneof="artifacts",
    )
    hugging_face_model_id: str = proto.Field(
        proto.STRING,
        number=2,
        oneof="artifacts",
    )
    destination: str = proto.Field(
        proto.STRING,
        number=4,
    )
    model_config: ModelConfig = proto.Field(
        proto.MESSAGE,
        number=5,
        message=ModelConfig,
    )
    endpoint_config: EndpointConfig = proto.Field(
        proto.MESSAGE,
        number=6,
        message=EndpointConfig,
    )
    deploy_config: DeployConfig = proto.Field(
        proto.MESSAGE,
        number=7,
        message=DeployConfig,
    )


class DeployResponse(proto.Message):
    r

    publisher_model: str = proto.Field(
        proto.STRING,
        number=1,
    )
    endpoint: str = proto.Field(
        proto.STRING,
        number=2,
    )
    model: str = proto.Field(
        proto.STRING,
        number=3,
    )


class DeployOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )
    publisher_model: str = proto.Field(
        proto.STRING,
        number=2,
    )
    destination: str = proto.Field(
        proto.STRING,
        number=3,
    )
    project_number: int = proto.Field(
        proto.INT64,
        number=4,
    )
    model_id: str = proto.Field(
        proto.STRING,
        number=5,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
