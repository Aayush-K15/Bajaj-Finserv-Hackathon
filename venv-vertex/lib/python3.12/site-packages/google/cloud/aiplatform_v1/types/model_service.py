














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1.types import encryption_spec as gca_encryption_spec
from google.cloud.aiplatform_v1.types import evaluated_annotation
from google.cloud.aiplatform_v1.types import explanation
from google.cloud.aiplatform_v1.types import io
from google.cloud.aiplatform_v1.types import model as gca_model
from google.cloud.aiplatform_v1.types import model_evaluation as gca_model_evaluation
from google.cloud.aiplatform_v1.types import model_evaluation_slice
from google.cloud.aiplatform_v1.types import operation
from google.protobuf import field_mask_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "UploadModelRequest",
        "UploadModelOperationMetadata",
        "UploadModelResponse",
        "GetModelRequest",
        "ListModelsRequest",
        "ListModelsResponse",
        "ListModelVersionsRequest",
        "ListModelVersionsResponse",
        "ListModelVersionCheckpointsRequest",
        "ModelVersionCheckpoint",
        "ListModelVersionCheckpointsResponse",
        "UpdateModelRequest",
        "UpdateExplanationDatasetRequest",
        "UpdateExplanationDatasetOperationMetadata",
        "DeleteModelRequest",
        "DeleteModelVersionRequest",
        "MergeVersionAliasesRequest",
        "ExportModelRequest",
        "ExportModelOperationMetadata",
        "UpdateExplanationDatasetResponse",
        "ExportModelResponse",
        "CopyModelRequest",
        "CopyModelOperationMetadata",
        "CopyModelResponse",
        "ImportModelEvaluationRequest",
        "BatchImportModelEvaluationSlicesRequest",
        "BatchImportModelEvaluationSlicesResponse",
        "BatchImportEvaluatedAnnotationsRequest",
        "BatchImportEvaluatedAnnotationsResponse",
        "GetModelEvaluationRequest",
        "ListModelEvaluationsRequest",
        "ListModelEvaluationsResponse",
        "GetModelEvaluationSliceRequest",
        "ListModelEvaluationSlicesRequest",
        "ListModelEvaluationSlicesResponse",
    },
)


class UploadModelRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    parent_model: str = proto.Field(
        proto.STRING,
        number=4,
    )
    model_id: str = proto.Field(
        proto.STRING,
        number=5,
    )
    model: gca_model.Model = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_model.Model,
    )
    service_account: str = proto.Field(
        proto.STRING,
        number=6,
    )


class UploadModelOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class UploadModelResponse(proto.Message):
    r

    model: str = proto.Field(
        proto.STRING,
        number=1,
    )
    model_version_id: str = proto.Field(
        proto.STRING,
        number=2,
    )


class GetModelRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListModelsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=6,
    )


class ListModelsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    models: MutableSequence[gca_model.Model] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_model.Model,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class ListModelVersionsRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=6,
    )


class ListModelVersionsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    models: MutableSequence[gca_model.Model] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_model.Model,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class ListModelVersionCheckpointsRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )


class ModelVersionCheckpoint(proto.Message):
    r

    checkpoint_id: str = proto.Field(
        proto.STRING,
        number=1,
    )
    epoch: int = proto.Field(
        proto.INT64,
        number=2,
    )
    step: int = proto.Field(
        proto.INT64,
        number=3,
    )


class ListModelVersionCheckpointsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    checkpoints: MutableSequence["ModelVersionCheckpoint"] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message="ModelVersionCheckpoint",
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class UpdateModelRequest(proto.Message):
    r

    model: gca_model.Model = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_model.Model,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )


class UpdateExplanationDatasetRequest(proto.Message):
    r

    model: str = proto.Field(
        proto.STRING,
        number=1,
    )
    examples: explanation.Examples = proto.Field(
        proto.MESSAGE,
        number=2,
        message=explanation.Examples,
    )


class UpdateExplanationDatasetOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class DeleteModelRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class DeleteModelVersionRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class MergeVersionAliasesRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    version_aliases: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )


class ExportModelRequest(proto.Message):
    r

    class OutputConfig(proto.Message):
        r

        export_format_id: str = proto.Field(
            proto.STRING,
            number=1,
        )
        artifact_destination: io.GcsDestination = proto.Field(
            proto.MESSAGE,
            number=3,
            message=io.GcsDestination,
        )
        image_destination: io.ContainerRegistryDestination = proto.Field(
            proto.MESSAGE,
            number=4,
            message=io.ContainerRegistryDestination,
        )

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    output_config: OutputConfig = proto.Field(
        proto.MESSAGE,
        number=2,
        message=OutputConfig,
    )


class ExportModelOperationMetadata(proto.Message):
    r

    class OutputInfo(proto.Message):
        r

        artifact_output_uri: str = proto.Field(
            proto.STRING,
            number=2,
        )
        image_output_uri: str = proto.Field(
            proto.STRING,
            number=3,
        )

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )
    output_info: OutputInfo = proto.Field(
        proto.MESSAGE,
        number=2,
        message=OutputInfo,
    )


class UpdateExplanationDatasetResponse(proto.Message):
    r


class ExportModelResponse(proto.Message):
    r


class CopyModelRequest(proto.Message):
    r

    model_id: str = proto.Field(
        proto.STRING,
        number=4,
        oneof="destination_model",
    )
    parent_model: str = proto.Field(
        proto.STRING,
        number=5,
        oneof="destination_model",
    )
    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    source_model: str = proto.Field(
        proto.STRING,
        number=2,
    )
    encryption_spec: gca_encryption_spec.EncryptionSpec = proto.Field(
        proto.MESSAGE,
        number=3,
        message=gca_encryption_spec.EncryptionSpec,
    )


class CopyModelOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class CopyModelResponse(proto.Message):
    r

    model: str = proto.Field(
        proto.STRING,
        number=1,
    )
    model_version_id: str = proto.Field(
        proto.STRING,
        number=2,
    )


class ImportModelEvaluationRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    model_evaluation: gca_model_evaluation.ModelEvaluation = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_model_evaluation.ModelEvaluation,
    )


class BatchImportModelEvaluationSlicesRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    model_evaluation_slices: MutableSequence[
        model_evaluation_slice.ModelEvaluationSlice
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message=model_evaluation_slice.ModelEvaluationSlice,
    )


class BatchImportModelEvaluationSlicesResponse(proto.Message):
    r

    imported_model_evaluation_slices: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=1,
    )


class BatchImportEvaluatedAnnotationsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    evaluated_annotations: MutableSequence[
        evaluated_annotation.EvaluatedAnnotation
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message=evaluated_annotation.EvaluatedAnnotation,
    )


class BatchImportEvaluatedAnnotationsResponse(proto.Message):
    r

    imported_evaluated_annotations_count: int = proto.Field(
        proto.INT32,
        number=1,
    )


class GetModelEvaluationRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListModelEvaluationsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )


class ListModelEvaluationsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    model_evaluations: MutableSequence[
        gca_model_evaluation.ModelEvaluation
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_model_evaluation.ModelEvaluation,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class GetModelEvaluationSliceRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListModelEvaluationSlicesRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=3,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=4,
    )
    read_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=5,
        message=field_mask_pb2.FieldMask,
    )


class ListModelEvaluationSlicesResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    model_evaluation_slices: MutableSequence[
        model_evaluation_slice.ModelEvaluationSlice
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=model_evaluation_slice.ModelEvaluationSlice,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
