














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1.types import artifact as gca_artifact
from google.cloud.aiplatform_v1.types import context as gca_context
from google.cloud.aiplatform_v1.types import event
from google.cloud.aiplatform_v1.types import execution as gca_execution
from google.cloud.aiplatform_v1.types import metadata_schema as gca_metadata_schema
from google.cloud.aiplatform_v1.types import metadata_store as gca_metadata_store
from google.cloud.aiplatform_v1.types import operation
from google.protobuf import field_mask_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "CreateMetadataStoreRequest",
        "CreateMetadataStoreOperationMetadata",
        "GetMetadataStoreRequest",
        "ListMetadataStoresRequest",
        "ListMetadataStoresResponse",
        "DeleteMetadataStoreRequest",
        "DeleteMetadataStoreOperationMetadata",
        "CreateArtifactRequest",
        "GetArtifactRequest",
        "ListArtifactsRequest",
        "ListArtifactsResponse",
        "UpdateArtifactRequest",
        "DeleteArtifactRequest",
        "PurgeArtifactsRequest",
        "PurgeArtifactsResponse",
        "PurgeArtifactsMetadata",
        "CreateContextRequest",
        "GetContextRequest",
        "ListContextsRequest",
        "ListContextsResponse",
        "UpdateContextRequest",
        "DeleteContextRequest",
        "PurgeContextsRequest",
        "PurgeContextsResponse",
        "PurgeContextsMetadata",
        "AddContextArtifactsAndExecutionsRequest",
        "AddContextArtifactsAndExecutionsResponse",
        "AddContextChildrenRequest",
        "AddContextChildrenResponse",
        "RemoveContextChildrenRequest",
        "RemoveContextChildrenResponse",
        "QueryContextLineageSubgraphRequest",
        "CreateExecutionRequest",
        "GetExecutionRequest",
        "ListExecutionsRequest",
        "ListExecutionsResponse",
        "UpdateExecutionRequest",
        "DeleteExecutionRequest",
        "PurgeExecutionsRequest",
        "PurgeExecutionsResponse",
        "PurgeExecutionsMetadata",
        "AddExecutionEventsRequest",
        "AddExecutionEventsResponse",
        "QueryExecutionInputsAndOutputsRequest",
        "CreateMetadataSchemaRequest",
        "GetMetadataSchemaRequest",
        "ListMetadataSchemasRequest",
        "ListMetadataSchemasResponse",
        "QueryArtifactLineageSubgraphRequest",
    },
)


class CreateMetadataStoreRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    metadata_store: gca_metadata_store.MetadataStore = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_metadata_store.MetadataStore,
    )
    metadata_store_id: str = proto.Field(
        proto.STRING,
        number=3,
    )


class CreateMetadataStoreOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class GetMetadataStoreRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListMetadataStoresRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )


class ListMetadataStoresResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    metadata_stores: MutableSequence[
        gca_metadata_store.MetadataStore
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_metadata_store.MetadataStore,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class DeleteMetadataStoreRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    force: bool = proto.Field(
        proto.BOOL,
        number=2,
    )


class DeleteMetadataStoreOperationMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class CreateArtifactRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    artifact: gca_artifact.Artifact = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_artifact.Artifact,
    )
    artifact_id: str = proto.Field(
        proto.STRING,
        number=3,
    )


class GetArtifactRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListArtifactsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=4,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=5,
    )


class ListArtifactsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    artifacts: MutableSequence[gca_artifact.Artifact] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_artifact.Artifact,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class UpdateArtifactRequest(proto.Message):
    r

    artifact: gca_artifact.Artifact = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_artifact.Artifact,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )
    allow_missing: bool = proto.Field(
        proto.BOOL,
        number=3,
    )


class DeleteArtifactRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    etag: str = proto.Field(
        proto.STRING,
        number=2,
    )


class PurgeArtifactsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    force: bool = proto.Field(
        proto.BOOL,
        number=3,
    )


class PurgeArtifactsResponse(proto.Message):
    r

    purge_count: int = proto.Field(
        proto.INT64,
        number=1,
    )
    purge_sample: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )


class PurgeArtifactsMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class CreateContextRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    context: gca_context.Context = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_context.Context,
    )
    context_id: str = proto.Field(
        proto.STRING,
        number=3,
    )


class GetContextRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListContextsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=4,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=5,
    )


class ListContextsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    contexts: MutableSequence[gca_context.Context] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_context.Context,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class UpdateContextRequest(proto.Message):
    r

    context: gca_context.Context = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_context.Context,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )
    allow_missing: bool = proto.Field(
        proto.BOOL,
        number=3,
    )


class DeleteContextRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    force: bool = proto.Field(
        proto.BOOL,
        number=2,
    )
    etag: str = proto.Field(
        proto.STRING,
        number=3,
    )


class PurgeContextsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    force: bool = proto.Field(
        proto.BOOL,
        number=3,
    )


class PurgeContextsResponse(proto.Message):
    r

    purge_count: int = proto.Field(
        proto.INT64,
        number=1,
    )
    purge_sample: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )


class PurgeContextsMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class AddContextArtifactsAndExecutionsRequest(proto.Message):
    r

    context: str = proto.Field(
        proto.STRING,
        number=1,
    )
    artifacts: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )
    executions: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=3,
    )


class AddContextArtifactsAndExecutionsResponse(proto.Message):
    r


class AddContextChildrenRequest(proto.Message):
    r

    context: str = proto.Field(
        proto.STRING,
        number=1,
    )
    child_contexts: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )


class AddContextChildrenResponse(proto.Message):
    r


class RemoveContextChildrenRequest(proto.Message):
    r

    context: str = proto.Field(
        proto.STRING,
        number=1,
    )
    child_contexts: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )


class RemoveContextChildrenResponse(proto.Message):
    r


class QueryContextLineageSubgraphRequest(proto.Message):
    r

    context: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CreateExecutionRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    execution: gca_execution.Execution = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_execution.Execution,
    )
    execution_id: str = proto.Field(
        proto.STRING,
        number=3,
    )


class GetExecutionRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListExecutionsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=4,
    )
    order_by: str = proto.Field(
        proto.STRING,
        number=5,
    )


class ListExecutionsResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    executions: MutableSequence[gca_execution.Execution] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_execution.Execution,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class UpdateExecutionRequest(proto.Message):
    r

    execution: gca_execution.Execution = proto.Field(
        proto.MESSAGE,
        number=1,
        message=gca_execution.Execution,
    )
    update_mask: field_mask_pb2.FieldMask = proto.Field(
        proto.MESSAGE,
        number=2,
        message=field_mask_pb2.FieldMask,
    )
    allow_missing: bool = proto.Field(
        proto.BOOL,
        number=3,
    )


class DeleteExecutionRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    etag: str = proto.Field(
        proto.STRING,
        number=2,
    )


class PurgeExecutionsRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=2,
    )
    force: bool = proto.Field(
        proto.BOOL,
        number=3,
    )


class PurgeExecutionsResponse(proto.Message):
    r

    purge_count: int = proto.Field(
        proto.INT64,
        number=1,
    )
    purge_sample: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=2,
    )


class PurgeExecutionsMetadata(proto.Message):
    r

    generic_metadata: operation.GenericOperationMetadata = proto.Field(
        proto.MESSAGE,
        number=1,
        message=operation.GenericOperationMetadata,
    )


class AddExecutionEventsRequest(proto.Message):
    r

    execution: str = proto.Field(
        proto.STRING,
        number=1,
    )
    events: MutableSequence[event.Event] = proto.RepeatedField(
        proto.MESSAGE,
        number=2,
        message=event.Event,
    )


class AddExecutionEventsResponse(proto.Message):
    r


class QueryExecutionInputsAndOutputsRequest(proto.Message):
    r

    execution: str = proto.Field(
        proto.STRING,
        number=1,
    )


class CreateMetadataSchemaRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    metadata_schema: gca_metadata_schema.MetadataSchema = proto.Field(
        proto.MESSAGE,
        number=2,
        message=gca_metadata_schema.MetadataSchema,
    )
    metadata_schema_id: str = proto.Field(
        proto.STRING,
        number=3,
    )


class GetMetadataSchemaRequest(proto.Message):
    r

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )


class ListMetadataSchemasRequest(proto.Message):
    r

    parent: str = proto.Field(
        proto.STRING,
        number=1,
    )
    page_size: int = proto.Field(
        proto.INT32,
        number=2,
    )
    page_token: str = proto.Field(
        proto.STRING,
        number=3,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=4,
    )


class ListMetadataSchemasResponse(proto.Message):
    r

    @property
    def raw_page(self):
        return self

    metadata_schemas: MutableSequence[
        gca_metadata_schema.MetadataSchema
    ] = proto.RepeatedField(
        proto.MESSAGE,
        number=1,
        message=gca_metadata_schema.MetadataSchema,
    )
    next_page_token: str = proto.Field(
        proto.STRING,
        number=2,
    )


class QueryArtifactLineageSubgraphRequest(proto.Message):
    r

    artifact: str = proto.Field(
        proto.STRING,
        number=1,
    )
    max_hops: int = proto.Field(
        proto.INT32,
        number=2,
    )
    filter: str = proto.Field(
        proto.STRING,
        number=3,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
