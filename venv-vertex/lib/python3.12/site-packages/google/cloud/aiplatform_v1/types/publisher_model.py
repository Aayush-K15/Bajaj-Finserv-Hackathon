














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1.types import machine_resources
from google.cloud.aiplatform_v1.types import model


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "PublisherModel",
    },
)


class PublisherModel(proto.Message):
    r

    class OpenSourceCategory(proto.Enum):
        r
        OPEN_SOURCE_CATEGORY_UNSPECIFIED = 0
        PROPRIETARY = 1
        GOOGLE_OWNED_OSS_WITH_GOOGLE_CHECKPOINT = 2
        THIRD_PARTY_OWNED_OSS_WITH_GOOGLE_CHECKPOINT = 3
        GOOGLE_OWNED_OSS = 4
        THIRD_PARTY_OWNED_OSS = 5

    class LaunchStage(proto.Enum):
        r
        LAUNCH_STAGE_UNSPECIFIED = 0
        EXPERIMENTAL = 1
        PRIVATE_PREVIEW = 2
        PUBLIC_PREVIEW = 3
        GA = 4

    class VersionState(proto.Enum):
        r
        VERSION_STATE_UNSPECIFIED = 0
        VERSION_STATE_STABLE = 1
        VERSION_STATE_UNSTABLE = 2

    class ResourceReference(proto.Message):
        r

        uri: str = proto.Field(
            proto.STRING,
            number=1,
            oneof="reference",
        )
        resource_name: str = proto.Field(
            proto.STRING,
            number=2,
            oneof="reference",
        )
        use_case: str = proto.Field(
            proto.STRING,
            number=3,
            oneof="reference",
        )
        description: str = proto.Field(
            proto.STRING,
            number=4,
            oneof="reference",
        )

    class Documentation(proto.Message):
        r

        title: str = proto.Field(
            proto.STRING,
            number=1,
        )
        content: str = proto.Field(
            proto.STRING,
            number=2,
        )

    class CallToAction(proto.Message):
        r

        class RegionalResourceReferences(proto.Message):
            r

            references: MutableMapping[
                str, "PublisherModel.ResourceReference"
            ] = proto.MapField(
                proto.STRING,
                proto.MESSAGE,
                number=1,
                message="PublisherModel.ResourceReference",
            )
            title: str = proto.Field(
                proto.STRING,
                number=2,
            )
            resource_title: str = proto.Field(
                proto.STRING,
                number=3,
                optional=True,
            )
            resource_use_case: str = proto.Field(
                proto.STRING,
                number=4,
                optional=True,
            )
            resource_description: str = proto.Field(
                proto.STRING,
                number=5,
                optional=True,
            )

        class ViewRestApi(proto.Message):
            r

            documentations: MutableSequence[
                "PublisherModel.Documentation"
            ] = proto.RepeatedField(
                proto.MESSAGE,
                number=1,
                message="PublisherModel.Documentation",
            )
            title: str = proto.Field(
                proto.STRING,
                number=2,
            )

        class OpenNotebooks(proto.Message):
            r

            notebooks: MutableSequence[
                "PublisherModel.CallToAction.RegionalResourceReferences"
            ] = proto.RepeatedField(
                proto.MESSAGE,
                number=1,
                message="PublisherModel.CallToAction.RegionalResourceReferences",
            )

        class OpenFineTuningPipelines(proto.Message):
            r

            fine_tuning_pipelines: MutableSequence[
                "PublisherModel.CallToAction.RegionalResourceReferences"
            ] = proto.RepeatedField(
                proto.MESSAGE,
                number=1,
                message="PublisherModel.CallToAction.RegionalResourceReferences",
            )

        class Deploy(proto.Message):
            r

            class DeployMetadata(proto.Message):
                r

                labels: MutableMapping[str, str] = proto.MapField(
                    proto.STRING,
                    proto.STRING,
                    number=1,
                )
                sample_request: str = proto.Field(
                    proto.STRING,
                    number=2,
                )

            dedicated_resources: machine_resources.DedicatedResources = proto.Field(
                proto.MESSAGE,
                number=5,
                oneof="prediction_resources",
                message=machine_resources.DedicatedResources,
            )
            automatic_resources: machine_resources.AutomaticResources = proto.Field(
                proto.MESSAGE,
                number=6,
                oneof="prediction_resources",
                message=machine_resources.AutomaticResources,
            )
            shared_resources: str = proto.Field(
                proto.STRING,
                number=7,
                oneof="prediction_resources",
            )
            model_display_name: str = proto.Field(
                proto.STRING,
                number=1,
            )
            large_model_reference: model.LargeModelReference = proto.Field(
                proto.MESSAGE,
                number=2,
                message=model.LargeModelReference,
            )
            container_spec: model.ModelContainerSpec = proto.Field(
                proto.MESSAGE,
                number=3,
                message=model.ModelContainerSpec,
            )
            artifact_uri: str = proto.Field(
                proto.STRING,
                number=4,
            )
            deploy_task_name: str = proto.Field(
                proto.STRING,
                number=10,
                optional=True,
            )
            deploy_metadata: "PublisherModel.CallToAction.Deploy.DeployMetadata" = (
                proto.Field(
                    proto.MESSAGE,
                    number=11,
                    optional=True,
                    message="PublisherModel.CallToAction.Deploy.DeployMetadata",
                )
            )
            title: str = proto.Field(
                proto.STRING,
                number=8,
            )
            public_artifact_uri: str = proto.Field(
                proto.STRING,
                number=9,
            )

        class DeployGke(proto.Message):
            r

            gke_yaml_configs: MutableSequence[str] = proto.RepeatedField(
                proto.STRING,
                number=1,
            )

        view_rest_api: "PublisherModel.CallToAction.ViewRestApi" = proto.Field(
            proto.MESSAGE,
            number=1,
            message="PublisherModel.CallToAction.ViewRestApi",
        )
        open_notebook: "PublisherModel.CallToAction.RegionalResourceReferences" = (
            proto.Field(
                proto.MESSAGE,
                number=2,
                message="PublisherModel.CallToAction.RegionalResourceReferences",
            )
        )
        open_notebooks: "PublisherModel.CallToAction.OpenNotebooks" = proto.Field(
            proto.MESSAGE,
            number=12,
            optional=True,
            message="PublisherModel.CallToAction.OpenNotebooks",
        )
        create_application: "PublisherModel.CallToAction.RegionalResourceReferences" = (
            proto.Field(
                proto.MESSAGE,
                number=3,
                message="PublisherModel.CallToAction.RegionalResourceReferences",
            )
        )
        open_fine_tuning_pipeline: "PublisherModel.CallToAction.RegionalResourceReferences" = proto.Field(
            proto.MESSAGE,
            number=4,
            message="PublisherModel.CallToAction.RegionalResourceReferences",
        )
        open_fine_tuning_pipelines: "PublisherModel.CallToAction.OpenFineTuningPipelines" = proto.Field(
            proto.MESSAGE,
            number=13,
            optional=True,
            message="PublisherModel.CallToAction.OpenFineTuningPipelines",
        )
        open_prompt_tuning_pipeline: "PublisherModel.CallToAction.RegionalResourceReferences" = proto.Field(
            proto.MESSAGE,
            number=5,
            message="PublisherModel.CallToAction.RegionalResourceReferences",
        )
        open_genie: "PublisherModel.CallToAction.RegionalResourceReferences" = (
            proto.Field(
                proto.MESSAGE,
                number=6,
                message="PublisherModel.CallToAction.RegionalResourceReferences",
            )
        )
        deploy: "PublisherModel.CallToAction.Deploy" = proto.Field(
            proto.MESSAGE,
            number=7,
            message="PublisherModel.CallToAction.Deploy",
        )
        deploy_gke: "PublisherModel.CallToAction.DeployGke" = proto.Field(
            proto.MESSAGE,
            number=14,
            message="PublisherModel.CallToAction.DeployGke",
        )
        open_generation_ai_studio: "PublisherModel.CallToAction.RegionalResourceReferences" = proto.Field(
            proto.MESSAGE,
            number=8,
            message="PublisherModel.CallToAction.RegionalResourceReferences",
        )
        request_access: "PublisherModel.CallToAction.RegionalResourceReferences" = (
            proto.Field(
                proto.MESSAGE,
                number=9,
                message="PublisherModel.CallToAction.RegionalResourceReferences",
            )
        )
        open_evaluation_pipeline: "PublisherModel.CallToAction.RegionalResourceReferences" = proto.Field(
            proto.MESSAGE,
            number=11,
            message="PublisherModel.CallToAction.RegionalResourceReferences",
        )

    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    version_id: str = proto.Field(
        proto.STRING,
        number=2,
    )
    open_source_category: OpenSourceCategory = proto.Field(
        proto.ENUM,
        number=7,
        enum=OpenSourceCategory,
    )
    supported_actions: CallToAction = proto.Field(
        proto.MESSAGE,
        number=19,
        message=CallToAction,
    )
    frameworks: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=23,
    )
    launch_stage: LaunchStage = proto.Field(
        proto.ENUM,
        number=29,
        enum=LaunchStage,
    )
    version_state: VersionState = proto.Field(
        proto.ENUM,
        number=37,
        enum=VersionState,
    )
    publisher_model_template: str = proto.Field(
        proto.STRING,
        number=30,
    )
    predict_schemata: model.PredictSchemata = proto.Field(
        proto.MESSAGE,
        number=31,
        message=model.PredictSchemata,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
