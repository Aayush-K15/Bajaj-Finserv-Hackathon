














from __future__ import annotations

from typing import MutableMapping, MutableSequence

import proto  

from google.cloud.aiplatform_v1.types import content
from google.cloud.aiplatform_v1.types import encryption_spec as gca_encryption_spec
from google.cloud.aiplatform_v1.types import job_state
from google.protobuf import timestamp_pb2  
from google.rpc import status_pb2  


__protobuf__ = proto.module(
    package="google.cloud.aiplatform.v1",
    manifest={
        "TuningJob",
        "TunedModel",
        "SupervisedTuningDatasetDistribution",
        "SupervisedTuningDataStats",
        "TuningDataStats",
        "SupervisedHyperParameters",
        "SupervisedTuningSpec",
        "TunedModelRef",
        "TunedModelCheckpoint",
    },
)


class TuningJob(proto.Message):
    r

    base_model: str = proto.Field(
        proto.STRING,
        number=4,
        oneof="source_model",
    )
    supervised_tuning_spec: "SupervisedTuningSpec" = proto.Field(
        proto.MESSAGE,
        number=5,
        oneof="tuning_spec",
        message="SupervisedTuningSpec",
    )
    name: str = proto.Field(
        proto.STRING,
        number=1,
    )
    tuned_model_display_name: str = proto.Field(
        proto.STRING,
        number=2,
    )
    description: str = proto.Field(
        proto.STRING,
        number=3,
    )
    state: job_state.JobState = proto.Field(
        proto.ENUM,
        number=6,
        enum=job_state.JobState,
    )
    create_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=7,
        message=timestamp_pb2.Timestamp,
    )
    start_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=8,
        message=timestamp_pb2.Timestamp,
    )
    end_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=9,
        message=timestamp_pb2.Timestamp,
    )
    update_time: timestamp_pb2.Timestamp = proto.Field(
        proto.MESSAGE,
        number=10,
        message=timestamp_pb2.Timestamp,
    )
    error: status_pb2.Status = proto.Field(
        proto.MESSAGE,
        number=11,
        message=status_pb2.Status,
    )
    labels: MutableMapping[str, str] = proto.MapField(
        proto.STRING,
        proto.STRING,
        number=12,
    )
    experiment: str = proto.Field(
        proto.STRING,
        number=13,
    )
    tuned_model: "TunedModel" = proto.Field(
        proto.MESSAGE,
        number=14,
        message="TunedModel",
    )
    tuning_data_stats: "TuningDataStats" = proto.Field(
        proto.MESSAGE,
        number=15,
        message="TuningDataStats",
    )
    encryption_spec: gca_encryption_spec.EncryptionSpec = proto.Field(
        proto.MESSAGE,
        number=16,
        message=gca_encryption_spec.EncryptionSpec,
    )
    service_account: str = proto.Field(
        proto.STRING,
        number=22,
    )


class TunedModel(proto.Message):
    r

    model: str = proto.Field(
        proto.STRING,
        number=1,
    )
    endpoint: str = proto.Field(
        proto.STRING,
        number=2,
    )
    checkpoints: MutableSequence["TunedModelCheckpoint"] = proto.RepeatedField(
        proto.MESSAGE,
        number=3,
        message="TunedModelCheckpoint",
    )


class SupervisedTuningDatasetDistribution(proto.Message):
    r

    class DatasetBucket(proto.Message):
        r

        count: float = proto.Field(
            proto.DOUBLE,
            number=1,
        )
        left: float = proto.Field(
            proto.DOUBLE,
            number=2,
        )
        right: float = proto.Field(
            proto.DOUBLE,
            number=3,
        )

    sum: int = proto.Field(
        proto.INT64,
        number=1,
    )
    billable_sum: int = proto.Field(
        proto.INT64,
        number=9,
    )
    min_: float = proto.Field(
        proto.DOUBLE,
        number=2,
    )
    max_: float = proto.Field(
        proto.DOUBLE,
        number=3,
    )
    mean: float = proto.Field(
        proto.DOUBLE,
        number=4,
    )
    median: float = proto.Field(
        proto.DOUBLE,
        number=5,
    )
    p5: float = proto.Field(
        proto.DOUBLE,
        number=6,
    )
    p95: float = proto.Field(
        proto.DOUBLE,
        number=7,
    )
    buckets: MutableSequence[DatasetBucket] = proto.RepeatedField(
        proto.MESSAGE,
        number=8,
        message=DatasetBucket,
    )


class SupervisedTuningDataStats(proto.Message):
    r

    tuning_dataset_example_count: int = proto.Field(
        proto.INT64,
        number=1,
    )
    total_tuning_character_count: int = proto.Field(
        proto.INT64,
        number=2,
    )
    total_billable_character_count: int = proto.Field(
        proto.INT64,
        number=3,
    )
    total_billable_token_count: int = proto.Field(
        proto.INT64,
        number=9,
    )
    tuning_step_count: int = proto.Field(
        proto.INT64,
        number=4,
    )
    user_input_token_distribution: "SupervisedTuningDatasetDistribution" = proto.Field(
        proto.MESSAGE,
        number=5,
        message="SupervisedTuningDatasetDistribution",
    )
    user_output_token_distribution: "SupervisedTuningDatasetDistribution" = proto.Field(
        proto.MESSAGE,
        number=6,
        message="SupervisedTuningDatasetDistribution",
    )
    user_message_per_example_distribution: "SupervisedTuningDatasetDistribution" = (
        proto.Field(
            proto.MESSAGE,
            number=7,
            message="SupervisedTuningDatasetDistribution",
        )
    )
    user_dataset_examples: MutableSequence[content.Content] = proto.RepeatedField(
        proto.MESSAGE,
        number=8,
        message=content.Content,
    )
    total_truncated_example_count: int = proto.Field(
        proto.INT64,
        number=10,
    )
    truncated_example_indices: MutableSequence[int] = proto.RepeatedField(
        proto.INT64,
        number=11,
    )
    dropped_example_reasons: MutableSequence[str] = proto.RepeatedField(
        proto.STRING,
        number=12,
    )


class TuningDataStats(proto.Message):
    r

    supervised_tuning_data_stats: "SupervisedTuningDataStats" = proto.Field(
        proto.MESSAGE,
        number=1,
        oneof="tuning_data_stats",
        message="SupervisedTuningDataStats",
    )


class SupervisedHyperParameters(proto.Message):
    r

    class AdapterSize(proto.Enum):
        r
        ADAPTER_SIZE_UNSPECIFIED = 0
        ADAPTER_SIZE_ONE = 1
        ADAPTER_SIZE_TWO = 6
        ADAPTER_SIZE_FOUR = 2
        ADAPTER_SIZE_EIGHT = 3
        ADAPTER_SIZE_SIXTEEN = 4
        ADAPTER_SIZE_THIRTY_TWO = 5

    epoch_count: int = proto.Field(
        proto.INT64,
        number=1,
    )
    learning_rate_multiplier: float = proto.Field(
        proto.DOUBLE,
        number=2,
    )
    adapter_size: AdapterSize = proto.Field(
        proto.ENUM,
        number=3,
        enum=AdapterSize,
    )


class SupervisedTuningSpec(proto.Message):
    r

    training_dataset_uri: str = proto.Field(
        proto.STRING,
        number=1,
    )
    validation_dataset_uri: str = proto.Field(
        proto.STRING,
        number=2,
    )
    hyper_parameters: "SupervisedHyperParameters" = proto.Field(
        proto.MESSAGE,
        number=3,
        message="SupervisedHyperParameters",
    )
    export_last_checkpoint_only: bool = proto.Field(
        proto.BOOL,
        number=6,
    )


class TunedModelRef(proto.Message):
    r

    tuned_model: str = proto.Field(
        proto.STRING,
        number=1,
        oneof="tuned_model_ref",
    )
    tuning_job: str = proto.Field(
        proto.STRING,
        number=2,
        oneof="tuned_model_ref",
    )
    pipeline_job: str = proto.Field(
        proto.STRING,
        number=3,
        oneof="tuned_model_ref",
    )


class TunedModelCheckpoint(proto.Message):
    r

    checkpoint_id: str = proto.Field(
        proto.STRING,
        number=1,
    )
    epoch: int = proto.Field(
        proto.INT64,
        number=2,
    )
    step: int = proto.Field(
        proto.INT64,
        number=3,
    )
    endpoint: str = proto.Field(
        proto.STRING,
        number=4,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
