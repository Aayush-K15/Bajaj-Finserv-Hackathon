














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import IndexServiceTransport
from .grpc import IndexServiceGrpcTransport
from .grpc_asyncio import IndexServiceGrpcAsyncIOTransport
from .rest import IndexServiceRestTransport
from .rest import IndexServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncIndexServiceRestTransport
    from .rest_asyncio import AsyncIndexServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncIndexServiceRestTransport",
        "AsyncIndexServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = IndexServiceGrpcTransport
_transport_registry["grpc_asyncio"] = IndexServiceGrpcAsyncIOTransport
_transport_registry["rest"] = IndexServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncIndexServiceRestTransport

__all__ = (
    "IndexServiceTransport",
    "IndexServiceGrpcTransport",
    "IndexServiceGrpcAsyncIOTransport",
    "IndexServiceRestTransport",
    "IndexServiceRestInterceptor",
) + ASYNC_REST_CLASSES
