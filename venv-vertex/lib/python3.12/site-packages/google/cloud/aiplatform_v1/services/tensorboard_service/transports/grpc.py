














import json
import logging as std_logging
import pickle
import warnings
from typing import Callable, Dict, Optional, Sequence, Tuple, Union

from google.api_core import grpc_helpers
from google.api_core import operations_v1
from google.api_core import gapic_v1
import google.auth  
from google.auth import credentials as ga_credentials  
from google.auth.transport.grpc import SslCredentials  
from google.protobuf.json_format import MessageToJson
import google.protobuf.message

import grpc  
import proto  

from google.cloud.aiplatform_v1.types import tensorboard
from google.cloud.aiplatform_v1.types import tensorboard_experiment
from google.cloud.aiplatform_v1.types import (
    tensorboard_experiment as gca_tensorboard_experiment,
)
from google.cloud.aiplatform_v1.types import tensorboard_run
from google.cloud.aiplatform_v1.types import tensorboard_run as gca_tensorboard_run
from google.cloud.aiplatform_v1.types import tensorboard_service
from google.cloud.aiplatform_v1.types import tensorboard_time_series
from google.cloud.aiplatform_v1.types import (
    tensorboard_time_series as gca_tensorboard_time_series,
)
from google.cloud.location import locations_pb2  
from google.iam.v1 import iam_policy_pb2  
from google.iam.v1 import policy_pb2  
from google.longrunning import operations_pb2  
from .base import TensorboardServiceTransport, DEFAULT_CLIENT_INFO

try:
    from google.api_core import client_logging  

    CLIENT_LOGGING_SUPPORTED = True  
except ImportError:  
    CLIENT_LOGGING_SUPPORTED = False

_LOGGER = std_logging.getLogger(__name__)


class _LoggingClientInterceptor(grpc.UnaryUnaryClientInterceptor):  
    def intercept_unary_unary(self, continuation, client_call_details, request):
        logging_enabled = CLIENT_LOGGING_SUPPORTED and _LOGGER.isEnabledFor(
            std_logging.DEBUG
        )
        if logging_enabled:  
            request_metadata = client_call_details.metadata
            if isinstance(request, proto.Message):
                request_payload = type(request).to_json(request)
            elif isinstance(request, google.protobuf.message.Message):
                request_payload = MessageToJson(request)
            else:
                request_payload = f"{type(request).__name__}: {pickle.dumps(request)}"

            request_metadata = {
                key: value.decode("utf-8") if isinstance(value, bytes) else value
                for key, value in request_metadata
            }
            grpc_request = {
                "payload": request_payload,
                "requestMethod": "grpc",
                "metadata": dict(request_metadata),
            }
            _LOGGER.debug(
                f"Sending request for {client_call_details.method}",
                extra={
                    "serviceName": "google.cloud.aiplatform.v1.TensorboardService",
                    "rpcName": str(client_call_details.method),
                    "request": grpc_request,
                    "metadata": grpc_request["metadata"],
                },
            )
        response = continuation(client_call_details, request)
        if logging_enabled:  
            response_metadata = response.trailing_metadata()
            
            metadata = (
                dict([(k, str(v)) for k, v in response_metadata])
                if response_metadata
                else None
            )
            result = response.result()
            if isinstance(result, proto.Message):
                response_payload = type(result).to_json(result)
            elif isinstance(result, google.protobuf.message.Message):
                response_payload = MessageToJson(result)
            else:
                response_payload = f"{type(result).__name__}: {pickle.dumps(result)}"
            grpc_response = {
                "payload": response_payload,
                "metadata": metadata,
                "status": "OK",
            }
            _LOGGER.debug(
                f"Received response for {client_call_details.method}.",
                extra={
                    "serviceName": "google.cloud.aiplatform.v1.TensorboardService",
                    "rpcName": client_call_details.method,
                    "response": grpc_response,
                    "metadata": grpc_response["metadata"],
                },
            )
        return response


class TensorboardServiceGrpcTransport(TensorboardServiceTransport):
    

    _stubs: Dict[str, Callable]

    def __init__(
        self,
        *,
        host: str = "aiplatform.googleapis.com",
        credentials: Optional[ga_credentials.Credentials] = None,
        credentials_file: Optional[str] = None,
        scopes: Optional[Sequence[str]] = None,
        channel: Optional[Union[grpc.Channel, Callable[..., grpc.Channel]]] = None,
        api_mtls_endpoint: Optional[str] = None,
        client_cert_source: Optional[Callable[[], Tuple[bytes, bytes]]] = None,
        ssl_channel_credentials: Optional[grpc.ChannelCredentials] = None,
        client_cert_source_for_mtls: Optional[Callable[[], Tuple[bytes, bytes]]] = None,
        quota_project_id: Optional[str] = None,
        client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
        always_use_jwt_access: Optional[bool] = False,
        api_audience: Optional[str] = None,
    ) -> None:
        
        self._grpc_channel = None
        self._ssl_channel_credentials = ssl_channel_credentials
        self._stubs: Dict[str, Callable] = {}
        self._operations_client: Optional[operations_v1.OperationsClient] = None

        if api_mtls_endpoint:
            warnings.warn("api_mtls_endpoint is deprecated", DeprecationWarning)
        if client_cert_source:
            warnings.warn("client_cert_source is deprecated", DeprecationWarning)

        if isinstance(channel, grpc.Channel):
            
            credentials = None
            self._ignore_credentials = True
            
            self._grpc_channel = channel
            self._ssl_channel_credentials = None

        else:
            if api_mtls_endpoint:
                host = api_mtls_endpoint

                
                
                if client_cert_source:
                    cert, key = client_cert_source()
                    self._ssl_channel_credentials = grpc.ssl_channel_credentials(
                        certificate_chain=cert, private_key=key
                    )
                else:
                    self._ssl_channel_credentials = SslCredentials().ssl_credentials

            else:
                if client_cert_source_for_mtls and not ssl_channel_credentials:
                    cert, key = client_cert_source_for_mtls()
                    self._ssl_channel_credentials = grpc.ssl_channel_credentials(
                        certificate_chain=cert, private_key=key
                    )

        
        super().__init__(
            host=host,
            credentials=credentials,
            credentials_file=credentials_file,
            scopes=scopes,
            quota_project_id=quota_project_id,
            client_info=client_info,
            always_use_jwt_access=always_use_jwt_access,
            api_audience=api_audience,
        )

        if not self._grpc_channel:
            
            channel_init = channel or type(self).create_channel
            self._grpc_channel = channel_init(
                self._host,
                
                credentials=self._credentials,
                
                
                credentials_file=None,
                scopes=self._scopes,
                ssl_credentials=self._ssl_channel_credentials,
                quota_project_id=quota_project_id,
                options=[
                    ("grpc.max_send_message_length", -1),
                    ("grpc.max_receive_message_length", -1),
                ],
            )

        self._interceptor = _LoggingClientInterceptor()
        self._logged_channel = grpc.intercept_channel(
            self._grpc_channel, self._interceptor
        )

        
        self._prep_wrapped_messages(client_info)

    @classmethod
    def create_channel(
        cls,
        host: str = "aiplatform.googleapis.com",
        credentials: Optional[ga_credentials.Credentials] = None,
        credentials_file: Optional[str] = None,
        scopes: Optional[Sequence[str]] = None,
        quota_project_id: Optional[str] = None,
        **kwargs,
    ) -> grpc.Channel:
        

        return grpc_helpers.create_channel(
            host,
            credentials=credentials,
            credentials_file=credentials_file,
            quota_project_id=quota_project_id,
            default_scopes=cls.AUTH_SCOPES,
            scopes=scopes,
            default_host=cls.DEFAULT_HOST,
            **kwargs,
        )

    @property
    def grpc_channel(self) -> grpc.Channel:
        
        return self._grpc_channel

    @property
    def operations_client(self) -> operations_v1.OperationsClient:
        
        
        if self._operations_client is None:
            self._operations_client = operations_v1.OperationsClient(
                self._logged_channel
            )

        
        return self._operations_client

    @property
    def create_tensorboard(
        self,
    ) -> Callable[
        [tensorboard_service.CreateTensorboardRequest], operations_pb2.Operation
    ]:
        r
        
        
        
        
        if "create_tensorboard" not in self._stubs:
            self._stubs["create_tensorboard"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/CreateTensorboard",
                request_serializer=tensorboard_service.CreateTensorboardRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["create_tensorboard"]

    @property
    def get_tensorboard(
        self,
    ) -> Callable[[tensorboard_service.GetTensorboardRequest], tensorboard.Tensorboard]:
        r
        
        
        
        
        if "get_tensorboard" not in self._stubs:
            self._stubs["get_tensorboard"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/GetTensorboard",
                request_serializer=tensorboard_service.GetTensorboardRequest.serialize,
                response_deserializer=tensorboard.Tensorboard.deserialize,
            )
        return self._stubs["get_tensorboard"]

    @property
    def update_tensorboard(
        self,
    ) -> Callable[
        [tensorboard_service.UpdateTensorboardRequest], operations_pb2.Operation
    ]:
        r
        
        
        
        
        if "update_tensorboard" not in self._stubs:
            self._stubs["update_tensorboard"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/UpdateTensorboard",
                request_serializer=tensorboard_service.UpdateTensorboardRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["update_tensorboard"]

    @property
    def list_tensorboards(
        self,
    ) -> Callable[
        [tensorboard_service.ListTensorboardsRequest],
        tensorboard_service.ListTensorboardsResponse,
    ]:
        r
        
        
        
        
        if "list_tensorboards" not in self._stubs:
            self._stubs["list_tensorboards"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/ListTensorboards",
                request_serializer=tensorboard_service.ListTensorboardsRequest.serialize,
                response_deserializer=tensorboard_service.ListTensorboardsResponse.deserialize,
            )
        return self._stubs["list_tensorboards"]

    @property
    def delete_tensorboard(
        self,
    ) -> Callable[
        [tensorboard_service.DeleteTensorboardRequest], operations_pb2.Operation
    ]:
        r
        
        
        
        
        if "delete_tensorboard" not in self._stubs:
            self._stubs["delete_tensorboard"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/DeleteTensorboard",
                request_serializer=tensorboard_service.DeleteTensorboardRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["delete_tensorboard"]

    @property
    def read_tensorboard_usage(
        self,
    ) -> Callable[
        [tensorboard_service.ReadTensorboardUsageRequest],
        tensorboard_service.ReadTensorboardUsageResponse,
    ]:
        r
        
        
        
        
        if "read_tensorboard_usage" not in self._stubs:
            self._stubs["read_tensorboard_usage"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/ReadTensorboardUsage",
                request_serializer=tensorboard_service.ReadTensorboardUsageRequest.serialize,
                response_deserializer=tensorboard_service.ReadTensorboardUsageResponse.deserialize,
            )
        return self._stubs["read_tensorboard_usage"]

    @property
    def read_tensorboard_size(
        self,
    ) -> Callable[
        [tensorboard_service.ReadTensorboardSizeRequest],
        tensorboard_service.ReadTensorboardSizeResponse,
    ]:
        r
        
        
        
        
        if "read_tensorboard_size" not in self._stubs:
            self._stubs["read_tensorboard_size"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/ReadTensorboardSize",
                request_serializer=tensorboard_service.ReadTensorboardSizeRequest.serialize,
                response_deserializer=tensorboard_service.ReadTensorboardSizeResponse.deserialize,
            )
        return self._stubs["read_tensorboard_size"]

    @property
    def create_tensorboard_experiment(
        self,
    ) -> Callable[
        [tensorboard_service.CreateTensorboardExperimentRequest],
        gca_tensorboard_experiment.TensorboardExperiment,
    ]:
        r
        
        
        
        
        if "create_tensorboard_experiment" not in self._stubs:
            self._stubs[
                "create_tensorboard_experiment"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/CreateTensorboardExperiment",
                request_serializer=tensorboard_service.CreateTensorboardExperimentRequest.serialize,
                response_deserializer=gca_tensorboard_experiment.TensorboardExperiment.deserialize,
            )
        return self._stubs["create_tensorboard_experiment"]

    @property
    def get_tensorboard_experiment(
        self,
    ) -> Callable[
        [tensorboard_service.GetTensorboardExperimentRequest],
        tensorboard_experiment.TensorboardExperiment,
    ]:
        r
        
        
        
        
        if "get_tensorboard_experiment" not in self._stubs:
            self._stubs[
                "get_tensorboard_experiment"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/GetTensorboardExperiment",
                request_serializer=tensorboard_service.GetTensorboardExperimentRequest.serialize,
                response_deserializer=tensorboard_experiment.TensorboardExperiment.deserialize,
            )
        return self._stubs["get_tensorboard_experiment"]

    @property
    def update_tensorboard_experiment(
        self,
    ) -> Callable[
        [tensorboard_service.UpdateTensorboardExperimentRequest],
        gca_tensorboard_experiment.TensorboardExperiment,
    ]:
        r
        
        
        
        
        if "update_tensorboard_experiment" not in self._stubs:
            self._stubs[
                "update_tensorboard_experiment"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/UpdateTensorboardExperiment",
                request_serializer=tensorboard_service.UpdateTensorboardExperimentRequest.serialize,
                response_deserializer=gca_tensorboard_experiment.TensorboardExperiment.deserialize,
            )
        return self._stubs["update_tensorboard_experiment"]

    @property
    def list_tensorboard_experiments(
        self,
    ) -> Callable[
        [tensorboard_service.ListTensorboardExperimentsRequest],
        tensorboard_service.ListTensorboardExperimentsResponse,
    ]:
        r
        
        
        
        
        if "list_tensorboard_experiments" not in self._stubs:
            self._stubs[
                "list_tensorboard_experiments"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/ListTensorboardExperiments",
                request_serializer=tensorboard_service.ListTensorboardExperimentsRequest.serialize,
                response_deserializer=tensorboard_service.ListTensorboardExperimentsResponse.deserialize,
            )
        return self._stubs["list_tensorboard_experiments"]

    @property
    def delete_tensorboard_experiment(
        self,
    ) -> Callable[
        [tensorboard_service.DeleteTensorboardExperimentRequest],
        operations_pb2.Operation,
    ]:
        r
        
        
        
        
        if "delete_tensorboard_experiment" not in self._stubs:
            self._stubs[
                "delete_tensorboard_experiment"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/DeleteTensorboardExperiment",
                request_serializer=tensorboard_service.DeleteTensorboardExperimentRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["delete_tensorboard_experiment"]

    @property
    def create_tensorboard_run(
        self,
    ) -> Callable[
        [tensorboard_service.CreateTensorboardRunRequest],
        gca_tensorboard_run.TensorboardRun,
    ]:
        r
        
        
        
        
        if "create_tensorboard_run" not in self._stubs:
            self._stubs["create_tensorboard_run"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/CreateTensorboardRun",
                request_serializer=tensorboard_service.CreateTensorboardRunRequest.serialize,
                response_deserializer=gca_tensorboard_run.TensorboardRun.deserialize,
            )
        return self._stubs["create_tensorboard_run"]

    @property
    def batch_create_tensorboard_runs(
        self,
    ) -> Callable[
        [tensorboard_service.BatchCreateTensorboardRunsRequest],
        tensorboard_service.BatchCreateTensorboardRunsResponse,
    ]:
        r
        
        
        
        
        if "batch_create_tensorboard_runs" not in self._stubs:
            self._stubs[
                "batch_create_tensorboard_runs"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/BatchCreateTensorboardRuns",
                request_serializer=tensorboard_service.BatchCreateTensorboardRunsRequest.serialize,
                response_deserializer=tensorboard_service.BatchCreateTensorboardRunsResponse.deserialize,
            )
        return self._stubs["batch_create_tensorboard_runs"]

    @property
    def get_tensorboard_run(
        self,
    ) -> Callable[
        [tensorboard_service.GetTensorboardRunRequest], tensorboard_run.TensorboardRun
    ]:
        r
        
        
        
        
        if "get_tensorboard_run" not in self._stubs:
            self._stubs["get_tensorboard_run"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/GetTensorboardRun",
                request_serializer=tensorboard_service.GetTensorboardRunRequest.serialize,
                response_deserializer=tensorboard_run.TensorboardRun.deserialize,
            )
        return self._stubs["get_tensorboard_run"]

    @property
    def update_tensorboard_run(
        self,
    ) -> Callable[
        [tensorboard_service.UpdateTensorboardRunRequest],
        gca_tensorboard_run.TensorboardRun,
    ]:
        r
        
        
        
        
        if "update_tensorboard_run" not in self._stubs:
            self._stubs["update_tensorboard_run"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/UpdateTensorboardRun",
                request_serializer=tensorboard_service.UpdateTensorboardRunRequest.serialize,
                response_deserializer=gca_tensorboard_run.TensorboardRun.deserialize,
            )
        return self._stubs["update_tensorboard_run"]

    @property
    def list_tensorboard_runs(
        self,
    ) -> Callable[
        [tensorboard_service.ListTensorboardRunsRequest],
        tensorboard_service.ListTensorboardRunsResponse,
    ]:
        r
        
        
        
        
        if "list_tensorboard_runs" not in self._stubs:
            self._stubs["list_tensorboard_runs"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/ListTensorboardRuns",
                request_serializer=tensorboard_service.ListTensorboardRunsRequest.serialize,
                response_deserializer=tensorboard_service.ListTensorboardRunsResponse.deserialize,
            )
        return self._stubs["list_tensorboard_runs"]

    @property
    def delete_tensorboard_run(
        self,
    ) -> Callable[
        [tensorboard_service.DeleteTensorboardRunRequest], operations_pb2.Operation
    ]:
        r
        
        
        
        
        if "delete_tensorboard_run" not in self._stubs:
            self._stubs["delete_tensorboard_run"] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/DeleteTensorboardRun",
                request_serializer=tensorboard_service.DeleteTensorboardRunRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["delete_tensorboard_run"]

    @property
    def batch_create_tensorboard_time_series(
        self,
    ) -> Callable[
        [tensorboard_service.BatchCreateTensorboardTimeSeriesRequest],
        tensorboard_service.BatchCreateTensorboardTimeSeriesResponse,
    ]:
        r
        
        
        
        
        if "batch_create_tensorboard_time_series" not in self._stubs:
            self._stubs[
                "batch_create_tensorboard_time_series"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/BatchCreateTensorboardTimeSeries",
                request_serializer=tensorboard_service.BatchCreateTensorboardTimeSeriesRequest.serialize,
                response_deserializer=tensorboard_service.BatchCreateTensorboardTimeSeriesResponse.deserialize,
            )
        return self._stubs["batch_create_tensorboard_time_series"]

    @property
    def create_tensorboard_time_series(
        self,
    ) -> Callable[
        [tensorboard_service.CreateTensorboardTimeSeriesRequest],
        gca_tensorboard_time_series.TensorboardTimeSeries,
    ]:
        r
        
        
        
        
        if "create_tensorboard_time_series" not in self._stubs:
            self._stubs[
                "create_tensorboard_time_series"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/CreateTensorboardTimeSeries",
                request_serializer=tensorboard_service.CreateTensorboardTimeSeriesRequest.serialize,
                response_deserializer=gca_tensorboard_time_series.TensorboardTimeSeries.deserialize,
            )
        return self._stubs["create_tensorboard_time_series"]

    @property
    def get_tensorboard_time_series(
        self,
    ) -> Callable[
        [tensorboard_service.GetTensorboardTimeSeriesRequest],
        tensorboard_time_series.TensorboardTimeSeries,
    ]:
        r
        
        
        
        
        if "get_tensorboard_time_series" not in self._stubs:
            self._stubs[
                "get_tensorboard_time_series"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/GetTensorboardTimeSeries",
                request_serializer=tensorboard_service.GetTensorboardTimeSeriesRequest.serialize,
                response_deserializer=tensorboard_time_series.TensorboardTimeSeries.deserialize,
            )
        return self._stubs["get_tensorboard_time_series"]

    @property
    def update_tensorboard_time_series(
        self,
    ) -> Callable[
        [tensorboard_service.UpdateTensorboardTimeSeriesRequest],
        gca_tensorboard_time_series.TensorboardTimeSeries,
    ]:
        r
        
        
        
        
        if "update_tensorboard_time_series" not in self._stubs:
            self._stubs[
                "update_tensorboard_time_series"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/UpdateTensorboardTimeSeries",
                request_serializer=tensorboard_service.UpdateTensorboardTimeSeriesRequest.serialize,
                response_deserializer=gca_tensorboard_time_series.TensorboardTimeSeries.deserialize,
            )
        return self._stubs["update_tensorboard_time_series"]

    @property
    def list_tensorboard_time_series(
        self,
    ) -> Callable[
        [tensorboard_service.ListTensorboardTimeSeriesRequest],
        tensorboard_service.ListTensorboardTimeSeriesResponse,
    ]:
        r
        
        
        
        
        if "list_tensorboard_time_series" not in self._stubs:
            self._stubs[
                "list_tensorboard_time_series"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/ListTensorboardTimeSeries",
                request_serializer=tensorboard_service.ListTensorboardTimeSeriesRequest.serialize,
                response_deserializer=tensorboard_service.ListTensorboardTimeSeriesResponse.deserialize,
            )
        return self._stubs["list_tensorboard_time_series"]

    @property
    def delete_tensorboard_time_series(
        self,
    ) -> Callable[
        [tensorboard_service.DeleteTensorboardTimeSeriesRequest],
        operations_pb2.Operation,
    ]:
        r
        
        
        
        
        if "delete_tensorboard_time_series" not in self._stubs:
            self._stubs[
                "delete_tensorboard_time_series"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/DeleteTensorboardTimeSeries",
                request_serializer=tensorboard_service.DeleteTensorboardTimeSeriesRequest.serialize,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["delete_tensorboard_time_series"]

    @property
    def batch_read_tensorboard_time_series_data(
        self,
    ) -> Callable[
        [tensorboard_service.BatchReadTensorboardTimeSeriesDataRequest],
        tensorboard_service.BatchReadTensorboardTimeSeriesDataResponse,
    ]:
        r
        
        
        
        
        if "batch_read_tensorboard_time_series_data" not in self._stubs:
            self._stubs[
                "batch_read_tensorboard_time_series_data"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/BatchReadTensorboardTimeSeriesData",
                request_serializer=tensorboard_service.BatchReadTensorboardTimeSeriesDataRequest.serialize,
                response_deserializer=tensorboard_service.BatchReadTensorboardTimeSeriesDataResponse.deserialize,
            )
        return self._stubs["batch_read_tensorboard_time_series_data"]

    @property
    def read_tensorboard_time_series_data(
        self,
    ) -> Callable[
        [tensorboard_service.ReadTensorboardTimeSeriesDataRequest],
        tensorboard_service.ReadTensorboardTimeSeriesDataResponse,
    ]:
        r
        
        
        
        
        if "read_tensorboard_time_series_data" not in self._stubs:
            self._stubs[
                "read_tensorboard_time_series_data"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/ReadTensorboardTimeSeriesData",
                request_serializer=tensorboard_service.ReadTensorboardTimeSeriesDataRequest.serialize,
                response_deserializer=tensorboard_service.ReadTensorboardTimeSeriesDataResponse.deserialize,
            )
        return self._stubs["read_tensorboard_time_series_data"]

    @property
    def read_tensorboard_blob_data(
        self,
    ) -> Callable[
        [tensorboard_service.ReadTensorboardBlobDataRequest],
        tensorboard_service.ReadTensorboardBlobDataResponse,
    ]:
        r
        
        
        
        
        if "read_tensorboard_blob_data" not in self._stubs:
            self._stubs[
                "read_tensorboard_blob_data"
            ] = self._logged_channel.unary_stream(
                "/google.cloud.aiplatform.v1.TensorboardService/ReadTensorboardBlobData",
                request_serializer=tensorboard_service.ReadTensorboardBlobDataRequest.serialize,
                response_deserializer=tensorboard_service.ReadTensorboardBlobDataResponse.deserialize,
            )
        return self._stubs["read_tensorboard_blob_data"]

    @property
    def write_tensorboard_experiment_data(
        self,
    ) -> Callable[
        [tensorboard_service.WriteTensorboardExperimentDataRequest],
        tensorboard_service.WriteTensorboardExperimentDataResponse,
    ]:
        r
        
        
        
        
        if "write_tensorboard_experiment_data" not in self._stubs:
            self._stubs[
                "write_tensorboard_experiment_data"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/WriteTensorboardExperimentData",
                request_serializer=tensorboard_service.WriteTensorboardExperimentDataRequest.serialize,
                response_deserializer=tensorboard_service.WriteTensorboardExperimentDataResponse.deserialize,
            )
        return self._stubs["write_tensorboard_experiment_data"]

    @property
    def write_tensorboard_run_data(
        self,
    ) -> Callable[
        [tensorboard_service.WriteTensorboardRunDataRequest],
        tensorboard_service.WriteTensorboardRunDataResponse,
    ]:
        r
        
        
        
        
        if "write_tensorboard_run_data" not in self._stubs:
            self._stubs[
                "write_tensorboard_run_data"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/WriteTensorboardRunData",
                request_serializer=tensorboard_service.WriteTensorboardRunDataRequest.serialize,
                response_deserializer=tensorboard_service.WriteTensorboardRunDataResponse.deserialize,
            )
        return self._stubs["write_tensorboard_run_data"]

    @property
    def export_tensorboard_time_series_data(
        self,
    ) -> Callable[
        [tensorboard_service.ExportTensorboardTimeSeriesDataRequest],
        tensorboard_service.ExportTensorboardTimeSeriesDataResponse,
    ]:
        r
        
        
        
        
        if "export_tensorboard_time_series_data" not in self._stubs:
            self._stubs[
                "export_tensorboard_time_series_data"
            ] = self._logged_channel.unary_unary(
                "/google.cloud.aiplatform.v1.TensorboardService/ExportTensorboardTimeSeriesData",
                request_serializer=tensorboard_service.ExportTensorboardTimeSeriesDataRequest.serialize,
                response_deserializer=tensorboard_service.ExportTensorboardTimeSeriesDataResponse.deserialize,
            )
        return self._stubs["export_tensorboard_time_series_data"]

    def close(self):
        self._logged_channel.close()

    @property
    def delete_operation(
        self,
    ) -> Callable[[operations_pb2.DeleteOperationRequest], None]:
        r
        
        
        
        
        if "delete_operation" not in self._stubs:
            self._stubs["delete_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/DeleteOperation",
                request_serializer=operations_pb2.DeleteOperationRequest.SerializeToString,
                response_deserializer=None,
            )
        return self._stubs["delete_operation"]

    @property
    def cancel_operation(
        self,
    ) -> Callable[[operations_pb2.CancelOperationRequest], None]:
        r
        
        
        
        
        if "cancel_operation" not in self._stubs:
            self._stubs["cancel_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/CancelOperation",
                request_serializer=operations_pb2.CancelOperationRequest.SerializeToString,
                response_deserializer=None,
            )
        return self._stubs["cancel_operation"]

    @property
    def wait_operation(
        self,
    ) -> Callable[[operations_pb2.WaitOperationRequest], None]:
        r
        
        
        
        
        if "wait_operation" not in self._stubs:
            self._stubs["wait_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/WaitOperation",
                request_serializer=operations_pb2.WaitOperationRequest.SerializeToString,
                response_deserializer=None,
            )
        return self._stubs["wait_operation"]

    @property
    def get_operation(
        self,
    ) -> Callable[[operations_pb2.GetOperationRequest], operations_pb2.Operation]:
        r
        
        
        
        
        if "get_operation" not in self._stubs:
            self._stubs["get_operation"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/GetOperation",
                request_serializer=operations_pb2.GetOperationRequest.SerializeToString,
                response_deserializer=operations_pb2.Operation.FromString,
            )
        return self._stubs["get_operation"]

    @property
    def list_operations(
        self,
    ) -> Callable[
        [operations_pb2.ListOperationsRequest], operations_pb2.ListOperationsResponse
    ]:
        r
        
        
        
        
        if "list_operations" not in self._stubs:
            self._stubs["list_operations"] = self._logged_channel.unary_unary(
                "/google.longrunning.Operations/ListOperations",
                request_serializer=operations_pb2.ListOperationsRequest.SerializeToString,
                response_deserializer=operations_pb2.ListOperationsResponse.FromString,
            )
        return self._stubs["list_operations"]

    @property
    def list_locations(
        self,
    ) -> Callable[
        [locations_pb2.ListLocationsRequest], locations_pb2.ListLocationsResponse
    ]:
        r
        
        
        
        
        if "list_locations" not in self._stubs:
            self._stubs["list_locations"] = self._logged_channel.unary_unary(
                "/google.cloud.location.Locations/ListLocations",
                request_serializer=locations_pb2.ListLocationsRequest.SerializeToString,
                response_deserializer=locations_pb2.ListLocationsResponse.FromString,
            )
        return self._stubs["list_locations"]

    @property
    def get_location(
        self,
    ) -> Callable[[locations_pb2.GetLocationRequest], locations_pb2.Location]:
        r
        
        
        
        
        if "get_location" not in self._stubs:
            self._stubs["get_location"] = self._logged_channel.unary_unary(
                "/google.cloud.location.Locations/GetLocation",
                request_serializer=locations_pb2.GetLocationRequest.SerializeToString,
                response_deserializer=locations_pb2.Location.FromString,
            )
        return self._stubs["get_location"]

    @property
    def set_iam_policy(
        self,
    ) -> Callable[[iam_policy_pb2.SetIamPolicyRequest], policy_pb2.Policy]:
        r
        
        
        
        
        if "set_iam_policy" not in self._stubs:
            self._stubs["set_iam_policy"] = self._logged_channel.unary_unary(
                "/google.iam.v1.IAMPolicy/SetIamPolicy",
                request_serializer=iam_policy_pb2.SetIamPolicyRequest.SerializeToString,
                response_deserializer=policy_pb2.Policy.FromString,
            )
        return self._stubs["set_iam_policy"]

    @property
    def get_iam_policy(
        self,
    ) -> Callable[[iam_policy_pb2.GetIamPolicyRequest], policy_pb2.Policy]:
        r
        
        
        
        
        if "get_iam_policy" not in self._stubs:
            self._stubs["get_iam_policy"] = self._logged_channel.unary_unary(
                "/google.iam.v1.IAMPolicy/GetIamPolicy",
                request_serializer=iam_policy_pb2.GetIamPolicyRequest.SerializeToString,
                response_deserializer=policy_pb2.Policy.FromString,
            )
        return self._stubs["get_iam_policy"]

    @property
    def test_iam_permissions(
        self,
    ) -> Callable[
        [iam_policy_pb2.TestIamPermissionsRequest],
        iam_policy_pb2.TestIamPermissionsResponse,
    ]:
        r
        
        
        
        
        if "test_iam_permissions" not in self._stubs:
            self._stubs["test_iam_permissions"] = self._logged_channel.unary_unary(
                "/google.iam.v1.IAMPolicy/TestIamPermissions",
                request_serializer=iam_policy_pb2.TestIamPermissionsRequest.SerializeToString,
                response_deserializer=iam_policy_pb2.TestIamPermissionsResponse.FromString,
            )
        return self._stubs["test_iam_permissions"]

    @property
    def kind(self) -> str:
        return "grpc"


__all__ = ("TensorboardServiceGrpcTransport",)
