














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import DatasetServiceTransport
from .grpc import DatasetServiceGrpcTransport
from .grpc_asyncio import DatasetServiceGrpcAsyncIOTransport
from .rest import DatasetServiceRestTransport
from .rest import DatasetServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncDatasetServiceRestTransport
    from .rest_asyncio import AsyncDatasetServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncDatasetServiceRestTransport",
        "AsyncDatasetServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = DatasetServiceGrpcTransport
_transport_registry["grpc_asyncio"] = DatasetServiceGrpcAsyncIOTransport
_transport_registry["rest"] = DatasetServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncDatasetServiceRestTransport

__all__ = (
    "DatasetServiceTransport",
    "DatasetServiceGrpcTransport",
    "DatasetServiceGrpcAsyncIOTransport",
    "DatasetServiceRestTransport",
    "DatasetServiceRestInterceptor",
) + ASYNC_REST_CLASSES
