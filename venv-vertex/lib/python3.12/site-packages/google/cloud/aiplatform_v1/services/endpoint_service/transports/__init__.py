














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import EndpointServiceTransport
from .grpc import EndpointServiceGrpcTransport
from .grpc_asyncio import EndpointServiceGrpcAsyncIOTransport
from .rest import EndpointServiceRestTransport
from .rest import EndpointServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncEndpointServiceRestTransport
    from .rest_asyncio import AsyncEndpointServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncEndpointServiceRestTransport",
        "AsyncEndpointServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = EndpointServiceGrpcTransport
_transport_registry["grpc_asyncio"] = EndpointServiceGrpcAsyncIOTransport
_transport_registry["rest"] = EndpointServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncEndpointServiceRestTransport

__all__ = (
    "EndpointServiceTransport",
    "EndpointServiceGrpcTransport",
    "EndpointServiceGrpcAsyncIOTransport",
    "EndpointServiceRestTransport",
    "EndpointServiceRestInterceptor",
) + ASYNC_REST_CLASSES
