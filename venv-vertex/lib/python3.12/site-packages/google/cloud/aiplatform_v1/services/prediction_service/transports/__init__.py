














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import PredictionServiceTransport
from .grpc import PredictionServiceGrpcTransport
from .grpc_asyncio import PredictionServiceGrpcAsyncIOTransport
from .rest import PredictionServiceRestTransport
from .rest import PredictionServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncPredictionServiceRestTransport
    from .rest_asyncio import AsyncPredictionServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncPredictionServiceRestTransport",
        "AsyncPredictionServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = PredictionServiceGrpcTransport
_transport_registry["grpc_asyncio"] = PredictionServiceGrpcAsyncIOTransport
_transport_registry["rest"] = PredictionServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncPredictionServiceRestTransport

__all__ = (
    "PredictionServiceTransport",
    "PredictionServiceGrpcTransport",
    "PredictionServiceGrpcAsyncIOTransport",
    "PredictionServiceRestTransport",
    "PredictionServiceRestInterceptor",
) + ASYNC_REST_CLASSES
