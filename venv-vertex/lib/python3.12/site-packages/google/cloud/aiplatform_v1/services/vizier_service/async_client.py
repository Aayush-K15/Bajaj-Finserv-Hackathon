














import logging as std_logging
from collections import OrderedDict
import re
from typing import (
    Dict,
    Callable,
    Mapping,
    MutableMapping,
    MutableSequence,
    Optional,
    Sequence,
    Tuple,
    Type,
    Union,
)

from google.cloud.aiplatform_v1 import gapic_version as package_version

from google.api_core.client_options import ClientOptions
from google.api_core import exceptions as core_exceptions
from google.api_core import gapic_v1
from google.api_core import retry_async as retries
from google.auth import credentials as ga_credentials  
from google.oauth2 import service_account  
import google.protobuf


try:
    OptionalRetry = Union[retries.AsyncRetry, gapic_v1.method._MethodDefault, None]
except AttributeError:  
    OptionalRetry = Union[retries.AsyncRetry, object, None]  

from google.api_core import operation  
from google.api_core import operation_async  
from google.cloud.aiplatform_v1.services.vizier_service import pagers
from google.cloud.aiplatform_v1.types import study
from google.cloud.aiplatform_v1.types import study as gca_study
from google.cloud.aiplatform_v1.types import vizier_service
from google.cloud.location import locations_pb2  
from google.iam.v1 import iam_policy_pb2  
from google.iam.v1 import policy_pb2  
from google.longrunning import operations_pb2  
from google.protobuf import timestamp_pb2  
from .transports.base import VizierServiceTransport, DEFAULT_CLIENT_INFO
from .transports.grpc_asyncio import VizierServiceGrpcAsyncIOTransport
from .client import VizierServiceClient

try:
    from google.api_core import client_logging  

    CLIENT_LOGGING_SUPPORTED = True  
except ImportError:  
    CLIENT_LOGGING_SUPPORTED = False

_LOGGER = std_logging.getLogger(__name__)


class VizierServiceAsyncClient:
    

    _client: VizierServiceClient

    
    
    DEFAULT_ENDPOINT = VizierServiceClient.DEFAULT_ENDPOINT
    DEFAULT_MTLS_ENDPOINT = VizierServiceClient.DEFAULT_MTLS_ENDPOINT
    _DEFAULT_ENDPOINT_TEMPLATE = VizierServiceClient._DEFAULT_ENDPOINT_TEMPLATE
    _DEFAULT_UNIVERSE = VizierServiceClient._DEFAULT_UNIVERSE

    custom_job_path = staticmethod(VizierServiceClient.custom_job_path)
    parse_custom_job_path = staticmethod(VizierServiceClient.parse_custom_job_path)
    study_path = staticmethod(VizierServiceClient.study_path)
    parse_study_path = staticmethod(VizierServiceClient.parse_study_path)
    trial_path = staticmethod(VizierServiceClient.trial_path)
    parse_trial_path = staticmethod(VizierServiceClient.parse_trial_path)
    common_billing_account_path = staticmethod(
        VizierServiceClient.common_billing_account_path
    )
    parse_common_billing_account_path = staticmethod(
        VizierServiceClient.parse_common_billing_account_path
    )
    common_folder_path = staticmethod(VizierServiceClient.common_folder_path)
    parse_common_folder_path = staticmethod(
        VizierServiceClient.parse_common_folder_path
    )
    common_organization_path = staticmethod(
        VizierServiceClient.common_organization_path
    )
    parse_common_organization_path = staticmethod(
        VizierServiceClient.parse_common_organization_path
    )
    common_project_path = staticmethod(VizierServiceClient.common_project_path)
    parse_common_project_path = staticmethod(
        VizierServiceClient.parse_common_project_path
    )
    common_location_path = staticmethod(VizierServiceClient.common_location_path)
    parse_common_location_path = staticmethod(
        VizierServiceClient.parse_common_location_path
    )

    @classmethod
    def from_service_account_info(cls, info: dict, *args, **kwargs):
        
        return VizierServiceClient.from_service_account_info.__func__(VizierServiceAsyncClient, info, *args, **kwargs)  

    @classmethod
    def from_service_account_file(cls, filename: str, *args, **kwargs):
        
        return VizierServiceClient.from_service_account_file.__func__(VizierServiceAsyncClient, filename, *args, **kwargs)  

    from_service_account_json = from_service_account_file

    @classmethod
    def get_mtls_endpoint_and_cert_source(
        cls, client_options: Optional[ClientOptions] = None
    ):
        
        return VizierServiceClient.get_mtls_endpoint_and_cert_source(client_options)  

    @property
    def transport(self) -> VizierServiceTransport:
        
        return self._client.transport

    @property
    def api_endpoint(self):
        
        return self._client._api_endpoint

    @property
    def universe_domain(self) -> str:
        
        return self._client._universe_domain

    get_transport_class = VizierServiceClient.get_transport_class

    def __init__(
        self,
        *,
        credentials: Optional[ga_credentials.Credentials] = None,
        transport: Optional[
            Union[str, VizierServiceTransport, Callable[..., VizierServiceTransport]]
        ] = "grpc_asyncio",
        client_options: Optional[ClientOptions] = None,
        client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
    ) -> None:
        
        self._client = VizierServiceClient(
            credentials=credentials,
            transport=transport,
            client_options=client_options,
            client_info=client_info,
        )

        if CLIENT_LOGGING_SUPPORTED and _LOGGER.isEnabledFor(
            std_logging.DEBUG
        ):  
            _LOGGER.debug(
                "Created client `google.cloud.aiplatform_v1.VizierServiceAsyncClient`.",
                extra={
                    "serviceName": "google.cloud.aiplatform.v1.VizierService",
                    "universeDomain": getattr(
                        self._client._transport._credentials, "universe_domain", ""
                    ),
                    "credentialsType": f"{type(self._client._transport._credentials).__module__}.{type(self._client._transport._credentials).__qualname__}",
                    "credentialsInfo": getattr(
                        self.transport._credentials, "get_cred_info", lambda: None
                    )(),
                }
                if hasattr(self._client._transport, "_credentials")
                else {
                    "serviceName": "google.cloud.aiplatform.v1.VizierService",
                    "credentialsType": None,
                },
            )

    async def create_study(
        self,
        request: Optional[Union[vizier_service.CreateStudyRequest, dict]] = None,
        *,
        parent: Optional[str] = None,
        study: Optional[gca_study.Study] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> gca_study.Study:
        r
        
        
        
        flattened_params = [parent, study]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, vizier_service.CreateStudyRequest):
            request = vizier_service.CreateStudyRequest(request)

        
        
        if parent is not None:
            request.parent = parent
        if study is not None:
            request.study = study

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.create_study
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("parent", request.parent),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def get_study(
        self,
        request: Optional[Union[vizier_service.GetStudyRequest, dict]] = None,
        *,
        name: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> study.Study:
        r
        
        
        
        flattened_params = [name]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, vizier_service.GetStudyRequest):
            request = vizier_service.GetStudyRequest(request)

        
        
        if name is not None:
            request.name = name

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.get_study
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def list_studies(
        self,
        request: Optional[Union[vizier_service.ListStudiesRequest, dict]] = None,
        *,
        parent: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> pagers.ListStudiesAsyncPager:
        r
        
        
        
        flattened_params = [parent]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, vizier_service.ListStudiesRequest):
            request = vizier_service.ListStudiesRequest(request)

        
        
        if parent is not None:
            request.parent = parent

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.list_studies
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("parent", request.parent),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        
        response = pagers.ListStudiesAsyncPager(
            method=rpc,
            request=request,
            response=response,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def delete_study(
        self,
        request: Optional[Union[vizier_service.DeleteStudyRequest, dict]] = None,
        *,
        name: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> None:
        r
        
        
        
        flattened_params = [name]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, vizier_service.DeleteStudyRequest):
            request = vizier_service.DeleteStudyRequest(request)

        
        
        if name is not None:
            request.name = name

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.delete_study
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

    async def lookup_study(
        self,
        request: Optional[Union[vizier_service.LookupStudyRequest, dict]] = None,
        *,
        parent: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> study.Study:
        r
        
        
        
        flattened_params = [parent]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, vizier_service.LookupStudyRequest):
            request = vizier_service.LookupStudyRequest(request)

        
        
        if parent is not None:
            request.parent = parent

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.lookup_study
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("parent", request.parent),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def suggest_trials(
        self,
        request: Optional[Union[vizier_service.SuggestTrialsRequest, dict]] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> operation_async.AsyncOperation:
        r
        
        
        
        if not isinstance(request, vizier_service.SuggestTrialsRequest):
            request = vizier_service.SuggestTrialsRequest(request)

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.suggest_trials
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("parent", request.parent),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        response = operation_async.from_gapic(
            response,
            self._client._transport.operations_client,
            vizier_service.SuggestTrialsResponse,
            metadata_type=vizier_service.SuggestTrialsMetadata,
        )

        
        return response

    async def create_trial(
        self,
        request: Optional[Union[vizier_service.CreateTrialRequest, dict]] = None,
        *,
        parent: Optional[str] = None,
        trial: Optional[study.Trial] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> study.Trial:
        r
        
        
        
        flattened_params = [parent, trial]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, vizier_service.CreateTrialRequest):
            request = vizier_service.CreateTrialRequest(request)

        
        
        if parent is not None:
            request.parent = parent
        if trial is not None:
            request.trial = trial

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.create_trial
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("parent", request.parent),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def get_trial(
        self,
        request: Optional[Union[vizier_service.GetTrialRequest, dict]] = None,
        *,
        name: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> study.Trial:
        r
        
        
        
        flattened_params = [name]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, vizier_service.GetTrialRequest):
            request = vizier_service.GetTrialRequest(request)

        
        
        if name is not None:
            request.name = name

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.get_trial
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def list_trials(
        self,
        request: Optional[Union[vizier_service.ListTrialsRequest, dict]] = None,
        *,
        parent: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> pagers.ListTrialsAsyncPager:
        r
        
        
        
        flattened_params = [parent]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, vizier_service.ListTrialsRequest):
            request = vizier_service.ListTrialsRequest(request)

        
        
        if parent is not None:
            request.parent = parent

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.list_trials
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("parent", request.parent),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        
        response = pagers.ListTrialsAsyncPager(
            method=rpc,
            request=request,
            response=response,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def add_trial_measurement(
        self,
        request: Optional[
            Union[vizier_service.AddTrialMeasurementRequest, dict]
        ] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> study.Trial:
        r
        
        
        
        if not isinstance(request, vizier_service.AddTrialMeasurementRequest):
            request = vizier_service.AddTrialMeasurementRequest(request)

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.add_trial_measurement
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata(
                (("trial_name", request.trial_name),)
            ),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def complete_trial(
        self,
        request: Optional[Union[vizier_service.CompleteTrialRequest, dict]] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> study.Trial:
        r
        
        
        
        if not isinstance(request, vizier_service.CompleteTrialRequest):
            request = vizier_service.CompleteTrialRequest(request)

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.complete_trial
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def delete_trial(
        self,
        request: Optional[Union[vizier_service.DeleteTrialRequest, dict]] = None,
        *,
        name: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> None:
        r
        
        
        
        flattened_params = [name]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, vizier_service.DeleteTrialRequest):
            request = vizier_service.DeleteTrialRequest(request)

        
        
        if name is not None:
            request.name = name

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.delete_trial
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

    async def check_trial_early_stopping_state(
        self,
        request: Optional[
            Union[vizier_service.CheckTrialEarlyStoppingStateRequest, dict]
        ] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> operation_async.AsyncOperation:
        r
        
        
        
        if not isinstance(request, vizier_service.CheckTrialEarlyStoppingStateRequest):
            request = vizier_service.CheckTrialEarlyStoppingStateRequest(request)

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.check_trial_early_stopping_state
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata(
                (("trial_name", request.trial_name),)
            ),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        response = operation_async.from_gapic(
            response,
            self._client._transport.operations_client,
            vizier_service.CheckTrialEarlyStoppingStateResponse,
            metadata_type=vizier_service.CheckTrialEarlyStoppingStateMetatdata,
        )

        
        return response

    async def stop_trial(
        self,
        request: Optional[Union[vizier_service.StopTrialRequest, dict]] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> study.Trial:
        r
        
        
        
        if not isinstance(request, vizier_service.StopTrialRequest):
            request = vizier_service.StopTrialRequest(request)

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.stop_trial
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def list_optimal_trials(
        self,
        request: Optional[Union[vizier_service.ListOptimalTrialsRequest, dict]] = None,
        *,
        parent: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> vizier_service.ListOptimalTrialsResponse:
        r
        
        
        
        flattened_params = [parent]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(request, vizier_service.ListOptimalTrialsRequest):
            request = vizier_service.ListOptimalTrialsRequest(request)

        
        
        if parent is not None:
            request.parent = parent

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.list_optimal_trials
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("parent", request.parent),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def list_operations(
        self,
        request: Optional[operations_pb2.ListOperationsRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> operations_pb2.ListOperationsResponse:
        r
        
        
        
        if isinstance(request, dict):
            request = operations_pb2.ListOperationsRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.list_operations]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def get_operation(
        self,
        request: Optional[operations_pb2.GetOperationRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> operations_pb2.Operation:
        r
        
        
        
        if isinstance(request, dict):
            request = operations_pb2.GetOperationRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.get_operation]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def delete_operation(
        self,
        request: Optional[operations_pb2.DeleteOperationRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> None:
        r
        
        
        
        if isinstance(request, dict):
            request = operations_pb2.DeleteOperationRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.delete_operation]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

    async def cancel_operation(
        self,
        request: Optional[operations_pb2.CancelOperationRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> None:
        r
        
        
        
        if isinstance(request, dict):
            request = operations_pb2.CancelOperationRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.cancel_operation]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

    async def wait_operation(
        self,
        request: Optional[operations_pb2.WaitOperationRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> operations_pb2.Operation:
        r
        
        
        
        if isinstance(request, dict):
            request = operations_pb2.WaitOperationRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.wait_operation]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def set_iam_policy(
        self,
        request: Optional[iam_policy_pb2.SetIamPolicyRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> policy_pb2.Policy:
        r
        

        
        
        if isinstance(request, dict):
            request = iam_policy_pb2.SetIamPolicyRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.set_iam_policy]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("resource", request.resource),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def get_iam_policy(
        self,
        request: Optional[iam_policy_pb2.GetIamPolicyRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> policy_pb2.Policy:
        r
        

        
        
        if isinstance(request, dict):
            request = iam_policy_pb2.GetIamPolicyRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.get_iam_policy]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("resource", request.resource),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def test_iam_permissions(
        self,
        request: Optional[iam_policy_pb2.TestIamPermissionsRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> iam_policy_pb2.TestIamPermissionsResponse:
        r
        

        
        
        if isinstance(request, dict):
            request = iam_policy_pb2.TestIamPermissionsRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[
            self._client._transport.test_iam_permissions
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("resource", request.resource),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def get_location(
        self,
        request: Optional[locations_pb2.GetLocationRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> locations_pb2.Location:
        r
        
        
        
        if isinstance(request, dict):
            request = locations_pb2.GetLocationRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.get_location]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def list_locations(
        self,
        request: Optional[locations_pb2.ListLocationsRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> locations_pb2.ListLocationsResponse:
        r
        
        
        
        if isinstance(request, dict):
            request = locations_pb2.ListLocationsRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.list_locations]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def __aenter__(self) -> "VizierServiceAsyncClient":
        return self

    async def __aexit__(self, exc_type, exc, tb):
        await self.transport.close()


DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo(
    gapic_version=package_version.__version__
)

if hasattr(DEFAULT_CLIENT_INFO, "protobuf_runtime_version"):  
    DEFAULT_CLIENT_INFO.protobuf_runtime_version = google.protobuf.__version__


__all__ = ("VizierServiceAsyncClient",)
