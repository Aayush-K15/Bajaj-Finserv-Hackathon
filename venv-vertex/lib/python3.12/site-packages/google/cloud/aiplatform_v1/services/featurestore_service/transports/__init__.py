














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import FeaturestoreServiceTransport
from .grpc import FeaturestoreServiceGrpcTransport
from .grpc_asyncio import FeaturestoreServiceGrpcAsyncIOTransport
from .rest import FeaturestoreServiceRestTransport
from .rest import FeaturestoreServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncFeaturestoreServiceRestTransport
    from .rest_asyncio import AsyncFeaturestoreServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncFeaturestoreServiceRestTransport",
        "AsyncFeaturestoreServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = (
    OrderedDict()
)  
_transport_registry["grpc"] = FeaturestoreServiceGrpcTransport
_transport_registry["grpc_asyncio"] = FeaturestoreServiceGrpcAsyncIOTransport
_transport_registry["rest"] = FeaturestoreServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncFeaturestoreServiceRestTransport

__all__ = (
    "FeaturestoreServiceTransport",
    "FeaturestoreServiceGrpcTransport",
    "FeaturestoreServiceGrpcAsyncIOTransport",
    "FeaturestoreServiceRestTransport",
    "FeaturestoreServiceRestInterceptor",
) + ASYNC_REST_CLASSES
