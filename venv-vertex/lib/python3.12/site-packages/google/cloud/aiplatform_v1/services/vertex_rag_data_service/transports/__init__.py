














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import VertexRagDataServiceTransport
from .grpc import VertexRagDataServiceGrpcTransport
from .grpc_asyncio import VertexRagDataServiceGrpcAsyncIOTransport
from .rest import VertexRagDataServiceRestTransport
from .rest import VertexRagDataServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncVertexRagDataServiceRestTransport
    from .rest_asyncio import AsyncVertexRagDataServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncVertexRagDataServiceRestTransport",
        "AsyncVertexRagDataServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = (
    OrderedDict()
)  
_transport_registry["grpc"] = VertexRagDataServiceGrpcTransport
_transport_registry["grpc_asyncio"] = VertexRagDataServiceGrpcAsyncIOTransport
_transport_registry["rest"] = VertexRagDataServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncVertexRagDataServiceRestTransport

__all__ = (
    "VertexRagDataServiceTransport",
    "VertexRagDataServiceGrpcTransport",
    "VertexRagDataServiceGrpcAsyncIOTransport",
    "VertexRagDataServiceRestTransport",
    "VertexRagDataServiceRestInterceptor",
) + ASYNC_REST_CLASSES
