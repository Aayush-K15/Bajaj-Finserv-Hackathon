














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import FeatureRegistryServiceTransport
from .grpc import FeatureRegistryServiceGrpcTransport
from .grpc_asyncio import FeatureRegistryServiceGrpcAsyncIOTransport
from .rest import FeatureRegistryServiceRestTransport
from .rest import FeatureRegistryServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncFeatureRegistryServiceRestTransport
    from .rest_asyncio import AsyncFeatureRegistryServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncFeatureRegistryServiceRestTransport",
        "AsyncFeatureRegistryServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = (
    OrderedDict()
)  
_transport_registry["grpc"] = FeatureRegistryServiceGrpcTransport
_transport_registry["grpc_asyncio"] = FeatureRegistryServiceGrpcAsyncIOTransport
_transport_registry["rest"] = FeatureRegistryServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncFeatureRegistryServiceRestTransport

__all__ = (
    "FeatureRegistryServiceTransport",
    "FeatureRegistryServiceGrpcTransport",
    "FeatureRegistryServiceGrpcAsyncIOTransport",
    "FeatureRegistryServiceRestTransport",
    "FeatureRegistryServiceRestInterceptor",
) + ASYNC_REST_CLASSES
