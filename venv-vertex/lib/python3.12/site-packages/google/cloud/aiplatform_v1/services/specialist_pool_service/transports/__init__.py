














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import SpecialistPoolServiceTransport
from .grpc import SpecialistPoolServiceGrpcTransport
from .grpc_asyncio import SpecialistPoolServiceGrpcAsyncIOTransport
from .rest import SpecialistPoolServiceRestTransport
from .rest import SpecialistPoolServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncSpecialistPoolServiceRestTransport
    from .rest_asyncio import AsyncSpecialistPoolServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncSpecialistPoolServiceRestTransport",
        "AsyncSpecialistPoolServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = (
    OrderedDict()
)  
_transport_registry["grpc"] = SpecialistPoolServiceGrpcTransport
_transport_registry["grpc_asyncio"] = SpecialistPoolServiceGrpcAsyncIOTransport
_transport_registry["rest"] = SpecialistPoolServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncSpecialistPoolServiceRestTransport

__all__ = (
    "SpecialistPoolServiceTransport",
    "SpecialistPoolServiceGrpcTransport",
    "SpecialistPoolServiceGrpcAsyncIOTransport",
    "SpecialistPoolServiceRestTransport",
    "SpecialistPoolServiceRestInterceptor",
) + ASYNC_REST_CLASSES
