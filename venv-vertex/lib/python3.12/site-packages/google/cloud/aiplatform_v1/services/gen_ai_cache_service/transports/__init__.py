














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import GenAiCacheServiceTransport
from .grpc import GenAiCacheServiceGrpcTransport
from .grpc_asyncio import GenAiCacheServiceGrpcAsyncIOTransport
from .rest import GenAiCacheServiceRestTransport
from .rest import GenAiCacheServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncGenAiCacheServiceRestTransport
    from .rest_asyncio import AsyncGenAiCacheServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncGenAiCacheServiceRestTransport",
        "AsyncGenAiCacheServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = GenAiCacheServiceGrpcTransport
_transport_registry["grpc_asyncio"] = GenAiCacheServiceGrpcAsyncIOTransport
_transport_registry["rest"] = GenAiCacheServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncGenAiCacheServiceRestTransport

__all__ = (
    "GenAiCacheServiceTransport",
    "GenAiCacheServiceGrpcTransport",
    "GenAiCacheServiceGrpcAsyncIOTransport",
    "GenAiCacheServiceRestTransport",
    "GenAiCacheServiceRestInterceptor",
) + ASYNC_REST_CLASSES
