














import logging as std_logging
from collections import OrderedDict
import re
from typing import (
    Dict,
    Callable,
    Mapping,
    MutableMapping,
    MutableSequence,
    Optional,
    AsyncIterable,
    Awaitable,
    Sequence,
    Tuple,
    Type,
    Union,
)

from google.cloud.aiplatform_v1 import gapic_version as package_version

from google.api_core.client_options import ClientOptions
from google.api_core import exceptions as core_exceptions
from google.api_core import gapic_v1
from google.api_core import retry_async as retries
from google.auth import credentials as ga_credentials  
from google.oauth2 import service_account  
import google.protobuf


try:
    OptionalRetry = Union[retries.AsyncRetry, gapic_v1.method._MethodDefault, None]
except AttributeError:  
    OptionalRetry = Union[retries.AsyncRetry, object, None]  

from google.cloud.aiplatform_v1.types import featurestore_online_service
from google.cloud.location import locations_pb2  
from google.iam.v1 import iam_policy_pb2  
from google.iam.v1 import policy_pb2  
from google.longrunning import operations_pb2  
from .transports.base import (
    FeaturestoreOnlineServingServiceTransport,
    DEFAULT_CLIENT_INFO,
)
from .transports.grpc_asyncio import (
    FeaturestoreOnlineServingServiceGrpcAsyncIOTransport,
)
from .client import FeaturestoreOnlineServingServiceClient

try:
    from google.api_core import client_logging  

    CLIENT_LOGGING_SUPPORTED = True  
except ImportError:  
    CLIENT_LOGGING_SUPPORTED = False

_LOGGER = std_logging.getLogger(__name__)


class FeaturestoreOnlineServingServiceAsyncClient:
    

    _client: FeaturestoreOnlineServingServiceClient

    
    
    DEFAULT_ENDPOINT = FeaturestoreOnlineServingServiceClient.DEFAULT_ENDPOINT
    DEFAULT_MTLS_ENDPOINT = FeaturestoreOnlineServingServiceClient.DEFAULT_MTLS_ENDPOINT
    _DEFAULT_ENDPOINT_TEMPLATE = (
        FeaturestoreOnlineServingServiceClient._DEFAULT_ENDPOINT_TEMPLATE
    )
    _DEFAULT_UNIVERSE = FeaturestoreOnlineServingServiceClient._DEFAULT_UNIVERSE

    entity_type_path = staticmethod(
        FeaturestoreOnlineServingServiceClient.entity_type_path
    )
    parse_entity_type_path = staticmethod(
        FeaturestoreOnlineServingServiceClient.parse_entity_type_path
    )
    common_billing_account_path = staticmethod(
        FeaturestoreOnlineServingServiceClient.common_billing_account_path
    )
    parse_common_billing_account_path = staticmethod(
        FeaturestoreOnlineServingServiceClient.parse_common_billing_account_path
    )
    common_folder_path = staticmethod(
        FeaturestoreOnlineServingServiceClient.common_folder_path
    )
    parse_common_folder_path = staticmethod(
        FeaturestoreOnlineServingServiceClient.parse_common_folder_path
    )
    common_organization_path = staticmethod(
        FeaturestoreOnlineServingServiceClient.common_organization_path
    )
    parse_common_organization_path = staticmethod(
        FeaturestoreOnlineServingServiceClient.parse_common_organization_path
    )
    common_project_path = staticmethod(
        FeaturestoreOnlineServingServiceClient.common_project_path
    )
    parse_common_project_path = staticmethod(
        FeaturestoreOnlineServingServiceClient.parse_common_project_path
    )
    common_location_path = staticmethod(
        FeaturestoreOnlineServingServiceClient.common_location_path
    )
    parse_common_location_path = staticmethod(
        FeaturestoreOnlineServingServiceClient.parse_common_location_path
    )

    @classmethod
    def from_service_account_info(cls, info: dict, *args, **kwargs):
        
        return FeaturestoreOnlineServingServiceClient.from_service_account_info.__func__(FeaturestoreOnlineServingServiceAsyncClient, info, *args, **kwargs)  

    @classmethod
    def from_service_account_file(cls, filename: str, *args, **kwargs):
        
        return FeaturestoreOnlineServingServiceClient.from_service_account_file.__func__(FeaturestoreOnlineServingServiceAsyncClient, filename, *args, **kwargs)  

    from_service_account_json = from_service_account_file

    @classmethod
    def get_mtls_endpoint_and_cert_source(
        cls, client_options: Optional[ClientOptions] = None
    ):
        
        return FeaturestoreOnlineServingServiceClient.get_mtls_endpoint_and_cert_source(client_options)  

    @property
    def transport(self) -> FeaturestoreOnlineServingServiceTransport:
        
        return self._client.transport

    @property
    def api_endpoint(self):
        
        return self._client._api_endpoint

    @property
    def universe_domain(self) -> str:
        
        return self._client._universe_domain

    get_transport_class = FeaturestoreOnlineServingServiceClient.get_transport_class

    def __init__(
        self,
        *,
        credentials: Optional[ga_credentials.Credentials] = None,
        transport: Optional[
            Union[
                str,
                FeaturestoreOnlineServingServiceTransport,
                Callable[..., FeaturestoreOnlineServingServiceTransport],
            ]
        ] = "grpc_asyncio",
        client_options: Optional[ClientOptions] = None,
        client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
    ) -> None:
        
        self._client = FeaturestoreOnlineServingServiceClient(
            credentials=credentials,
            transport=transport,
            client_options=client_options,
            client_info=client_info,
        )

        if CLIENT_LOGGING_SUPPORTED and _LOGGER.isEnabledFor(
            std_logging.DEBUG
        ):  
            _LOGGER.debug(
                "Created client `google.cloud.aiplatform_v1.FeaturestoreOnlineServingServiceAsyncClient`.",
                extra={
                    "serviceName": "google.cloud.aiplatform.v1.FeaturestoreOnlineServingService",
                    "universeDomain": getattr(
                        self._client._transport._credentials, "universe_domain", ""
                    ),
                    "credentialsType": f"{type(self._client._transport._credentials).__module__}.{type(self._client._transport._credentials).__qualname__}",
                    "credentialsInfo": getattr(
                        self.transport._credentials, "get_cred_info", lambda: None
                    )(),
                }
                if hasattr(self._client._transport, "_credentials")
                else {
                    "serviceName": "google.cloud.aiplatform.v1.FeaturestoreOnlineServingService",
                    "credentialsType": None,
                },
            )

    async def read_feature_values(
        self,
        request: Optional[
            Union[featurestore_online_service.ReadFeatureValuesRequest, dict]
        ] = None,
        *,
        entity_type: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> featurestore_online_service.ReadFeatureValuesResponse:
        r
        
        
        
        flattened_params = [entity_type]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(
            request, featurestore_online_service.ReadFeatureValuesRequest
        ):
            request = featurestore_online_service.ReadFeatureValuesRequest(request)

        
        
        if entity_type is not None:
            request.entity_type = entity_type

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.read_feature_values
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata(
                (("entity_type", request.entity_type),)
            ),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    def streaming_read_feature_values(
        self,
        request: Optional[
            Union[featurestore_online_service.StreamingReadFeatureValuesRequest, dict]
        ] = None,
        *,
        entity_type: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> Awaitable[
        AsyncIterable[featurestore_online_service.ReadFeatureValuesResponse]
    ]:
        r
        
        
        
        flattened_params = [entity_type]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(
            request, featurestore_online_service.StreamingReadFeatureValuesRequest
        ):
            request = featurestore_online_service.StreamingReadFeatureValuesRequest(
                request
            )

        
        
        if entity_type is not None:
            request.entity_type = entity_type

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.streaming_read_feature_values
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata(
                (("entity_type", request.entity_type),)
            ),
        )

        
        self._client._validate_universe_domain()

        
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def write_feature_values(
        self,
        request: Optional[
            Union[featurestore_online_service.WriteFeatureValuesRequest, dict]
        ] = None,
        *,
        entity_type: Optional[str] = None,
        payloads: Optional[
            MutableSequence[featurestore_online_service.WriteFeatureValuesPayload]
        ] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> featurestore_online_service.WriteFeatureValuesResponse:
        r
        
        
        
        flattened_params = [entity_type, payloads]
        has_flattened_params = (
            len([param for param in flattened_params if param is not None]) > 0
        )
        if request is not None and has_flattened_params:
            raise ValueError(
                "If the `request` argument is set, then none of "
                "the individual field arguments should be set."
            )

        
        
        if not isinstance(
            request, featurestore_online_service.WriteFeatureValuesRequest
        ):
            request = featurestore_online_service.WriteFeatureValuesRequest(request)

        
        
        if entity_type is not None:
            request.entity_type = entity_type
        if payloads:
            request.payloads.extend(payloads)

        
        
        rpc = self._client._transport._wrapped_methods[
            self._client._transport.write_feature_values
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata(
                (("entity_type", request.entity_type),)
            ),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def list_operations(
        self,
        request: Optional[operations_pb2.ListOperationsRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> operations_pb2.ListOperationsResponse:
        r
        
        
        
        if isinstance(request, dict):
            request = operations_pb2.ListOperationsRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.list_operations]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def get_operation(
        self,
        request: Optional[operations_pb2.GetOperationRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> operations_pb2.Operation:
        r
        
        
        
        if isinstance(request, dict):
            request = operations_pb2.GetOperationRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.get_operation]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def delete_operation(
        self,
        request: Optional[operations_pb2.DeleteOperationRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> None:
        r
        
        
        
        if isinstance(request, dict):
            request = operations_pb2.DeleteOperationRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.delete_operation]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

    async def cancel_operation(
        self,
        request: Optional[operations_pb2.CancelOperationRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> None:
        r
        
        
        
        if isinstance(request, dict):
            request = operations_pb2.CancelOperationRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.cancel_operation]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

    async def wait_operation(
        self,
        request: Optional[operations_pb2.WaitOperationRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> operations_pb2.Operation:
        r
        
        
        
        if isinstance(request, dict):
            request = operations_pb2.WaitOperationRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.wait_operation]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def set_iam_policy(
        self,
        request: Optional[iam_policy_pb2.SetIamPolicyRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> policy_pb2.Policy:
        r
        

        
        
        if isinstance(request, dict):
            request = iam_policy_pb2.SetIamPolicyRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.set_iam_policy]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("resource", request.resource),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def get_iam_policy(
        self,
        request: Optional[iam_policy_pb2.GetIamPolicyRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> policy_pb2.Policy:
        r
        

        
        
        if isinstance(request, dict):
            request = iam_policy_pb2.GetIamPolicyRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.get_iam_policy]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("resource", request.resource),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def test_iam_permissions(
        self,
        request: Optional[iam_policy_pb2.TestIamPermissionsRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> iam_policy_pb2.TestIamPermissionsResponse:
        r
        

        
        
        if isinstance(request, dict):
            request = iam_policy_pb2.TestIamPermissionsRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[
            self._client._transport.test_iam_permissions
        ]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("resource", request.resource),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def get_location(
        self,
        request: Optional[locations_pb2.GetLocationRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> locations_pb2.Location:
        r
        
        
        
        if isinstance(request, dict):
            request = locations_pb2.GetLocationRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.get_location]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def list_locations(
        self,
        request: Optional[locations_pb2.ListLocationsRequest] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Union[float, object] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, Union[str, bytes]]] = (),
    ) -> locations_pb2.ListLocationsResponse:
        r
        
        
        
        if isinstance(request, dict):
            request = locations_pb2.ListLocationsRequest(**request)

        
        
        rpc = self.transport._wrapped_methods[self._client._transport.list_locations]

        
        
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        self._client._validate_universe_domain()

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def __aenter__(self) -> "FeaturestoreOnlineServingServiceAsyncClient":
        return self

    async def __aexit__(self, exc_type, exc, tb):
        await self.transport.close()


DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo(
    gapic_version=package_version.__version__
)

if hasattr(DEFAULT_CLIENT_INFO, "protobuf_runtime_version"):  
    DEFAULT_CLIENT_INFO.protobuf_runtime_version = google.protobuf.__version__


__all__ = ("FeaturestoreOnlineServingServiceAsyncClient",)
