














from collections import OrderedDict
from typing import Dict, Type, Tuple

from .base import MetadataServiceTransport
from .grpc import MetadataServiceGrpcTransport
from .grpc_asyncio import MetadataServiceGrpcAsyncIOTransport
from .rest import MetadataServiceRestTransport
from .rest import MetadataServiceRestInterceptor

ASYNC_REST_CLASSES: Tuple[str, ...]
try:
    from .rest_asyncio import AsyncMetadataServiceRestTransport
    from .rest_asyncio import AsyncMetadataServiceRestInterceptor

    ASYNC_REST_CLASSES = (
        "AsyncMetadataServiceRestTransport",
        "AsyncMetadataServiceRestInterceptor",
    )
    HAS_REST_ASYNC = True
except ImportError:  
    ASYNC_REST_CLASSES = ()
    HAS_REST_ASYNC = False



_transport_registry = OrderedDict()  
_transport_registry["grpc"] = MetadataServiceGrpcTransport
_transport_registry["grpc_asyncio"] = MetadataServiceGrpcAsyncIOTransport
_transport_registry["rest"] = MetadataServiceRestTransport
if HAS_REST_ASYNC:  
    _transport_registry["rest_asyncio"] = AsyncMetadataServiceRestTransport

__all__ = (
    "MetadataServiceTransport",
    "MetadataServiceGrpcTransport",
    "MetadataServiceGrpcAsyncIOTransport",
    "MetadataServiceRestTransport",
    "MetadataServiceRestInterceptor",
) + ASYNC_REST_CLASSES
