















import http.client as http_client
import json
import os

from google.auth import environment_vars
from google.auth import exceptions
from google.auth import jwt
from google.auth.transport import requests
from google.oauth2 import id_token as sync_id_token


async def _fetch_certs(request, certs_url):
    
    response = await request(certs_url, method="GET")

    if response.status != http_client.OK:
        raise exceptions.TransportError(
            "Could not fetch certificates at {}".format(certs_url)
        )

    data = await response.content()

    return json.loads(data)


async def verify_token(
    id_token,
    request,
    audience=None,
    certs_url=sync_id_token._GOOGLE_OAUTH2_CERTS_URL,
    clock_skew_in_seconds=0,
):
    
    certs = await _fetch_certs(request, certs_url)

    return jwt.decode(
        id_token,
        certs=certs,
        audience=audience,
        clock_skew_in_seconds=clock_skew_in_seconds,
    )


async def verify_oauth2_token(
    id_token, request, audience=None, clock_skew_in_seconds=0
):
    
    idinfo = await verify_token(
        id_token,
        request,
        audience=audience,
        certs_url=sync_id_token._GOOGLE_OAUTH2_CERTS_URL,
        clock_skew_in_seconds=clock_skew_in_seconds,
    )

    if idinfo["iss"] not in sync_id_token._GOOGLE_ISSUERS:
        raise exceptions.GoogleAuthError(
            "Wrong issuer. 'iss' should be one of the following: {}".format(
                sync_id_token._GOOGLE_ISSUERS
            )
        )

    return idinfo


async def verify_firebase_token(
    id_token, request, audience=None, clock_skew_in_seconds=0
):
    
    return await verify_token(
        id_token,
        request,
        audience=audience,
        certs_url=sync_id_token._GOOGLE_APIS_CERTS_URL,
        clock_skew_in_seconds=clock_skew_in_seconds,
    )


async def fetch_id_token(request, audience):
    
    
    
    credentials_filename = os.environ.get(environment_vars.CREDENTIALS)
    if credentials_filename:
        if not (
            os.path.exists(credentials_filename)
            and os.path.isfile(credentials_filename)
        ):
            raise exceptions.DefaultCredentialsError(
                "GOOGLE_APPLICATION_CREDENTIALS path is either not found or invalid."
            )

        try:
            with open(credentials_filename, "r") as f:
                from google.oauth2 import _service_account_async as service_account

                info = json.load(f)
                if info.get("type") == "service_account":
                    credentials = service_account.IDTokenCredentials.from_service_account_info(
                        info, target_audience=audience
                    )
                    await credentials.refresh(request)
                    return credentials.token
        except ValueError as caught_exc:
            new_exc = exceptions.DefaultCredentialsError(
                "GOOGLE_APPLICATION_CREDENTIALS is not valid service account credentials.",
                caught_exc,
            )
            raise new_exc from caught_exc

    
    
    try:
        from google.auth import compute_engine
        from google.auth.compute_engine import _metadata

        request_new = requests.Request()
        if _metadata.ping(request_new):
            credentials = compute_engine.IDTokenCredentials(
                request_new, audience, use_metadata_identity_endpoint=True
            )
            credentials.refresh(request_new)
            return credentials.token
    except (ImportError, exceptions.TransportError):
        pass

    raise exceptions.DefaultCredentialsError(
        "Neither metadata server or valid service account credentials are found."
    )
