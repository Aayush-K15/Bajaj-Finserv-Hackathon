















import http.client as http_client
import json
import os

from google.auth import environment_vars
from google.auth import exceptions
from google.auth import jwt




_GOOGLE_OAUTH2_CERTS_URL = "https://www.googleapis.com/oauth2/v1/certs"



_GOOGLE_APIS_CERTS_URL = (
    "https://www.googleapis.com/robot/v1/metadata/x509"
    "/securetoken@system.gserviceaccount.com"
)

_GOOGLE_ISSUERS = ["accounts.google.com", "https://accounts.google.com"]


def _fetch_certs(request, certs_url):
    
    response = request(certs_url, method="GET")

    if response.status != http_client.OK:
        raise exceptions.TransportError(
            "Could not fetch certificates at {}".format(certs_url)
        )

    return json.loads(response.data.decode("utf-8"))


def verify_token(
    id_token,
    request,
    audience=None,
    certs_url=_GOOGLE_OAUTH2_CERTS_URL,
    clock_skew_in_seconds=0,
):
    
    certs = _fetch_certs(request, certs_url)

    if "keys" in certs:
        try:
            import jwt as jwt_lib  
        except ImportError as caught_exc:  
            raise ImportError(
                "The pyjwt library is not installed, please install the pyjwt package to use the jwk certs format."
            ) from caught_exc
        jwks_client = jwt_lib.PyJWKClient(certs_url)
        signing_key = jwks_client.get_signing_key_from_jwt(id_token)
        return jwt_lib.decode(
            id_token,
            signing_key.key,
            algorithms=[signing_key.algorithm_name],
            audience=audience,
        )
    else:
        return jwt.decode(
            id_token,
            certs=certs,
            audience=audience,
            clock_skew_in_seconds=clock_skew_in_seconds,
        )


def verify_oauth2_token(id_token, request, audience=None, clock_skew_in_seconds=0):
    
    idinfo = verify_token(
        id_token,
        request,
        audience=audience,
        certs_url=_GOOGLE_OAUTH2_CERTS_URL,
        clock_skew_in_seconds=clock_skew_in_seconds,
    )

    if idinfo["iss"] not in _GOOGLE_ISSUERS:
        raise exceptions.GoogleAuthError(
            "Wrong issuer. 'iss' should be one of the following: {}".format(
                _GOOGLE_ISSUERS
            )
        )

    return idinfo


def verify_firebase_token(id_token, request, audience=None, clock_skew_in_seconds=0):
    
    return verify_token(
        id_token,
        request,
        audience=audience,
        certs_url=_GOOGLE_APIS_CERTS_URL,
        clock_skew_in_seconds=clock_skew_in_seconds,
    )


def fetch_id_token_credentials(audience, request=None):
    
    
    
    credentials_filename = os.environ.get(environment_vars.CREDENTIALS)
    if credentials_filename:
        if not (
            os.path.exists(credentials_filename)
            and os.path.isfile(credentials_filename)
        ):
            raise exceptions.DefaultCredentialsError(
                "GOOGLE_APPLICATION_CREDENTIALS path is either not found or invalid."
            )

        try:
            with open(credentials_filename, "r") as f:
                from google.oauth2 import service_account

                info = json.load(f)
                if info.get("type") == "service_account":
                    return service_account.IDTokenCredentials.from_service_account_info(
                        info, target_audience=audience
                    )
                elif info.get("type") == "impersonated_service_account":
                    from google.auth import impersonated_credentials

                    target_credentials = impersonated_credentials.Credentials.from_impersonated_service_account_info(
                        info
                    )

                    return impersonated_credentials.IDTokenCredentials(
                        target_credentials=target_credentials,
                        target_audience=audience,
                        include_email=True,
                    )
        except ValueError as caught_exc:
            new_exc = exceptions.DefaultCredentialsError(
                "GOOGLE_APPLICATION_CREDENTIALS is not valid service account credentials.",
                caught_exc,
            )
            raise new_exc from caught_exc

    
    
    try:
        from google.auth import compute_engine
        from google.auth.compute_engine import _metadata

        
        if not request:
            import google.auth.transport.requests

            request = google.auth.transport.requests.Request()

        if _metadata.ping(request):
            return compute_engine.IDTokenCredentials(
                request, audience, use_metadata_identity_endpoint=True
            )
    except (ImportError, exceptions.TransportError):
        pass

    raise exceptions.DefaultCredentialsError(
        "Neither metadata server or valid service account credentials are found."
    )


def fetch_id_token(request, audience):
    
    id_token_credentials = fetch_id_token_credentials(audience, request=request)
    id_token_credentials.refresh(request)
    return id_token_credentials.token
