















from __future__ import absolute_import
from __future__ import unicode_literals

import http.client
from typing import Optional, Dict
from typing import Union
import warnings

from google.rpc import error_details_pb2


def _warn_could_not_import_grpcio_status():
    warnings.warn(
        "Please install grpcio-status to obtain helpful grpc error messages.",
        ImportWarning,
    )  


try:
    import grpc

    try:
        from grpc_status import rpc_status
    except ImportError:  
        _warn_could_not_import_grpcio_status()
        rpc_status = None
except ImportError:  
    grpc = None



_HTTP_CODE_TO_EXCEPTION: Dict[int, Exception] = {}
_GRPC_CODE_TO_EXCEPTION: Dict[int, Exception] = {}




_INT_TO_GRPC_CODE = {}
if grpc is not None:  
    for x in grpc.StatusCode:
        _INT_TO_GRPC_CODE[x.value[0]] = x


class GoogleAPIError(Exception):
    

    pass


class DuplicateCredentialArgs(GoogleAPIError):
    

    pass


class RetryError(GoogleAPIError):
    

    def __init__(self, message, cause):
        super(RetryError, self).__init__(message)
        self.message = message
        self._cause = cause

    @property
    def cause(self):
        
        return self._cause

    def __str__(self):
        return "{}, last exception: {}".format(self.message, self.cause)


class _GoogleAPICallErrorMeta(type):
    

    def __new__(mcs, name, bases, class_dict):
        cls = type.__new__(mcs, name, bases, class_dict)
        if cls.code is not None:
            _HTTP_CODE_TO_EXCEPTION.setdefault(cls.code, cls)
        if cls.grpc_status_code is not None:
            _GRPC_CODE_TO_EXCEPTION.setdefault(cls.grpc_status_code, cls)
        return cls


class GoogleAPICallError(GoogleAPIError, metaclass=_GoogleAPICallErrorMeta):
    

    code: Union[int, None] = None
    

    grpc_status_code = None
    

    def __init__(self, message, errors=(), details=(), response=None, error_info=None):
        super(GoogleAPICallError, self).__init__(message)
        self.message = message
        
        self._errors = errors
        self._details = details
        self._response = response
        self._error_info = error_info

    def __str__(self):
        error_msg = "{} {}".format(self.code, self.message)
        if self.details:
            error_msg = "{} {}".format(error_msg, self.details)
        
        
        else:
            if self.errors:
                errors = [
                    f"{error.code}: {error.message}"
                    for error in self.errors
                    if hasattr(error, "code") and hasattr(error, "message")
                ]
                if errors:
                    error_msg = "{} {}".format(error_msg, "\n".join(errors))
        return error_msg

    @property
    def reason(self):
        
        return self._error_info.reason if self._error_info else None

    @property
    def domain(self):
        
        return self._error_info.domain if self._error_info else None

    @property
    def metadata(self):
        
        return self._error_info.metadata if self._error_info else None

    @property
    def errors(self):
        
        return list(self._errors)

    @property
    def details(self):
        
        return list(self._details)

    @property
    def response(self):
        
        return self._response


class Redirection(GoogleAPICallError):
    


class MovedPermanently(Redirection):
    

    code = http.client.MOVED_PERMANENTLY


class NotModified(Redirection):
    

    code = http.client.NOT_MODIFIED


class TemporaryRedirect(Redirection):
    

    code = http.client.TEMPORARY_REDIRECT


class ResumeIncomplete(Redirection):
    

    code = 308


class ClientError(GoogleAPICallError):
    


class BadRequest(ClientError):
    

    code = http.client.BAD_REQUEST


class InvalidArgument(BadRequest):
    

    grpc_status_code = grpc.StatusCode.INVALID_ARGUMENT if grpc is not None else None


class FailedPrecondition(BadRequest):
    

    grpc_status_code = grpc.StatusCode.FAILED_PRECONDITION if grpc is not None else None


class OutOfRange(BadRequest):
    

    grpc_status_code = grpc.StatusCode.OUT_OF_RANGE if grpc is not None else None


class Unauthorized(ClientError):
    

    code = http.client.UNAUTHORIZED


class Unauthenticated(Unauthorized):
    

    grpc_status_code = grpc.StatusCode.UNAUTHENTICATED if grpc is not None else None


class Forbidden(ClientError):
    

    code = http.client.FORBIDDEN


class PermissionDenied(Forbidden):
    

    grpc_status_code = grpc.StatusCode.PERMISSION_DENIED if grpc is not None else None


class NotFound(ClientError):
    

    code = http.client.NOT_FOUND
    grpc_status_code = grpc.StatusCode.NOT_FOUND if grpc is not None else None


class MethodNotAllowed(ClientError):
    

    code = http.client.METHOD_NOT_ALLOWED


class Conflict(ClientError):
    

    code = http.client.CONFLICT


class AlreadyExists(Conflict):
    

    grpc_status_code = grpc.StatusCode.ALREADY_EXISTS if grpc is not None else None


class Aborted(Conflict):
    

    grpc_status_code = grpc.StatusCode.ABORTED if grpc is not None else None


class LengthRequired(ClientError):
    

    code = http.client.LENGTH_REQUIRED


class PreconditionFailed(ClientError):
    

    code = http.client.PRECONDITION_FAILED


class RequestRangeNotSatisfiable(ClientError):
    

    code = http.client.REQUESTED_RANGE_NOT_SATISFIABLE


class TooManyRequests(ClientError):
    

    code = http.client.TOO_MANY_REQUESTS


class ResourceExhausted(TooManyRequests):
    

    grpc_status_code = grpc.StatusCode.RESOURCE_EXHAUSTED if grpc is not None else None


class Cancelled(ClientError):
    

    
    
    code = 499
    grpc_status_code = grpc.StatusCode.CANCELLED if grpc is not None else None


class ServerError(GoogleAPICallError):
    


class InternalServerError(ServerError):
    

    code = http.client.INTERNAL_SERVER_ERROR
    grpc_status_code = grpc.StatusCode.INTERNAL if grpc is not None else None


class Unknown(ServerError):
    

    grpc_status_code = grpc.StatusCode.UNKNOWN if grpc is not None else None


class DataLoss(ServerError):
    

    grpc_status_code = grpc.StatusCode.DATA_LOSS if grpc is not None else None


class MethodNotImplemented(ServerError):
    

    code = http.client.NOT_IMPLEMENTED
    grpc_status_code = grpc.StatusCode.UNIMPLEMENTED if grpc is not None else None


class BadGateway(ServerError):
    

    code = http.client.BAD_GATEWAY


class ServiceUnavailable(ServerError):
    

    code = http.client.SERVICE_UNAVAILABLE
    grpc_status_code = grpc.StatusCode.UNAVAILABLE if grpc is not None else None


class GatewayTimeout(ServerError):
    

    code = http.client.GATEWAY_TIMEOUT


class DeadlineExceeded(GatewayTimeout):
    

    grpc_status_code = grpc.StatusCode.DEADLINE_EXCEEDED if grpc is not None else None


class AsyncRestUnsupportedParameterError(NotImplementedError):
    

    pass


def exception_class_for_http_status(status_code):
    
    return _HTTP_CODE_TO_EXCEPTION.get(status_code, GoogleAPICallError)


def from_http_status(status_code, message, **kwargs):
    
    error_class = exception_class_for_http_status(status_code)
    error = error_class(message, **kwargs)

    if error.code is None:
        error.code = status_code

    return error


def _format_rest_error_message(error, method, url):
    method = method.upper() if method else None
    message = "{method} {url}: {error}".format(
        method=method,
        url=url,
        error=error,
    )
    return message






def format_http_response_error(
    response, method: str, url: str, payload: Optional[Dict] = None
):
    
    payload = {} if not payload else payload
    error_message = payload.get("error", {}).get("message", "unknown error")
    errors = payload.get("error", {}).get("errors", ())
    
    details = payload.get("error", {}).get("details", ())
    error_info_list = list(
        filter(
            lambda detail: detail.get("@type", "")
            == "type.googleapis.com/google.rpc.ErrorInfo",
            details,
        )
    )
    error_info = error_info_list[0] if error_info_list else None
    message = _format_rest_error_message(error_message, method, url)

    exception = from_http_status(
        response.status_code,
        message,
        errors=errors,
        details=details,
        response=response,
        error_info=error_info,
    )
    return exception


def from_http_response(response):
    
    try:
        payload = response.json()
    except ValueError:
        payload = {"error": {"message": response.text or "unknown error"}}
    return format_http_response_error(
        response, response.request.method, response.request.url, payload
    )


def exception_class_for_grpc_status(status_code):
    
    return _GRPC_CODE_TO_EXCEPTION.get(status_code, GoogleAPICallError)


def from_grpc_status(status_code, message, **kwargs):
    

    if isinstance(status_code, int):
        status_code = _INT_TO_GRPC_CODE.get(status_code, status_code)

    error_class = exception_class_for_grpc_status(status_code)
    error = error_class(message, **kwargs)

    if error.grpc_status_code is None:
        error.grpc_status_code = status_code

    return error


def _is_informative_grpc_error(rpc_exc):
    return hasattr(rpc_exc, "code") and hasattr(rpc_exc, "details")


def _parse_grpc_error_details(rpc_exc):
    if not rpc_status:  
        _warn_could_not_import_grpcio_status()
        return [], None
    try:
        status = rpc_status.from_call(rpc_exc)
    except NotImplementedError:  
        return [], None

    if not status:
        return [], None

    possible_errors = [
        error_details_pb2.BadRequest,
        error_details_pb2.PreconditionFailure,
        error_details_pb2.QuotaFailure,
        error_details_pb2.ErrorInfo,
        error_details_pb2.RetryInfo,
        error_details_pb2.ResourceInfo,
        error_details_pb2.RequestInfo,
        error_details_pb2.DebugInfo,
        error_details_pb2.Help,
        error_details_pb2.LocalizedMessage,
    ]
    error_info = None
    error_details = []
    for detail in status.details:
        matched_detail_cls = list(
            filter(lambda x: detail.Is(x.DESCRIPTOR), possible_errors)
        )
        
        if len(matched_detail_cls) == 0:
            info = detail
        else:
            info = matched_detail_cls[0]()
            detail.Unpack(info)
        error_details.append(info)
        if isinstance(info, error_details_pb2.ErrorInfo):
            error_info = info
    return error_details, error_info


def from_grpc_error(rpc_exc):
    
    
    
    if (
        grpc is not None and isinstance(rpc_exc, grpc.Call)
    ) or _is_informative_grpc_error(rpc_exc):
        details, err_info = _parse_grpc_error_details(rpc_exc)
        return from_grpc_status(
            rpc_exc.code(),
            rpc_exc.details(),
            errors=(rpc_exc,),
            details=details,
            response=rpc_exc,
            error_info=err_info,
        )
    else:
        return GoogleAPICallError(str(rpc_exc), errors=(rpc_exc,), response=rpc_exc)
