















from typing import Union

import proto

try:
    import google.auth.aio.transport
except ImportError as e:  
    raise ImportError(
        "`google-api-core[async_rest]` is required to use asynchronous rest streaming. "
        "Install the `async_rest` extra of `google-api-core` using "
        "`pip install google-api-core[async_rest]`."
    ) from e

import google.protobuf.message
from google.api_core._rest_streaming_base import BaseResponseIterator


class AsyncResponseIterator(BaseResponseIterator):
    

    def __init__(
        self,
        response: google.auth.aio.transport.Response,
        response_message_cls: Union[proto.Message, google.protobuf.message.Message],
    ):
        self._response = response
        self._chunk_size = 1024
        
        
        
        
        self._response_itr = self._response.content(self._chunk_size).__aiter__()  
        super(AsyncResponseIterator, self).__init__(
            response_message_cls=response_message_cls
        )

    async def __aenter__(self):
        return self

    async def cancel(self):
        
        await self._response.close()

    async def __anext__(self):
        while not self._ready_objs:
            try:
                chunk = await self._response_itr.__anext__()
                chunk = chunk.decode("utf-8")
                self._process_chunk(chunk)
            except StopAsyncIteration as e:
                if self._level > 0:
                    raise ValueError("i Unfinished stream: %s" % self._obj)
                raise e
            except ValueError as e:
                raise e
        return self._grab()

    def __aiter__(self):
        return self

    async def __aexit__(self, exc_type, exc, tb):
        
        await self._response.close()
