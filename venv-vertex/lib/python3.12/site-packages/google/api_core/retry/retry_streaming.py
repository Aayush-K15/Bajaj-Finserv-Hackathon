














from __future__ import annotations

from typing import (
    Callable,
    Optional,
    List,
    Tuple,
    Iterable,
    Generator,
    TypeVar,
    Any,
    TYPE_CHECKING,
)

import sys
import time
import functools

from google.api_core.retry.retry_base import _BaseRetry
from google.api_core.retry.retry_base import _retry_error_helper
from google.api_core.retry import exponential_sleep_generator
from google.api_core.retry import build_retry_error
from google.api_core.retry import RetryFailureReason

if TYPE_CHECKING:
    if sys.version_info >= (3, 10):
        from typing import ParamSpec
    else:
        from typing_extensions import ParamSpec

    _P = ParamSpec("_P")  
    _Y = TypeVar("_Y")  


def retry_target_stream(
    target: Callable[_P, Iterable[_Y]],
    predicate: Callable[[Exception], bool],
    sleep_generator: Iterable[float],
    timeout: Optional[float] = None,
    on_error: Optional[Callable[[Exception], None]] = None,
    exception_factory: Callable[
        [List[Exception], RetryFailureReason, Optional[float]],
        Tuple[Exception, Optional[Exception]],
    ] = build_retry_error,
    init_args: tuple = (),
    init_kwargs: dict = {},
    **kwargs,
) -> Generator[_Y, Any, None]:
    

    timeout = kwargs.get("deadline", timeout)
    deadline: Optional[float] = (
        time.monotonic() + timeout if timeout is not None else None
    )
    error_list: list[Exception] = []
    sleep_iter = iter(sleep_generator)

    
    
    while True:
        
        try:
            
            
            
            subgenerator = target(*init_args, **init_kwargs)
            return (yield from subgenerator)
        
        
        
        except Exception as exc:
            
            next_sleep = _retry_error_helper(
                exc,
                deadline,
                sleep_iter,
                error_list,
                predicate,
                on_error,
                exception_factory,
                timeout,
            )
            
            time.sleep(next_sleep)


class StreamingRetry(_BaseRetry):
    

    def __call__(
        self,
        func: Callable[_P, Iterable[_Y]],
        on_error: Callable[[Exception], Any] | None = None,
    ) -> Callable[_P, Generator[_Y, Any, None]]:
        
        if self._on_error is not None:
            on_error = self._on_error

        @functools.wraps(func)
        def retry_wrapped_func(
            *args: _P.args, **kwargs: _P.kwargs
        ) -> Generator[_Y, Any, None]:
            
            sleep_generator = exponential_sleep_generator(
                self._initial, self._maximum, multiplier=self._multiplier
            )
            return retry_target_stream(
                func,
                predicate=self._predicate,
                sleep_generator=sleep_generator,
                timeout=self._timeout,
                on_error=on_error,
                init_args=args,
                init_kwargs=kwargs,
            )

        return retry_wrapped_func
