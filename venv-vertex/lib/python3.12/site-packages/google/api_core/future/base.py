















import abc


class Future(object, metaclass=abc.ABCMeta):
    
    

    

    @abc.abstractmethod
    def cancel(self):
        raise NotImplementedError()

    @abc.abstractmethod
    def cancelled(self):
        raise NotImplementedError()

    @abc.abstractmethod
    def running(self):
        raise NotImplementedError()

    @abc.abstractmethod
    def done(self):
        raise NotImplementedError()

    @abc.abstractmethod
    def result(self, timeout=None):
        raise NotImplementedError()

    @abc.abstractmethod
    def exception(self, timeout=None):
        raise NotImplementedError()

    @abc.abstractmethod
    def add_done_callback(self, fn):
        
        raise NotImplementedError()

    @abc.abstractmethod
    def set_result(self, result):
        raise NotImplementedError()

    @abc.abstractmethod
    def set_exception(self, exception):
        raise NotImplementedError()
