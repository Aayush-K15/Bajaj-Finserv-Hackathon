















from collections import deque
import string
from typing import Deque, Union
import types

import proto
import google.protobuf.message
from google.protobuf.json_format import Parse


class BaseResponseIterator:
    

    def __init__(
        self,
        response_message_cls: Union[proto.Message, google.protobuf.message.Message],
    ):
        self._response_message_cls = response_message_cls
        
        self._ready_objs: Deque[str] = deque()
        
        self._obj = ""
        
        self._level = 0
        
        
        self._in_string = False
        
        self._escape_next = False

        self._grab = types.MethodType(self._create_grab(), self)

    def _process_chunk(self, chunk: str):
        if self._level == 0:
            if chunk[0] != "[":
                raise ValueError(
                    "Can only parse array of JSON objects, instead got %s" % chunk
                )
        for char in chunk:
            if char == "{":
                if self._level == 1:
                    
                    
                    self._obj = ""
                if not self._in_string:
                    self._level += 1
                self._obj += char
            elif char == "}":
                self._obj += char
                if not self._in_string:
                    self._level -= 1
                if not self._in_string and self._level == 1:
                    self._ready_objs.append(self._obj)
            elif char == '"':
                
                if not self._escape_next:
                    self._in_string = not self._in_string
                self._obj += char
            elif char in string.whitespace:
                if self._in_string:
                    self._obj += char
            elif char == "[":
                if self._level == 0:
                    self._level += 1
                else:
                    self._obj += char
            elif char == "]":
                if self._level == 1:
                    self._level -= 1
                else:
                    self._obj += char
            else:
                self._obj += char
            self._escape_next = not self._escape_next if char == "\\" else False

    def _create_grab(self):
        if issubclass(self._response_message_cls, proto.Message):

            def grab(this):
                return this._response_message_cls.from_json(
                    this._ready_objs.popleft(), ignore_unknown_fields=True
                )

            return grab
        elif issubclass(self._response_message_cls, google.protobuf.message.Message):

            def grab(this):
                return Parse(this._ready_objs.popleft(), this._response_message_cls())

            return grab
        else:
            raise ValueError(
                "Response message class must be a subclass of proto.Message or google.protobuf.message.Message."
            )
