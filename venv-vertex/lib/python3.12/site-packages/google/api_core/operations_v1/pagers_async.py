














from typing import (
    Callable,
    AsyncIterator,
    Sequence,
    Tuple,
)

from google.longrunning import operations_pb2
from google.api_core.operations_v1.pagers_base import ListOperationsPagerBase


class ListOperationsAsyncPager(ListOperationsPagerBase):
    

    def __init__(
        self,
        method: Callable[..., operations_pb2.ListOperationsResponse],
        request: operations_pb2.ListOperationsRequest,
        response: operations_pb2.ListOperationsResponse,
        *,
        metadata: Sequence[Tuple[str, str]] = ()
    ):
        super().__init__(
            method=method, request=request, response=response, metadata=metadata
        )

    @property
    async def pages(self) -> AsyncIterator[operations_pb2.ListOperationsResponse]:
        yield self._response
        while self._response.next_page_token:
            self._request.page_token = self._response.next_page_token
            self._response = await self._method(self._request, metadata=self._metadata)
            yield self._response

    def __aiter__(self) -> AsyncIterator[operations_pb2.Operation]:
        async def async_generator():
            async for page in self.pages:
                for operation in page.operations:
                    yield operation

        return async_generator()
