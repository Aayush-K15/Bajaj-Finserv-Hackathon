














from typing import Optional, Sequence, Tuple, Union

from google.api_core import client_options as client_options_lib  
from google.api_core import gapic_v1  
from google.api_core.operations_v1 import pagers_async as pagers
from google.api_core.operations_v1.transports.base import (
    DEFAULT_CLIENT_INFO,
    OperationsTransport,
)
from google.api_core.operations_v1.abstract_operations_base_client import (
    AbstractOperationsBaseClient,
)
from google.longrunning import operations_pb2

try:
    from google.auth.aio import credentials as ga_credentials  
except ImportError as e:  
    raise ImportError(
        "The `async_rest` extra of `google-api-core` is required to use long-running operations.  Install it by running "
        "`pip install google-api-core[async_rest]`."
    ) from e


class AsyncOperationsRestClient(AbstractOperationsBaseClient):
    

    def __init__(
        self,
        *,
        credentials: Optional[ga_credentials.Credentials] = None,
        transport: Union[str, OperationsTransport, None] = None,
        client_options: Optional[client_options_lib.ClientOptions] = None,
        client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
    ) -> None:
        
        super().__init__(
            credentials=credentials,  
            
            
            transport=transport or "rest_asyncio",
            client_options=client_options,
            client_info=client_info,
        )

    async def get_operation(
        self,
        name: str,
        *,
        
        
        retry=gapic_v1.method_async.DEFAULT,
        timeout: Optional[float] = None,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> operations_pb2.Operation:
        r

        request = operations_pb2.GetOperationRequest(name=name)

        
        
        rpc = self._transport._wrapped_methods[self._transport.get_operation]

        
        
        metadata = tuple(metadata or ()) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        return response

    async def list_operations(
        self,
        name: str,
        filter_: Optional[str] = None,
        *,
        page_size: Optional[int] = None,
        page_token: Optional[str] = None,
        
        
        retry=gapic_v1.method_async.DEFAULT,
        timeout: Optional[float] = None,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> pagers.ListOperationsAsyncPager:
        r
        
        request = operations_pb2.ListOperationsRequest(name=name, filter=filter_)
        if page_size is not None:
            request.page_size = page_size
        if page_token is not None:
            request.page_token = page_token

        
        
        rpc = self._transport._wrapped_methods[self._transport.list_operations]

        
        
        metadata = tuple(metadata or ()) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        
        
        response = pagers.ListOperationsAsyncPager(
            method=rpc,
            request=request,
            response=response,
            metadata=metadata,
        )

        
        return response

    async def delete_operation(
        self,
        name: str,
        *,
        
        
        retry=gapic_v1.method_async.DEFAULT,
        timeout: Optional[float] = None,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> None:
        r
        
        request = operations_pb2.DeleteOperationRequest(name=name)

        
        
        rpc = self._transport._wrapped_methods[self._transport.delete_operation]

        
        
        metadata = tuple(metadata or ()) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

    async def cancel_operation(
        self,
        name: Optional[str] = None,
        *,
        
        
        retry=gapic_v1.method_async.DEFAULT,
        timeout: Optional[float] = None,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> None:
        r
        
        request = operations_pb2.CancelOperationRequest(name=name)

        
        
        rpc = self._transport._wrapped_methods[self._transport.cancel_operation]

        
        
        metadata = tuple(metadata or ()) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )
