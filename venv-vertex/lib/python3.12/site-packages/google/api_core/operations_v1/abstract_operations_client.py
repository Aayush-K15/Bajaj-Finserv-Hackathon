














from typing import Optional, Sequence, Tuple, Union

from google.api_core import client_options as client_options_lib  
from google.api_core import gapic_v1  
from google.api_core import retry as retries  
from google.api_core.operations_v1 import pagers
from google.api_core.operations_v1.transports.base import (
    DEFAULT_CLIENT_INFO,
    OperationsTransport,
)
from google.api_core.operations_v1.abstract_operations_base_client import (
    AbstractOperationsBaseClient,
)
from google.auth import credentials as ga_credentials  
from google.longrunning import operations_pb2
from google.oauth2 import service_account  
import grpc

OptionalRetry = Union[retries.Retry, object]


class AbstractOperationsClient(AbstractOperationsBaseClient):
    

    def __init__(
        self,
        *,
        credentials: Optional[ga_credentials.Credentials] = None,
        transport: Union[str, OperationsTransport, None] = None,
        client_options: Optional[client_options_lib.ClientOptions] = None,
        client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
    ) -> None:
        
        super().__init__(
            credentials=credentials,
            transport=transport,
            client_options=client_options,
            client_info=client_info,
        )

    @classmethod
    def from_service_account_info(cls, info: dict, *args, **kwargs):
        
        credentials = service_account.Credentials.from_service_account_info(info)
        kwargs["credentials"] = credentials
        return cls(*args, **kwargs)

    @classmethod
    def from_service_account_file(cls, filename: str, *args, **kwargs):
        
        credentials = service_account.Credentials.from_service_account_file(filename)
        kwargs["credentials"] = credentials
        return cls(*args, **kwargs)

    from_service_account_json = from_service_account_file

    def list_operations(
        self,
        name: str,
        filter_: Optional[str] = None,
        *,
        page_size: Optional[int] = None,
        page_token: Optional[str] = None,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Optional[float] = None,
        compression: Optional[grpc.Compression] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> pagers.ListOperationsPager:
        r
        
        request = operations_pb2.ListOperationsRequest(name=name, filter=filter_)
        if page_size is not None:
            request.page_size = page_size
        if page_token is not None:
            request.page_token = page_token

        
        
        rpc = self._transport._wrapped_methods[self._transport.list_operations]

        
        
        metadata = tuple(metadata or ()) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            compression=compression,
            metadata=metadata,
        )

        
        
        response = pagers.ListOperationsPager(
            method=rpc,
            request=request,
            response=response,
            metadata=metadata,
        )

        
        return response

    def get_operation(
        self,
        name: str,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Optional[float] = None,
        compression: Optional[grpc.Compression] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> operations_pb2.Operation:
        r

        request = operations_pb2.GetOperationRequest(name=name)

        
        
        rpc = self._transport._wrapped_methods[self._transport.get_operation]

        
        
        metadata = tuple(metadata or ()) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            compression=compression,
            metadata=metadata,
        )

        
        return response

    def delete_operation(
        self,
        name: str,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Optional[float] = None,
        compression: Optional[grpc.Compression] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> None:
        r
        
        request = operations_pb2.DeleteOperationRequest(name=name)

        
        
        rpc = self._transport._wrapped_methods[self._transport.delete_operation]

        
        
        metadata = tuple(metadata or ()) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        rpc(
            request,
            retry=retry,
            timeout=timeout,
            compression=compression,
            metadata=metadata,
        )

    def cancel_operation(
        self,
        name: Optional[str] = None,
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Optional[float] = None,
        compression: Optional[grpc.Compression] = gapic_v1.method.DEFAULT,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> None:
        r
        
        request = operations_pb2.CancelOperationRequest(name=name)

        
        
        rpc = self._transport._wrapped_methods[self._transport.cancel_operation]

        
        
        metadata = tuple(metadata or ()) + (
            gapic_v1.routing_header.to_grpc_metadata((("name", request.name),)),
        )

        
        rpc(
            request,
            retry=retry,
            timeout=timeout,
            compression=compression,
            metadata=metadata,
        )
