














import typing

from ._mcp_utils import mcp_to_gemini_tools
from .types import FunctionCall, Tool

if typing.TYPE_CHECKING:
  from mcp import types as mcp_types
  from mcp import ClientSession


class McpToGenAiToolAdapter:
  

  def __init__(
      self,
      session: "mcp.ClientSession",  
      list_tools_result: "mcp_types.ListToolsResult",  
  ) -> None:
    self._mcp_session = session
    self._list_tools_result = list_tools_result

  async def call_tool(
      self, function_call: FunctionCall
  ) -> "mcp_types.CallToolResult":  
    
    name = function_call.name if function_call.name else ""
    arguments = dict(function_call.args) if function_call.args else {}

    return typing.cast(
        "mcp_types.CallToolResult",
        await self._mcp_session.call_tool(
            name=name,
            arguments=arguments,
        ),
    )

  @property
  def tools(self) -> list[Tool]:
    
    return mcp_to_gemini_tools(self._list_tools_result.tools)
