
















from google._async_resumable_media import _upload
from google._async_resumable_media.requests import _request_helpers


class SimpleUpload(_request_helpers.RequestsMixin, _upload.SimpleUpload):
    

    async def transmit(
        self,
        transport,
        data,
        content_type,
        timeout=_request_helpers._DEFAULT_TIMEOUT,
    ):
        
        method, url, payload, headers = self._prepare_request(data, content_type)

        response = await _request_helpers.http_request(
            transport,
            method,
            url,
            data=payload,
            headers=headers,
            retry_strategy=self._retry_strategy,
            timeout=timeout,
        )
        self._process_response(response)
        return response


class MultipartUpload(_request_helpers.RequestsMixin, _upload.MultipartUpload):
    

    async def transmit(
        self,
        transport,
        data,
        metadata,
        content_type,
        timeout=_request_helpers._DEFAULT_TIMEOUT,
    ):
        
        method, url, payload, headers = self._prepare_request(
            data, metadata, content_type
        )

        response = await _request_helpers.http_request(
            transport,
            method,
            url,
            data=payload,
            headers=headers,
            retry_strategy=self._retry_strategy,
            timeout=timeout,
        )
        self._process_response(response)
        return response


class ResumableUpload(_request_helpers.RequestsMixin, _upload.ResumableUpload):
    

    async def initiate(
        self,
        transport,
        stream,
        metadata,
        content_type,
        total_bytes=None,
        stream_final=True,
        timeout=_request_helpers._DEFAULT_TIMEOUT,
    ):
        
        method, url, payload, headers = self._prepare_initiate_request(
            stream,
            metadata,
            content_type,
            total_bytes=total_bytes,
            stream_final=stream_final,
        )
        response = await _request_helpers.http_request(
            transport,
            method,
            url,
            data=payload,
            headers=headers,
            retry_strategy=self._retry_strategy,
            timeout=timeout,
        )
        self._process_initiate_response(response)
        return response

    async def transmit_next_chunk(
        self, transport, timeout=_request_helpers._DEFAULT_TIMEOUT
    ):
        
        method, url, payload, headers = self._prepare_request()
        response = await _request_helpers.http_request(
            transport,
            method,
            url,
            data=payload,
            headers=headers,
            retry_strategy=self._retry_strategy,
            timeout=timeout,
        )
        await self._process_resumable_response(response, len(payload))
        return response

    async def recover(self, transport):
        
        method, url, payload, headers = self._prepare_recover_request()
        
        response = await _request_helpers.http_request(
            transport,
            method,
            url,
            data=payload,
            headers=headers,
            retry_strategy=self._retry_strategy,
        )
        self._process_recover_response(response)
        return response
