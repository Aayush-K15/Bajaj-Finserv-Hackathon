
















import functools

from google._async_resumable_media import _helpers
from google.resumable_media import common

from google.auth.transport import _aiohttp_requests as aiohttp_requests  
import aiohttp  

_DEFAULT_RETRY_STRATEGY = common.RetryStrategy()
_SINGLE_GET_CHUNK_SIZE = 8192





_DEFAULT_CONNECT_TIMEOUT = 61

_DEFAULT_READ_TIMEOUT = 60
_DEFAULT_TIMEOUT = aiohttp.ClientTimeout(
    connect=_DEFAULT_CONNECT_TIMEOUT, sock_read=_DEFAULT_READ_TIMEOUT
)


class RequestsMixin(object):
    

    @staticmethod
    def _get_status_code(response):
        
        return response.status

    @staticmethod
    def _get_headers(response):
        
        
        
        return response._headers

    @staticmethod
    async def _get_body(response):
        
        wrapped_response = aiohttp_requests._CombinedResponse(response)
        content = await wrapped_response.data.read()
        return content


class RawRequestsMixin(RequestsMixin):
    @staticmethod
    async def _get_body(response):
        

        wrapped_response = aiohttp_requests._CombinedResponse(response)
        content = await wrapped_response.raw_content()
        return content


async def http_request(
    transport,
    method,
    url,
    data=None,
    headers=None,
    retry_strategy=_DEFAULT_RETRY_STRATEGY,
    **transport_kwargs
):
    

    
    
    
    
    if "timeout" not in transport_kwargs:
        timeout = _DEFAULT_TIMEOUT
        transport_kwargs["timeout"] = timeout

    func = functools.partial(
        transport.request, method, url, data=data, headers=headers, **transport_kwargs
    )

    resp = await _helpers.wait_and_retry(
        func, RequestsMixin._get_status_code, retry_strategy
    )
    return resp
