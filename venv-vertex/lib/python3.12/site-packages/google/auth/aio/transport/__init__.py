















import abc
from typing import AsyncGenerator, Mapping, Optional

import google.auth.transport


_DEFAULT_TIMEOUT_SECONDS = 180

DEFAULT_RETRYABLE_STATUS_CODES = google.auth.transport.DEFAULT_RETRYABLE_STATUS_CODES



DEFAULT_MAX_RETRY_ATTEMPTS = 3



class Response(metaclass=abc.ABCMeta):
    

    @property
    @abc.abstractmethod
    def status_code(self) -> int:
        
        raise NotImplementedError("status_code must be implemented.")

    @property
    @abc.abstractmethod
    def headers(self) -> Mapping[str, str]:
        
        raise NotImplementedError("headers must be implemented.")

    @abc.abstractmethod
    async def content(self, chunk_size: int) -> AsyncGenerator[bytes, None]:
        
        raise NotImplementedError("content must be implemented.")

    @abc.abstractmethod
    async def read(self) -> bytes:
        
        raise NotImplementedError("read must be implemented.")

    @abc.abstractmethod
    async def close(self):
        
        raise NotImplementedError("close must be implemented.")


class Request(metaclass=abc.ABCMeta):
    

    @abc.abstractmethod
    async def __call__(
        self,
        url: str,
        method: str,
        body: Optional[bytes],
        headers: Optional[Mapping[str, str]],
        timeout: float,
        **kwargs
    ) -> Response:
        
        
        
        raise NotImplementedError("__call__ must be implemented.")

    async def close(self) -> None:
        
        raise NotImplementedError("close must be implemented.")
