

















from google.auth import _helpers
from google.auth import exceptions
from google.auth._credentials_base import _BaseCredentials


class Credentials(_BaseCredentials):
    

    def __init__(self):
        super(Credentials, self).__init__()

    async def apply(self, headers, token=None):
        
        self._apply(headers, token=token)

    async def refresh(self, request):
        
        raise NotImplementedError("Refresh must be implemented")

    async def before_request(self, request, method, url, headers):
        
        await self.apply(headers)


class StaticCredentials(Credentials):
    

    def __init__(self, token):
        
        super(StaticCredentials, self).__init__()
        self.token = token

    @_helpers.copy_docstring(Credentials)
    async def refresh(self, request):
        raise exceptions.InvalidOperation("Static credentials cannot be refreshed.")

    
    
    @_helpers.copy_docstring(Credentials)
    async def before_request(self, request, method, url, headers):
        await self.apply(headers)


class AnonymousCredentials(Credentials):
    

    async def refresh(self, request):
        
        raise exceptions.InvalidOperation("Anonymous credentials cannot be refreshed.")

    async def apply(self, headers, token=None):
        
        if token is not None:
            raise exceptions.InvalidValue("Anonymous credentials don't support tokens.")

    async def before_request(self, request, method, url, headers):
        
        pass
