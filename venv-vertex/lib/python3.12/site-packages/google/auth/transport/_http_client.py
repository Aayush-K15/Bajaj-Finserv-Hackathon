















import http.client as http_client
import logging
import socket
import urllib

from google.auth import _helpers
from google.auth import exceptions
from google.auth import transport

_LOGGER = logging.getLogger(__name__)


class Response(transport.Response):
    

    def __init__(self, response):
        self._status = response.status
        self._headers = {key.lower(): value for key, value in response.getheaders()}
        self._data = response.read()

    @property
    def status(self):
        return self._status

    @property
    def headers(self):
        return self._headers

    @property
    def data(self):
        return self._data


class Request(transport.Request):
    

    def __call__(
        self, url, method="GET", body=None, headers=None, timeout=None, **kwargs
    ):
        
        
        if timeout is None:
            timeout = socket._GLOBAL_DEFAULT_TIMEOUT

        
        if headers is None:
            headers = {}

        
        parts = urllib.parse.urlsplit(url)
        path = urllib.parse.urlunsplit(
            ("", "", parts.path, parts.query, parts.fragment)
        )

        if parts.scheme != "http":
            raise exceptions.TransportError(
                "http.client transport only supports the http scheme, {}"
                "was specified".format(parts.scheme)
            )

        connection = http_client.HTTPConnection(parts.netloc, timeout=timeout)

        try:

            _helpers.request_log(_LOGGER, method, url, body, headers)
            connection.request(method, path, body=body, headers=headers, **kwargs)
            response = connection.getresponse()
            _helpers.response_log(_LOGGER, response)
            return Response(response)

        except (http_client.HTTPException, socket.error) as caught_exc:
            new_exc = exceptions.TransportError(caught_exc)
            raise new_exc from caught_exc

        finally:
            connection.close()
