















import abc
import io
import json

from google.auth import exceptions

_JSON_FILE_PRIVATE_KEY = "private_key"
_JSON_FILE_PRIVATE_KEY_ID = "private_key_id"


class Verifier(metaclass=abc.ABCMeta):
    

    @abc.abstractmethod
    def verify(self, message, signature):
        
        
        
        raise NotImplementedError("Verify must be implemented")


class Signer(metaclass=abc.ABCMeta):
    

    @abc.abstractproperty
    def key_id(self):
        
        raise NotImplementedError("Key id must be implemented")

    @abc.abstractmethod
    def sign(self, message):
        
        
        
        raise NotImplementedError("Sign must be implemented")


class FromServiceAccountMixin(metaclass=abc.ABCMeta):
    

    @abc.abstractmethod
    def from_string(cls, key, key_id=None):
        
        raise NotImplementedError("from_string must be implemented")

    @classmethod
    def from_service_account_info(cls, info):
        
        if _JSON_FILE_PRIVATE_KEY not in info:
            raise exceptions.MalformedError(
                "The private_key field was not found in the service account " "info."
            )

        return cls.from_string(
            info[_JSON_FILE_PRIVATE_KEY], info.get(_JSON_FILE_PRIVATE_KEY_ID)
        )

    @classmethod
    def from_service_account_file(cls, filename):
        
        with io.open(filename, "r", encoding="utf-8") as json_file:
            data = json.load(json_file)

        return cls.from_service_account_info(data)
