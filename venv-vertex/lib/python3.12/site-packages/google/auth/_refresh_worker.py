













import copy
import logging
import threading

import google.auth.exceptions as e

_LOGGER = logging.getLogger(__name__)


class RefreshThreadManager:
    

    def __init__(self):
        

        self._worker = None
        self._lock = threading.Lock()  

    def start_refresh(self, cred, request):
        
        if cred is None or request is None:
            raise e.InvalidValue(
                "Unable to start refresh. cred and request must be valid and instantiated objects."
            )

        with self._lock:
            if self._worker is not None and self._worker._error_info is not None:
                return False

            if self._worker is None or not self._worker.is_alive():  
                self._worker = RefreshThread(cred=cred, request=copy.deepcopy(request))
                self._worker.start()
        return True

    def clear_error(self):
        
        with self._lock:
            if self._worker:
                self._worker._error_info = None

    def __getstate__(self):
        
        state = self.__dict__.copy()
        state["_lock"] = None
        return state

    def __setstate__(self, state):
        
        state["_lock"] = threading.Lock()
        self.__dict__.update(state)


class RefreshThread(threading.Thread):
    

    def __init__(self, cred, request, **kwargs):
        

        super().__init__(**kwargs)
        self._cred = cred
        self._request = request
        self._error_info = None

    def run(self):
        
        try:
            self._cred.refresh(self._request)
        except Exception as err:  
            _LOGGER.error(f"Background refresh failed due to: {err}")
            self._error_info = err
