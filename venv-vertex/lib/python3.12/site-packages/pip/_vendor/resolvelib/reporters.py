from __future__ import annotations

from typing import TYPE_CHECKING, Collection, Generic

from .structs import CT, KT, RT, RequirementInformation, State

if TYPE_CHECKING:
    from .resolvers import Criterion


class BaseReporter(Generic[RT, CT, KT]):
    

    def starting(self) -> None:
        

    def starting_round(self, index: int) -> None:
        

    def ending_round(self, index: int, state: State[RT, CT, KT]) -> None:
        

    def ending(self, state: State[RT, CT, KT]) -> None:
        

    def adding_requirement(self, requirement: RT, parent: CT | None) -> None:
        

    def resolving_conflicts(
        self, causes: Collection[RequirementInformation[RT, CT]]
    ) -> None:
        

    def rejecting_candidate(self, criterion: Criterion[RT, CT], candidate: CT) -> None:
        

    def pinning(self, candidate: CT) -> None:
        
